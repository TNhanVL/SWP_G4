/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e,t,n={516:function(e,t,n){"use strict";var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,':root{--dt-row-selected: 13, 110, 253;--dt-row-selected-text: 255, 255, 255;--dt-row-selected-link: 9, 10, 11;--dt-row-stripe: 0, 0, 0;--dt-row-hover: 0, 0, 0;--dt-column-ordering: 0, 0, 0;--dt-html-background: white}:root.dark{--dt-html-background: rgb(33, 37, 41)}table.dataTable td.dt-control{text-align:center;cursor:pointer}table.dataTable td.dt-control:before{display:inline-block;color:rgba(0, 0, 0, 0.5);content:"►"}table.dataTable tr.dt-hasChild td.dt-control:before{content:"▼"}html.dark table.dataTable td.dt-control:before{color:rgba(255, 255, 255, 0.5)}html.dark table.dataTable tr.dt-hasChild td.dt-control:before{color:rgba(255, 255, 255, 0.5)}table.dataTable thead>tr>th.sorting,table.dataTable thead>tr>th.sorting_asc,table.dataTable thead>tr>th.sorting_desc,table.dataTable thead>tr>th.sorting_asc_disabled,table.dataTable thead>tr>th.sorting_desc_disabled,table.dataTable thead>tr>td.sorting,table.dataTable thead>tr>td.sorting_asc,table.dataTable thead>tr>td.sorting_desc,table.dataTable thead>tr>td.sorting_asc_disabled,table.dataTable thead>tr>td.sorting_desc_disabled{cursor:pointer;position:relative;padding-right:26px}table.dataTable thead>tr>th.sorting:before,table.dataTable thead>tr>th.sorting:after,table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_asc:after,table.dataTable thead>tr>th.sorting_desc:before,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>th.sorting_asc_disabled:after,table.dataTable thead>tr>th.sorting_desc_disabled:before,table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting:before,table.dataTable thead>tr>td.sorting:after,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_asc:after,table.dataTable thead>tr>td.sorting_desc:before,table.dataTable thead>tr>td.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_asc_disabled:after,table.dataTable thead>tr>td.sorting_desc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:after{position:absolute;display:block;opacity:.125;right:10px;line-height:9px;font-size:.8em}table.dataTable thead>tr>th.sorting:before,table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_desc:before,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>th.sorting_desc_disabled:before,table.dataTable thead>tr>td.sorting:before,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_desc:before,table.dataTable thead>tr>td.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:before{bottom:50%;content:"▲";content:"▲"/""}table.dataTable thead>tr>th.sorting:after,table.dataTable thead>tr>th.sorting_asc:after,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>th.sorting_asc_disabled:after,table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting:after,table.dataTable thead>tr>td.sorting_asc:after,table.dataTable thead>tr>td.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc_disabled:after,table.dataTable thead>tr>td.sorting_desc_disabled:after{top:50%;content:"▼";content:"▼"/""}table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_desc:after{opacity:.6}table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting_asc_disabled:before{display:none}table.dataTable thead>tr>th:active,table.dataTable thead>tr>td:active{outline:none}div.dataTables_scrollBody>table.dataTable>thead>tr>th:before,div.dataTables_scrollBody>table.dataTable>thead>tr>th:after,div.dataTables_scrollBody>table.dataTable>thead>tr>td:before,div.dataTables_scrollBody>table.dataTable>thead>tr>td:after{display:none}div.dataTables_processing{position:absolute;top:50%;left:50%;width:200px;margin-left:-100px;margin-top:-26px;text-align:center;padding:2px}div.dataTables_processing>div:last-child{position:relative;width:80px;height:15px;margin:1em auto}div.dataTables_processing>div:last-child>div{position:absolute;top:0;width:13px;height:13px;border-radius:50%;background:#0d6efd;background:rgb(var(--dt-row-selected));animation-timing-function:cubic-bezier(0, 1, 1, 0)}div.dataTables_processing>div:last-child>div:nth-child(1){left:8px;animation:datatables-loader-1 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(2){left:8px;animation:datatables-loader-2 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(3){left:32px;animation:datatables-loader-2 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(4){left:56px;animation:datatables-loader-3 .6s infinite}@keyframes datatables-loader-1{0%{transform:scale(0)}100%{transform:scale(1)}}@keyframes datatables-loader-3{0%{transform:scale(1)}100%{transform:scale(0)}}@keyframes datatables-loader-2{0%{transform:translate(0, 0)}100%{transform:translate(24px, 0)}}table.dataTable.nowrap th,table.dataTable.nowrap td{white-space:nowrap}table.dataTable th.dt-left,table.dataTable td.dt-left{text-align:left}table.dataTable th.dt-center,table.dataTable td.dt-center,table.dataTable td.dataTables_empty{text-align:center}table.dataTable th.dt-right,table.dataTable td.dt-right{text-align:right}table.dataTable th.dt-justify,table.dataTable td.dt-justify{text-align:justify}table.dataTable th.dt-nowrap,table.dataTable td.dt-nowrap{white-space:nowrap}table.dataTable thead th,table.dataTable thead td,table.dataTable tfoot th,table.dataTable tfoot td{text-align:left}table.dataTable thead th.dt-head-left,table.dataTable thead td.dt-head-left,table.dataTable tfoot th.dt-head-left,table.dataTable tfoot td.dt-head-left{text-align:left}table.dataTable thead th.dt-head-center,table.dataTable thead td.dt-head-center,table.dataTable tfoot th.dt-head-center,table.dataTable tfoot td.dt-head-center{text-align:center}table.dataTable thead th.dt-head-right,table.dataTable thead td.dt-head-right,table.dataTable tfoot th.dt-head-right,table.dataTable tfoot td.dt-head-right{text-align:right}table.dataTable thead th.dt-head-justify,table.dataTable thead td.dt-head-justify,table.dataTable tfoot th.dt-head-justify,table.dataTable tfoot td.dt-head-justify{text-align:justify}table.dataTable thead th.dt-head-nowrap,table.dataTable thead td.dt-head-nowrap,table.dataTable tfoot th.dt-head-nowrap,table.dataTable tfoot td.dt-head-nowrap{white-space:nowrap}table.dataTable tbody th.dt-body-left,table.dataTable tbody td.dt-body-left{text-align:left}table.dataTable tbody th.dt-body-center,table.dataTable tbody td.dt-body-center{text-align:center}table.dataTable tbody th.dt-body-right,table.dataTable tbody td.dt-body-right{text-align:right}table.dataTable tbody th.dt-body-justify,table.dataTable tbody td.dt-body-justify{text-align:justify}table.dataTable tbody th.dt-body-nowrap,table.dataTable tbody td.dt-body-nowrap{white-space:nowrap}table.dataTable{width:100%;margin:0 auto;clear:both;border-collapse:separate;border-spacing:0}table.dataTable thead th,table.dataTable tfoot th{font-weight:bold}table.dataTable>thead>tr>th,table.dataTable>thead>tr>td{padding:10px;border-bottom:1px solid rgba(0, 0, 0, 0.3)}table.dataTable>thead>tr>th:active,table.dataTable>thead>tr>td:active{outline:none}table.dataTable>tfoot>tr>th,table.dataTable>tfoot>tr>td{padding:10px 10px 6px 10px;border-top:1px solid rgba(0, 0, 0, 0.3)}table.dataTable tbody tr{background-color:transparent}table.dataTable tbody tr.selected>*{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.9);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.9);color:white;color:rgb(var(--dt-row-selected-text))}table.dataTable tbody tr.selected a{color:#090a0b;color:rgb(var(--dt-row-selected-link))}table.dataTable tbody th,table.dataTable tbody td{padding:8px 10px}table.dataTable.row-border>tbody>tr>th,table.dataTable.row-border>tbody>tr>td,table.dataTable.display>tbody>tr>th,table.dataTable.display>tbody>tr>td{border-top:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.row-border>tbody>tr:first-child>th,table.dataTable.row-border>tbody>tr:first-child>td,table.dataTable.display>tbody>tr:first-child>th,table.dataTable.display>tbody>tr:first-child>td{border-top:none}table.dataTable.row-border>tbody>tr.selected+tr.selected>td,table.dataTable.display>tbody>tr.selected+tr.selected>td{border-top-color:#0262ef}table.dataTable.cell-border>tbody>tr>th,table.dataTable.cell-border>tbody>tr>td{border-top:1px solid rgba(0, 0, 0, 0.15);border-right:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.cell-border>tbody>tr>th:first-child,table.dataTable.cell-border>tbody>tr>td:first-child{border-left:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.cell-border>tbody>tr:first-child>th,table.dataTable.cell-border>tbody>tr:first-child>td{border-top:none}table.dataTable.stripe>tbody>tr.odd>*,table.dataTable.display>tbody>tr.odd>*{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.023);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-stripe), 0.023)}table.dataTable.stripe>tbody>tr.odd.selected>*,table.dataTable.display>tbody>tr.odd.selected>*{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.923);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.923)}table.dataTable.hover>tbody>tr:hover>*,table.dataTable.display>tbody>tr:hover>*{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.035);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.035)}table.dataTable.hover>tbody>tr.selected:hover>*,table.dataTable.display>tbody>tr.selected:hover>*{box-shadow:inset 0 0 0 9999px #0d6efd !important;box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 1) !important}table.dataTable.order-column>tbody tr>.sorting_1,table.dataTable.order-column>tbody tr>.sorting_2,table.dataTable.order-column>tbody tr>.sorting_3,table.dataTable.display>tbody tr>.sorting_1,table.dataTable.display>tbody tr>.sorting_2,table.dataTable.display>tbody tr>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.019);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.019)}table.dataTable.order-column>tbody tr.selected>.sorting_1,table.dataTable.order-column>tbody tr.selected>.sorting_2,table.dataTable.order-column>tbody tr.selected>.sorting_3,table.dataTable.display>tbody tr.selected>.sorting_1,table.dataTable.display>tbody tr.selected>.sorting_2,table.dataTable.display>tbody tr.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.919);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.919)}table.dataTable.display>tbody>tr.odd>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.054);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.054)}table.dataTable.display>tbody>tr.odd>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.047);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.047)}table.dataTable.display>tbody>tr.odd>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.039);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.039)}table.dataTable.display>tbody>tr.odd.selected>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.954);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.954)}table.dataTable.display>tbody>tr.odd.selected>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.947);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.947)}table.dataTable.display>tbody>tr.odd.selected>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.939);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.939)}table.dataTable.display>tbody>tr.even>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.019);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.019)}table.dataTable.display>tbody>tr.even>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.011);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.011)}table.dataTable.display>tbody>tr.even>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.003);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.003)}table.dataTable.display>tbody>tr.even.selected>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.919);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.919)}table.dataTable.display>tbody>tr.even.selected>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.911);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.911)}table.dataTable.display>tbody>tr.even.selected>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.903);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.903)}table.dataTable.display tbody tr:hover>.sorting_1,table.dataTable.order-column.hover tbody tr:hover>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.082);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.082)}table.dataTable.display tbody tr:hover>.sorting_2,table.dataTable.order-column.hover tbody tr:hover>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.074);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.074)}table.dataTable.display tbody tr:hover>.sorting_3,table.dataTable.order-column.hover tbody tr:hover>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.062);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.062)}table.dataTable.display tbody tr:hover.selected>.sorting_1,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.982);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.982)}table.dataTable.display tbody tr:hover.selected>.sorting_2,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.974);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.974)}table.dataTable.display tbody tr:hover.selected>.sorting_3,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.962);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.962)}table.dataTable.no-footer{border-bottom:1px solid rgba(0, 0, 0, 0.3)}table.dataTable.compact thead th,table.dataTable.compact thead td,table.dataTable.compact tfoot th,table.dataTable.compact tfoot td,table.dataTable.compact tbody th,table.dataTable.compact tbody td{padding:4px}table.dataTable th,table.dataTable td{box-sizing:content-box}.dataTables_wrapper{position:relative;clear:both}.dataTables_wrapper .dataTables_length{float:left}.dataTables_wrapper .dataTables_length select{border:1px solid #aaa;border-radius:3px;padding:5px;background-color:transparent;color:inherit;padding:4px}.dataTables_wrapper .dataTables_filter{float:right;text-align:right}.dataTables_wrapper .dataTables_filter input{border:1px solid #aaa;border-radius:3px;padding:5px;background-color:transparent;color:inherit;margin-left:3px}.dataTables_wrapper .dataTables_info{clear:both;float:left;padding-top:.755em}.dataTables_wrapper .dataTables_paginate{float:right;text-align:right;padding-top:.25em}.dataTables_wrapper .dataTables_paginate .paginate_button{box-sizing:border-box;display:inline-block;min-width:1.5em;padding:.5em 1em;margin-left:2px;text-align:center;text-decoration:none !important;cursor:pointer;color:inherit !important;border:1px solid transparent;border-radius:2px;background:transparent}.dataTables_wrapper .dataTables_paginate .paginate_button.current,.dataTables_wrapper .dataTables_paginate .paginate_button.current:hover{color:inherit !important;border:1px solid rgba(0, 0, 0, 0.3);background-color:rgba(0, 0, 0, 0.05);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(230, 230, 230, 0.05)), color-stop(100%, rgba(0, 0, 0, 0.05)));background:-webkit-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-moz-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-ms-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-o-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:linear-gradient(to bottom, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%)}.dataTables_wrapper .dataTables_paginate .paginate_button.disabled,.dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover,.dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active{cursor:default;color:#666 !important;border:1px solid transparent;background:transparent;box-shadow:none}.dataTables_wrapper .dataTables_paginate .paginate_button:hover{color:white !important;border:1px solid #111;background-color:#111;background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, #585858), color-stop(100%, #111));background:-webkit-linear-gradient(top, #585858 0%, #111 100%);background:-moz-linear-gradient(top, #585858 0%, #111 100%);background:-ms-linear-gradient(top, #585858 0%, #111 100%);background:-o-linear-gradient(top, #585858 0%, #111 100%);background:linear-gradient(to bottom, #585858 0%, #111 100%)}.dataTables_wrapper .dataTables_paginate .paginate_button:active{outline:none;background-color:#0c0c0c;background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, #2b2b2b), color-stop(100%, #0c0c0c));background:-webkit-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-moz-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-ms-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-o-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:linear-gradient(to bottom, #2b2b2b 0%, #0c0c0c 100%);box-shadow:inset 0 0 3px #111}.dataTables_wrapper .dataTables_paginate .ellipsis{padding:0 1em}.dataTables_wrapper .dataTables_length,.dataTables_wrapper .dataTables_filter,.dataTables_wrapper .dataTables_info,.dataTables_wrapper .dataTables_processing,.dataTables_wrapper .dataTables_paginate{color:inherit}.dataTables_wrapper .dataTables_scroll{clear:both}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody{-webkit-overflow-scrolling:touch}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>th,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>td,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>th,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>td{vertical-align:middle}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>th>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>td>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>th>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>td>div.dataTables_sizing{height:0;overflow:hidden;margin:0 !important;padding:0 !important}.dataTables_wrapper.no-footer .dataTables_scrollBody{border-bottom:1px solid rgba(0, 0, 0, 0.3)}.dataTables_wrapper.no-footer div.dataTables_scrollHead table.dataTable,.dataTables_wrapper.no-footer div.dataTables_scrollBody>table{border-bottom:none}.dataTables_wrapper:after{visibility:hidden;display:block;content:"";clear:both;height:0}@media screen and (max-width: 767px){.dataTables_wrapper .dataTables_info,.dataTables_wrapper .dataTables_paginate{float:none;text-align:center}.dataTables_wrapper .dataTables_paginate{margin-top:.5em}}@media screen and (max-width: 640px){.dataTables_wrapper .dataTables_length,.dataTables_wrapper .dataTables_filter{float:none;text-align:center}.dataTables_wrapper .dataTables_filter{margin-top:.5em}}html.dark{--dt-row-hover: 255, 255, 255;--dt-row-stripe: 255, 255, 255;--dt-column-ordering: 255, 255, 255}html.dark table.dataTable>thead>tr>th,html.dark table.dataTable>thead>tr>td{border-bottom:1px solid #595b5e}html.dark table.dataTable>thead>tr>th:active,html.dark table.dataTable>thead>tr>td:active{outline:none}html.dark table.dataTable>tfoot>tr>th,html.dark table.dataTable>tfoot>tr>td{border-top:1px solid #595b5e}html.dark table.dataTable.row-border>tbody>tr>th,html.dark table.dataTable.row-border>tbody>tr>td,html.dark table.dataTable.display>tbody>tr>th,html.dark table.dataTable.display>tbody>tr>td{border-top:1px solid #404346}html.dark table.dataTable.row-border>tbody>tr.selected+tr.selected>td,html.dark table.dataTable.display>tbody>tr.selected+tr.selected>td{border-top-color:#0257d5}html.dark table.dataTable.cell-border>tbody>tr>th,html.dark table.dataTable.cell-border>tbody>tr>td{border-top:1px solid #404346;border-right:1px solid #404346}html.dark table.dataTable.cell-border>tbody>tr>th:first-child,html.dark table.dataTable.cell-border>tbody>tr>td:first-child{border-left:1px solid #404346}html.dark .dataTables_wrapper .dataTables_filter input,html.dark .dataTables_wrapper .dataTables_length select{border:1px solid rgba(255, 255, 255, 0.2);background-color:var(--dt-html-background)}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.current,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover{border:1px solid #595b5e;background:rgba(255, 255, 255, 0.15)}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active{color:#666 !important}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button:hover{border:1px solid #353535;background:#353535}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button:active{background:#3a3a3a}\n',"",{version:3,sources:["webpack://./node_modules/datatables.net-dt/css/jquery.dataTables.min.css"],names:[],mappings:"AAAA,MAAM,+BAA+B,CAAC,qCAAqC,CAAC,iCAAiC,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,6BAA6B,CAAC,2BAA2B,CAAC,WAAW,qCAAqC,CAAC,8BAA8B,iBAAiB,CAAC,cAAc,CAAC,qCAAqC,oBAAoB,CAAC,wBAAwB,CAAC,WAAW,CAAC,oDAAoD,WAAW,CAAC,+CAA+C,8BAA8B,CAAC,8DAA8D,8BAA8B,CAAC,gbAAgb,cAAc,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,k+BAAk+B,iBAAiB,CAAC,aAAa,CAAC,YAAY,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,sfAAsf,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,4eAA4e,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,4LAA4L,UAAU,CAAC,gOAAgO,YAAY,CAAC,sEAAsE,YAAY,CAAC,kPAAkP,YAAY,CAAC,0BAA0B,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,WAAW,CAAC,yCAAyC,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAC,6CAA6C,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,sCAAsC,CAAC,kDAAkD,CAAC,0DAA0D,QAAQ,CAAC,0CAA0C,CAAC,0DAA0D,QAAQ,CAAC,0CAA0C,CAAC,0DAA0D,SAAS,CAAC,0CAA0C,CAAC,0DAA0D,SAAS,CAAC,0CAA0C,CAAC,+BAA+B,GAAG,kBAAkB,CAAC,KAAK,kBAAkB,CAAC,CAAC,+BAA+B,GAAG,kBAAkB,CAAC,KAAK,kBAAkB,CAAC,CAAC,+BAA+B,GAAG,yBAAyB,CAAC,KAAK,4BAA4B,CAAC,CAAC,oDAAoD,kBAAkB,CAAC,sDAAsD,eAAe,CAAC,8FAA8F,iBAAiB,CAAC,wDAAwD,gBAAgB,CAAC,4DAA4D,kBAAkB,CAAC,0DAA0D,kBAAkB,CAAC,oGAAoG,eAAe,CAAC,wJAAwJ,eAAe,CAAC,gKAAgK,iBAAiB,CAAC,4JAA4J,gBAAgB,CAAC,oKAAoK,kBAAkB,CAAC,gKAAgK,kBAAkB,CAAC,4EAA4E,eAAe,CAAC,gFAAgF,iBAAiB,CAAC,8EAA8E,gBAAgB,CAAC,kFAAkF,kBAAkB,CAAC,gFAAgF,kBAAkB,CAAC,gBAAgB,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,kDAAkD,gBAAgB,CAAC,wDAAwD,YAAY,CAAC,0CAA0C,CAAC,sEAAsE,YAAY,CAAC,wDAAwD,0BAA0B,CAAC,uCAAuC,CAAC,yBAAyB,4BAA4B,CAAC,oCAAoC,qDAAqD,CAAC,+DAA+D,CAAC,WAAW,CAAC,sCAAsC,CAAC,oCAAoC,aAAa,CAAC,sCAAsC,CAAC,kDAAkD,gBAAgB,CAAC,sJAAsJ,wCAAwC,CAAC,sMAAsM,eAAe,CAAC,qHAAqH,wBAAwB,CAAC,gFAAgF,wCAAwC,CAAC,0CAA0C,CAAC,wGAAwG,yCAAyC,CAAC,wGAAwG,eAAe,CAAC,6EAA6E,kDAAkD,CAAC,+DAA+D,CAAC,+FAA+F,uDAAuD,CAAC,iEAAiE,CAAC,gFAAgF,kDAAkD,CAAC,8DAA8D,CAAC,kGAAkG,gDAAgD,CAAC,wEAAwE,CAAC,uRAAuR,kDAAkD,CAAC,oEAAoE,CAAC,6UAA6U,uDAAuD,CAAC,iEAAiE,CAAC,4GAA4G,kDAAkD,CAAC,oEAAoE,CAAC,4GAA4G,kDAAkD,CAAC,oEAAoE,CAAC,4GAA4G,kDAAkD,CAAC,oEAAoE,CAAC,8HAA8H,uDAAuD,CAAC,iEAAiE,CAAC,8HAA8H,uDAAuD,CAAC,iEAAiE,CAAC,8HAA8H,uDAAuD,CAAC,iEAAiE,CAAC,8GAA8G,kDAAkD,CAAC,iEAAiE,CAAC,8GAA8G,kDAAkD,CAAC,iEAAiE,CAAC,8GAA8G,kDAAkD,CAAC,iEAAiE,CAAC,gIAAgI,uDAAuD,CAAC,iEAAiE,CAAC,gIAAgI,uDAAuD,CAAC,iEAAiE,CAAC,gIAAgI,uDAAuD,CAAC,iEAAiE,CAAC,+GAA+G,kDAAkD,CAAC,8DAA8D,CAAC,+GAA+G,kDAAkD,CAAC,8DAA8D,CAAC,+GAA+G,kDAAkD,CAAC,8DAA8D,CAAC,iIAAiI,uDAAuD,CAAC,iEAAiE,CAAC,iIAAiI,uDAAuD,CAAC,iEAAiE,CAAC,iIAAiI,uDAAuD,CAAC,iEAAiE,CAAC,0BAA0B,0CAA0C,CAAC,sMAAsM,WAAW,CAAC,sCAAsC,sBAAsB,CAAC,oBAAoB,iBAAiB,CAAC,UAAU,CAAC,uCAAuC,UAAU,CAAC,8CAA8C,qBAAqB,CAAC,iBAAiB,CAAC,WAAW,CAAC,4BAA4B,CAAC,aAAa,CAAC,WAAW,CAAC,uCAAuC,WAAW,CAAC,gBAAgB,CAAC,6CAA6C,qBAAqB,CAAC,iBAAiB,CAAC,WAAW,CAAC,4BAA4B,CAAC,aAAa,CAAC,eAAe,CAAC,qCAAqC,UAAU,CAAC,UAAU,CAAC,kBAAkB,CAAC,yCAAyC,WAAW,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,0DAA0D,qBAAqB,CAAC,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,CAAC,eAAe,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,cAAc,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,0IAA0I,wBAAwB,CAAC,mCAAmC,CAAC,oCAAoC,CAAC,4IAA4I,CAAC,+FAA+F,CAAC,4FAA4F,CAAC,2FAA2F,CAAC,0FAA0F,CAAC,6FAA6F,CAAC,sNAAsN,cAAc,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,sBAAsB,CAAC,eAAe,CAAC,gEAAgE,sBAAsB,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,2GAA2G,CAAC,8DAA8D,CAAC,2DAA2D,CAAC,0DAA0D,CAAC,yDAAyD,CAAC,4DAA4D,CAAC,iEAAiE,YAAY,CAAC,wBAAwB,CAAC,8GAA8G,CAAC,iEAAiE,CAAC,8DAA8D,CAAC,6DAA6D,CAAC,4DAA4D,CAAC,+DAA+D,CAAC,6BAA6B,CAAC,mDAAmD,aAAa,CAAC,uMAAuM,aAAa,CAAC,uCAAuC,UAAU,CAAC,iEAAiE,gCAAgC,CAAC,4UAA4U,qBAAqB,CAAC,oaAAoa,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,qDAAqD,0CAA0C,CAAC,sIAAsI,kBAAkB,CAAC,0BAA0B,iBAAiB,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,qCAAqC,8EAA8E,UAAU,CAAC,iBAAiB,CAAC,yCAAyC,eAAe,CAAC,CAAC,qCAAqC,8EAA8E,UAAU,CAAC,iBAAiB,CAAC,uCAAuC,eAAe,CAAC,CAAC,UAAU,6BAA6B,CAAC,8BAA8B,CAAC,mCAAmC,CAAC,4EAA4E,+BAA+B,CAAC,0FAA0F,YAAY,CAAC,4EAA4E,4BAA4B,CAAC,8LAA8L,4BAA4B,CAAC,yIAAyI,wBAAwB,CAAC,oGAAoG,4BAA4B,CAAC,8BAA8B,CAAC,4HAA4H,6BAA6B,CAAC,+GAA+G,yCAAyC,CAAC,0CAA0C,CAAC,8JAA8J,wBAAwB,CAAC,oCAAoC,CAAC,oPAAoP,qBAAqB,CAAC,0EAA0E,wBAAwB,CAAC,kBAAkB,CAAC,2EAA2E,kBAAkB",sourcesContent:[':root{--dt-row-selected: 13, 110, 253;--dt-row-selected-text: 255, 255, 255;--dt-row-selected-link: 9, 10, 11;--dt-row-stripe: 0, 0, 0;--dt-row-hover: 0, 0, 0;--dt-column-ordering: 0, 0, 0;--dt-html-background: white}:root.dark{--dt-html-background: rgb(33, 37, 41)}table.dataTable td.dt-control{text-align:center;cursor:pointer}table.dataTable td.dt-control:before{display:inline-block;color:rgba(0, 0, 0, 0.5);content:"►"}table.dataTable tr.dt-hasChild td.dt-control:before{content:"▼"}html.dark table.dataTable td.dt-control:before{color:rgba(255, 255, 255, 0.5)}html.dark table.dataTable tr.dt-hasChild td.dt-control:before{color:rgba(255, 255, 255, 0.5)}table.dataTable thead>tr>th.sorting,table.dataTable thead>tr>th.sorting_asc,table.dataTable thead>tr>th.sorting_desc,table.dataTable thead>tr>th.sorting_asc_disabled,table.dataTable thead>tr>th.sorting_desc_disabled,table.dataTable thead>tr>td.sorting,table.dataTable thead>tr>td.sorting_asc,table.dataTable thead>tr>td.sorting_desc,table.dataTable thead>tr>td.sorting_asc_disabled,table.dataTable thead>tr>td.sorting_desc_disabled{cursor:pointer;position:relative;padding-right:26px}table.dataTable thead>tr>th.sorting:before,table.dataTable thead>tr>th.sorting:after,table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_asc:after,table.dataTable thead>tr>th.sorting_desc:before,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>th.sorting_asc_disabled:after,table.dataTable thead>tr>th.sorting_desc_disabled:before,table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting:before,table.dataTable thead>tr>td.sorting:after,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_asc:after,table.dataTable thead>tr>td.sorting_desc:before,table.dataTable thead>tr>td.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_asc_disabled:after,table.dataTable thead>tr>td.sorting_desc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:after{position:absolute;display:block;opacity:.125;right:10px;line-height:9px;font-size:.8em}table.dataTable thead>tr>th.sorting:before,table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_desc:before,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>th.sorting_desc_disabled:before,table.dataTable thead>tr>td.sorting:before,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_desc:before,table.dataTable thead>tr>td.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:before{bottom:50%;content:"▲";content:"▲"/""}table.dataTable thead>tr>th.sorting:after,table.dataTable thead>tr>th.sorting_asc:after,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>th.sorting_asc_disabled:after,table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting:after,table.dataTable thead>tr>td.sorting_asc:after,table.dataTable thead>tr>td.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc_disabled:after,table.dataTable thead>tr>td.sorting_desc_disabled:after{top:50%;content:"▼";content:"▼"/""}table.dataTable thead>tr>th.sorting_asc:before,table.dataTable thead>tr>th.sorting_desc:after,table.dataTable thead>tr>td.sorting_asc:before,table.dataTable thead>tr>td.sorting_desc:after{opacity:.6}table.dataTable thead>tr>th.sorting_desc_disabled:after,table.dataTable thead>tr>th.sorting_asc_disabled:before,table.dataTable thead>tr>td.sorting_desc_disabled:after,table.dataTable thead>tr>td.sorting_asc_disabled:before{display:none}table.dataTable thead>tr>th:active,table.dataTable thead>tr>td:active{outline:none}div.dataTables_scrollBody>table.dataTable>thead>tr>th:before,div.dataTables_scrollBody>table.dataTable>thead>tr>th:after,div.dataTables_scrollBody>table.dataTable>thead>tr>td:before,div.dataTables_scrollBody>table.dataTable>thead>tr>td:after{display:none}div.dataTables_processing{position:absolute;top:50%;left:50%;width:200px;margin-left:-100px;margin-top:-26px;text-align:center;padding:2px}div.dataTables_processing>div:last-child{position:relative;width:80px;height:15px;margin:1em auto}div.dataTables_processing>div:last-child>div{position:absolute;top:0;width:13px;height:13px;border-radius:50%;background:#0d6efd;background:rgb(var(--dt-row-selected));animation-timing-function:cubic-bezier(0, 1, 1, 0)}div.dataTables_processing>div:last-child>div:nth-child(1){left:8px;animation:datatables-loader-1 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(2){left:8px;animation:datatables-loader-2 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(3){left:32px;animation:datatables-loader-2 .6s infinite}div.dataTables_processing>div:last-child>div:nth-child(4){left:56px;animation:datatables-loader-3 .6s infinite}@keyframes datatables-loader-1{0%{transform:scale(0)}100%{transform:scale(1)}}@keyframes datatables-loader-3{0%{transform:scale(1)}100%{transform:scale(0)}}@keyframes datatables-loader-2{0%{transform:translate(0, 0)}100%{transform:translate(24px, 0)}}table.dataTable.nowrap th,table.dataTable.nowrap td{white-space:nowrap}table.dataTable th.dt-left,table.dataTable td.dt-left{text-align:left}table.dataTable th.dt-center,table.dataTable td.dt-center,table.dataTable td.dataTables_empty{text-align:center}table.dataTable th.dt-right,table.dataTable td.dt-right{text-align:right}table.dataTable th.dt-justify,table.dataTable td.dt-justify{text-align:justify}table.dataTable th.dt-nowrap,table.dataTable td.dt-nowrap{white-space:nowrap}table.dataTable thead th,table.dataTable thead td,table.dataTable tfoot th,table.dataTable tfoot td{text-align:left}table.dataTable thead th.dt-head-left,table.dataTable thead td.dt-head-left,table.dataTable tfoot th.dt-head-left,table.dataTable tfoot td.dt-head-left{text-align:left}table.dataTable thead th.dt-head-center,table.dataTable thead td.dt-head-center,table.dataTable tfoot th.dt-head-center,table.dataTable tfoot td.dt-head-center{text-align:center}table.dataTable thead th.dt-head-right,table.dataTable thead td.dt-head-right,table.dataTable tfoot th.dt-head-right,table.dataTable tfoot td.dt-head-right{text-align:right}table.dataTable thead th.dt-head-justify,table.dataTable thead td.dt-head-justify,table.dataTable tfoot th.dt-head-justify,table.dataTable tfoot td.dt-head-justify{text-align:justify}table.dataTable thead th.dt-head-nowrap,table.dataTable thead td.dt-head-nowrap,table.dataTable tfoot th.dt-head-nowrap,table.dataTable tfoot td.dt-head-nowrap{white-space:nowrap}table.dataTable tbody th.dt-body-left,table.dataTable tbody td.dt-body-left{text-align:left}table.dataTable tbody th.dt-body-center,table.dataTable tbody td.dt-body-center{text-align:center}table.dataTable tbody th.dt-body-right,table.dataTable tbody td.dt-body-right{text-align:right}table.dataTable tbody th.dt-body-justify,table.dataTable tbody td.dt-body-justify{text-align:justify}table.dataTable tbody th.dt-body-nowrap,table.dataTable tbody td.dt-body-nowrap{white-space:nowrap}table.dataTable{width:100%;margin:0 auto;clear:both;border-collapse:separate;border-spacing:0}table.dataTable thead th,table.dataTable tfoot th{font-weight:bold}table.dataTable>thead>tr>th,table.dataTable>thead>tr>td{padding:10px;border-bottom:1px solid rgba(0, 0, 0, 0.3)}table.dataTable>thead>tr>th:active,table.dataTable>thead>tr>td:active{outline:none}table.dataTable>tfoot>tr>th,table.dataTable>tfoot>tr>td{padding:10px 10px 6px 10px;border-top:1px solid rgba(0, 0, 0, 0.3)}table.dataTable tbody tr{background-color:transparent}table.dataTable tbody tr.selected>*{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.9);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.9);color:white;color:rgb(var(--dt-row-selected-text))}table.dataTable tbody tr.selected a{color:#090a0b;color:rgb(var(--dt-row-selected-link))}table.dataTable tbody th,table.dataTable tbody td{padding:8px 10px}table.dataTable.row-border>tbody>tr>th,table.dataTable.row-border>tbody>tr>td,table.dataTable.display>tbody>tr>th,table.dataTable.display>tbody>tr>td{border-top:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.row-border>tbody>tr:first-child>th,table.dataTable.row-border>tbody>tr:first-child>td,table.dataTable.display>tbody>tr:first-child>th,table.dataTable.display>tbody>tr:first-child>td{border-top:none}table.dataTable.row-border>tbody>tr.selected+tr.selected>td,table.dataTable.display>tbody>tr.selected+tr.selected>td{border-top-color:#0262ef}table.dataTable.cell-border>tbody>tr>th,table.dataTable.cell-border>tbody>tr>td{border-top:1px solid rgba(0, 0, 0, 0.15);border-right:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.cell-border>tbody>tr>th:first-child,table.dataTable.cell-border>tbody>tr>td:first-child{border-left:1px solid rgba(0, 0, 0, 0.15)}table.dataTable.cell-border>tbody>tr:first-child>th,table.dataTable.cell-border>tbody>tr:first-child>td{border-top:none}table.dataTable.stripe>tbody>tr.odd>*,table.dataTable.display>tbody>tr.odd>*{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.023);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-stripe), 0.023)}table.dataTable.stripe>tbody>tr.odd.selected>*,table.dataTable.display>tbody>tr.odd.selected>*{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.923);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.923)}table.dataTable.hover>tbody>tr:hover>*,table.dataTable.display>tbody>tr:hover>*{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.035);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.035)}table.dataTable.hover>tbody>tr.selected:hover>*,table.dataTable.display>tbody>tr.selected:hover>*{box-shadow:inset 0 0 0 9999px #0d6efd !important;box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 1) !important}table.dataTable.order-column>tbody tr>.sorting_1,table.dataTable.order-column>tbody tr>.sorting_2,table.dataTable.order-column>tbody tr>.sorting_3,table.dataTable.display>tbody tr>.sorting_1,table.dataTable.display>tbody tr>.sorting_2,table.dataTable.display>tbody tr>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.019);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.019)}table.dataTable.order-column>tbody tr.selected>.sorting_1,table.dataTable.order-column>tbody tr.selected>.sorting_2,table.dataTable.order-column>tbody tr.selected>.sorting_3,table.dataTable.display>tbody tr.selected>.sorting_1,table.dataTable.display>tbody tr.selected>.sorting_2,table.dataTable.display>tbody tr.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.919);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.919)}table.dataTable.display>tbody>tr.odd>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.054);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.054)}table.dataTable.display>tbody>tr.odd>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.047);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.047)}table.dataTable.display>tbody>tr.odd>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.odd>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.039);box-shadow:inset 0 0 0 9999px rgba(var(--dt-column-ordering), 0.039)}table.dataTable.display>tbody>tr.odd.selected>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.954);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.954)}table.dataTable.display>tbody>tr.odd.selected>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.947);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.947)}table.dataTable.display>tbody>tr.odd.selected>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.odd.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.939);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.939)}table.dataTable.display>tbody>tr.even>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.019);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.019)}table.dataTable.display>tbody>tr.even>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.011);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.011)}table.dataTable.display>tbody>tr.even>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.even>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.003);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.003)}table.dataTable.display>tbody>tr.even.selected>.sorting_1,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.919);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.919)}table.dataTable.display>tbody>tr.even.selected>.sorting_2,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.911);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.911)}table.dataTable.display>tbody>tr.even.selected>.sorting_3,table.dataTable.order-column.stripe>tbody>tr.even.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.903);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.903)}table.dataTable.display tbody tr:hover>.sorting_1,table.dataTable.order-column.hover tbody tr:hover>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.082);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.082)}table.dataTable.display tbody tr:hover>.sorting_2,table.dataTable.order-column.hover tbody tr:hover>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.074);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.074)}table.dataTable.display tbody tr:hover>.sorting_3,table.dataTable.order-column.hover tbody tr:hover>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(0, 0, 0, 0.062);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-hover), 0.062)}table.dataTable.display tbody tr:hover.selected>.sorting_1,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_1{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.982);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.982)}table.dataTable.display tbody tr:hover.selected>.sorting_2,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_2{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.974);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.974)}table.dataTable.display tbody tr:hover.selected>.sorting_3,table.dataTable.order-column.hover tbody tr:hover.selected>.sorting_3{box-shadow:inset 0 0 0 9999px rgba(13, 110, 253, 0.962);box-shadow:inset 0 0 0 9999px rgba(var(--dt-row-selected), 0.962)}table.dataTable.no-footer{border-bottom:1px solid rgba(0, 0, 0, 0.3)}table.dataTable.compact thead th,table.dataTable.compact thead td,table.dataTable.compact tfoot th,table.dataTable.compact tfoot td,table.dataTable.compact tbody th,table.dataTable.compact tbody td{padding:4px}table.dataTable th,table.dataTable td{box-sizing:content-box}.dataTables_wrapper{position:relative;clear:both}.dataTables_wrapper .dataTables_length{float:left}.dataTables_wrapper .dataTables_length select{border:1px solid #aaa;border-radius:3px;padding:5px;background-color:transparent;color:inherit;padding:4px}.dataTables_wrapper .dataTables_filter{float:right;text-align:right}.dataTables_wrapper .dataTables_filter input{border:1px solid #aaa;border-radius:3px;padding:5px;background-color:transparent;color:inherit;margin-left:3px}.dataTables_wrapper .dataTables_info{clear:both;float:left;padding-top:.755em}.dataTables_wrapper .dataTables_paginate{float:right;text-align:right;padding-top:.25em}.dataTables_wrapper .dataTables_paginate .paginate_button{box-sizing:border-box;display:inline-block;min-width:1.5em;padding:.5em 1em;margin-left:2px;text-align:center;text-decoration:none !important;cursor:pointer;color:inherit !important;border:1px solid transparent;border-radius:2px;background:transparent}.dataTables_wrapper .dataTables_paginate .paginate_button.current,.dataTables_wrapper .dataTables_paginate .paginate_button.current:hover{color:inherit !important;border:1px solid rgba(0, 0, 0, 0.3);background-color:rgba(0, 0, 0, 0.05);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(230, 230, 230, 0.05)), color-stop(100%, rgba(0, 0, 0, 0.05)));background:-webkit-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-moz-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-ms-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:-o-linear-gradient(top, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%);background:linear-gradient(to bottom, rgba(230, 230, 230, 0.05) 0%, rgba(0, 0, 0, 0.05) 100%)}.dataTables_wrapper .dataTables_paginate .paginate_button.disabled,.dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover,.dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active{cursor:default;color:#666 !important;border:1px solid transparent;background:transparent;box-shadow:none}.dataTables_wrapper .dataTables_paginate .paginate_button:hover{color:white !important;border:1px solid #111;background-color:#111;background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, #585858), color-stop(100%, #111));background:-webkit-linear-gradient(top, #585858 0%, #111 100%);background:-moz-linear-gradient(top, #585858 0%, #111 100%);background:-ms-linear-gradient(top, #585858 0%, #111 100%);background:-o-linear-gradient(top, #585858 0%, #111 100%);background:linear-gradient(to bottom, #585858 0%, #111 100%)}.dataTables_wrapper .dataTables_paginate .paginate_button:active{outline:none;background-color:#0c0c0c;background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, #2b2b2b), color-stop(100%, #0c0c0c));background:-webkit-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-moz-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-ms-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:-o-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%);background:linear-gradient(to bottom, #2b2b2b 0%, #0c0c0c 100%);box-shadow:inset 0 0 3px #111}.dataTables_wrapper .dataTables_paginate .ellipsis{padding:0 1em}.dataTables_wrapper .dataTables_length,.dataTables_wrapper .dataTables_filter,.dataTables_wrapper .dataTables_info,.dataTables_wrapper .dataTables_processing,.dataTables_wrapper .dataTables_paginate{color:inherit}.dataTables_wrapper .dataTables_scroll{clear:both}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody{-webkit-overflow-scrolling:touch}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>th,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>td,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>th,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>td{vertical-align:middle}.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>th>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>thead>tr>td>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>th>div.dataTables_sizing,.dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody>table>tbody>tr>td>div.dataTables_sizing{height:0;overflow:hidden;margin:0 !important;padding:0 !important}.dataTables_wrapper.no-footer .dataTables_scrollBody{border-bottom:1px solid rgba(0, 0, 0, 0.3)}.dataTables_wrapper.no-footer div.dataTables_scrollHead table.dataTable,.dataTables_wrapper.no-footer div.dataTables_scrollBody>table{border-bottom:none}.dataTables_wrapper:after{visibility:hidden;display:block;content:"";clear:both;height:0}@media screen and (max-width: 767px){.dataTables_wrapper .dataTables_info,.dataTables_wrapper .dataTables_paginate{float:none;text-align:center}.dataTables_wrapper .dataTables_paginate{margin-top:.5em}}@media screen and (max-width: 640px){.dataTables_wrapper .dataTables_length,.dataTables_wrapper .dataTables_filter{float:none;text-align:center}.dataTables_wrapper .dataTables_filter{margin-top:.5em}}html.dark{--dt-row-hover: 255, 255, 255;--dt-row-stripe: 255, 255, 255;--dt-column-ordering: 255, 255, 255}html.dark table.dataTable>thead>tr>th,html.dark table.dataTable>thead>tr>td{border-bottom:1px solid #595b5e}html.dark table.dataTable>thead>tr>th:active,html.dark table.dataTable>thead>tr>td:active{outline:none}html.dark table.dataTable>tfoot>tr>th,html.dark table.dataTable>tfoot>tr>td{border-top:1px solid #595b5e}html.dark table.dataTable.row-border>tbody>tr>th,html.dark table.dataTable.row-border>tbody>tr>td,html.dark table.dataTable.display>tbody>tr>th,html.dark table.dataTable.display>tbody>tr>td{border-top:1px solid #404346}html.dark table.dataTable.row-border>tbody>tr.selected+tr.selected>td,html.dark table.dataTable.display>tbody>tr.selected+tr.selected>td{border-top-color:#0257d5}html.dark table.dataTable.cell-border>tbody>tr>th,html.dark table.dataTable.cell-border>tbody>tr>td{border-top:1px solid #404346;border-right:1px solid #404346}html.dark table.dataTable.cell-border>tbody>tr>th:first-child,html.dark table.dataTable.cell-border>tbody>tr>td:first-child{border-left:1px solid #404346}html.dark .dataTables_wrapper .dataTables_filter input,html.dark .dataTables_wrapper .dataTables_length select{border:1px solid rgba(255, 255, 255, 0.2);background-color:var(--dt-html-background)}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.current,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover{border:1px solid #595b5e;background:rgba(255, 255, 255, 0.15)}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover,html.dark .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active{color:#666 !important}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button:hover{border:1px solid #353535;background:#353535}html.dark .dataTables_wrapper .dataTables_paginate .paginate_button:active{background:#3a3a3a}\n'],sourceRoot:""}]),t.Z=o},130:function(e,t,n){"use strict";var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,".Navbar {\r\n    background-color: rgb(25, 135, 84);\r\n    height: 50px;\r\n    width: 100%;\r\n    box-shadow: 0px 0px 1px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.Navbar .logout {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    padding-right: 10px;\r\n}\r\n\r\n.Navbar .user {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    padding-left: 10px;\r\n}\r\n\r\n.Navbar .user span {\r\n    font-family: OpenSans-Bold;\r\n    color: white;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    max-height: 50px;\r\n    min-width: max-content;\r\n}\r\n\r\n.Navbar .user img {\r\n    height: 80%;\r\n    width: auto;\r\n    border-radius: 50%;\r\n    aspect-ratio: 1;\r\n    object-fit: cover;\r\n    box-shadow: 0px 0px 0px 2.5px white;\r\n}\r\n\r\n@media only screen and (max-width: 300px) {\r\n    .Navbar .user span {\r\n        display: none;\r\n    }\r\n\r\n    .Navbar .user {\r\n        justify-content: center;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/Navbar.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,mCAAmC;AACvC;;AAEA;IACI;QACI,aAAa;IACjB;;IAEA;QACI,uBAAuB;IAC3B;AACJ",sourcesContent:[".Navbar {\r\n    background-color: rgb(25, 135, 84);\r\n    height: 50px;\r\n    width: 100%;\r\n    box-shadow: 0px 0px 1px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.Navbar .logout {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    padding-right: 10px;\r\n}\r\n\r\n.Navbar .user {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    padding-left: 10px;\r\n}\r\n\r\n.Navbar .user span {\r\n    font-family: OpenSans-Bold;\r\n    color: white;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    max-height: 50px;\r\n    min-width: max-content;\r\n}\r\n\r\n.Navbar .user img {\r\n    height: 80%;\r\n    width: auto;\r\n    border-radius: 50%;\r\n    aspect-ratio: 1;\r\n    object-fit: cover;\r\n    box-shadow: 0px 0px 0px 2.5px white;\r\n}\r\n\r\n@media only screen and (max-width: 300px) {\r\n    .Navbar .user span {\r\n        display: none;\r\n    }\r\n\r\n    .Navbar .user {\r\n        justify-content: center;\r\n    }\r\n}"],sourceRoot:""}]),t.Z=o},424:function(e,t,n){"use strict";var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,"body {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\n#popUpAlert {\r\n  position: fixed;\r\n  top: 90px;\r\n  right: 10px;\r\n  max-width: 90vw;\r\n  z-index: 1055;\r\n\r\n}\r\n\r\n.mainContent {\r\n  height: 100vh;\r\n  background-color: #f0f0f0;\r\n  padding-top: 20px;\r\n  overflow: auto;\r\n  width: 100%;\r\n}\r\n\r\n.mainContent.withNavbar {\r\n  height: calc(100vh - 50px);\r\n}\r\n\r\n.mainContentBlock table {\r\n  box-shadow: 0 0 1px 0;\r\n}\r\n\r\n.mainContentBlock table thead tr th {\r\n  font-size: 14px;\r\n  padding-top: 4px !important;\r\n  padding-bottom: 4px !important;\r\n}\r\n\r\n.mainContentBlock table tbody tr td {\r\n  font-size: 14px;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.mainContentBlock table tbody tr td div {\r\n  display: inline;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n}\r\n\r\n.mainContentBlock table tbody tr td div:last-child {\r\n  margin-left: 30px;\r\n}\r\n\r\n.mainContentBlock table tbody tr:hover td {\r\n  background-color: lightgray;\r\n}\r\n\r\n.mainContent .floatPanel {\r\n  z-index: 1;\r\n  position: fixed;\r\n  width: 100vw;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100vh;\r\n  background-color: (0, 0, 0, 0.9);\r\n}\r\n\r\n.floatPanel {\r\n  z-index: 2;\r\n  position: absolute;\r\n  width: 100vw;\r\n  top: 50px;\r\n  height: calc(100vh - 50px);\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.floatPanel .mainContentBlock {\r\n  max-height: calc(100vh - 90px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.floatPanel .mainContentBlock table td input[type='checkbox'] {\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n.mainContentBlock {\r\n  width: calc(100% - 50px);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 0 1px black;\r\n  padding: 10px 20px;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb;;AAEA;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,eAAe;EACf,aAAa;;AAEf;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,iBAAiB;EACjB,cAAc;EACd,WAAW;AACb;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,2BAA2B;EAC3B,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,UAAU;EACV,eAAe;EACf,YAAY;EACZ,MAAM;EACN,QAAQ;EACR,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,UAAU;EACV,kBAAkB;EAClB,YAAY;EACZ,SAAS;EACT,0BAA0B;EAC1B,oCAAoC;EACpC,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,wBAAwB;EACxB,iBAAiB;EACjB,kBAAkB;EAClB,cAAc;EACd,uBAAuB;EACvB,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;AACpB",sourcesContent:["body {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\n#popUpAlert {\r\n  position: fixed;\r\n  top: 90px;\r\n  right: 10px;\r\n  max-width: 90vw;\r\n  z-index: 1055;\r\n\r\n}\r\n\r\n.mainContent {\r\n  height: 100vh;\r\n  background-color: #f0f0f0;\r\n  padding-top: 20px;\r\n  overflow: auto;\r\n  width: 100%;\r\n}\r\n\r\n.mainContent.withNavbar {\r\n  height: calc(100vh - 50px);\r\n}\r\n\r\n.mainContentBlock table {\r\n  box-shadow: 0 0 1px 0;\r\n}\r\n\r\n.mainContentBlock table thead tr th {\r\n  font-size: 14px;\r\n  padding-top: 4px !important;\r\n  padding-bottom: 4px !important;\r\n}\r\n\r\n.mainContentBlock table tbody tr td {\r\n  font-size: 14px;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.mainContentBlock table tbody tr td div {\r\n  display: inline;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n}\r\n\r\n.mainContentBlock table tbody tr td div:last-child {\r\n  margin-left: 30px;\r\n}\r\n\r\n.mainContentBlock table tbody tr:hover td {\r\n  background-color: lightgray;\r\n}\r\n\r\n.mainContent .floatPanel {\r\n  z-index: 1;\r\n  position: fixed;\r\n  width: 100vw;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100vh;\r\n  background-color: (0, 0, 0, 0.9);\r\n}\r\n\r\n.floatPanel {\r\n  z-index: 2;\r\n  position: absolute;\r\n  width: 100vw;\r\n  top: 50px;\r\n  height: calc(100vh - 50px);\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.floatPanel .mainContentBlock {\r\n  max-height: calc(100vh - 90px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.floatPanel .mainContentBlock table td input[type='checkbox'] {\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n.mainContentBlock {\r\n  width: calc(100% - 50px);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 0 1px black;\r\n  padding: 10px 20px;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n}"],sourceRoot:""}]),t.Z=o},645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);i&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},704:function(e,t,n){var i,r,a;!function(o){"use strict";r=[n(755)],i=function(e){e.ui=e.ui||{},e.ui.version="1.13.2";var t,n=0,i=Array.prototype.hasOwnProperty,r=Array.prototype.slice;e.cleanData=(t=e.cleanData,function(n){var i,r,a;for(a=0;null!=(r=n[a]);a++)(i=e._data(r,"events"))&&i.remove&&e(r).triggerHandler("remove");t(n)}),e.widget=function(t,n,i){var r,a,o,s={},l=t.split(".")[0],u=l+"-"+(t=t.split(".")[1]);return i||(i=n,n=e.Widget),Array.isArray(i)&&(i=e.extend.apply(null,[{}].concat(i))),e.expr.pseudos[u.toLowerCase()]=function(t){return!!e.data(t,u)},e[l]=e[l]||{},r=e[l][t],a=e[l][t]=function(e,t){if(!this||!this._createWidget)return new a(e,t);arguments.length&&this._createWidget(e,t)},e.extend(a,r,{version:i.version,_proto:e.extend({},i),_childConstructors:[]}),(o=new n).options=e.widget.extend({},o.options),e.each(i,(function(e,t){s[e]="function"==typeof t?function(){function i(){return n.prototype[e].apply(this,arguments)}function r(t){return n.prototype[e].apply(this,t)}return function(){var e,n=this._super,a=this._superApply;return this._super=i,this._superApply=r,e=t.apply(this,arguments),this._super=n,this._superApply=a,e}}():t})),a.prototype=e.widget.extend(o,{widgetEventPrefix:r&&o.widgetEventPrefix||t},s,{constructor:a,namespace:l,widgetName:t,widgetFullName:u}),r?(e.each(r._childConstructors,(function(t,n){var i=n.prototype;e.widget(i.namespace+"."+i.widgetName,a,n._proto)})),delete r._childConstructors):n._childConstructors.push(a),e.widget.bridge(t,a),a},e.widget.extend=function(t){for(var n,a,o=r.call(arguments,1),s=0,l=o.length;s<l;s++)for(n in o[s])a=o[s][n],i.call(o[s],n)&&void 0!==a&&(e.isPlainObject(a)?t[n]=e.isPlainObject(t[n])?e.widget.extend({},t[n],a):e.widget.extend({},a):t[n]=a);return t},e.widget.bridge=function(t,n){var i=n.prototype.widgetFullName||t;e.fn[t]=function(a){var o="string"==typeof a,s=r.call(arguments,1),l=this;return o?this.length||"instance"!==a?this.each((function(){var n,r=e.data(this,i);return"instance"===a?(l=r,!1):r?"function"!=typeof r[a]||"_"===a.charAt(0)?e.error("no such method '"+a+"' for "+t+" widget instance"):(n=r[a].apply(r,s))!==r&&void 0!==n?(l=n&&n.jquery?l.pushStack(n.get()):n,!1):void 0:e.error("cannot call methods on "+t+" prior to initialization; attempted to call method '"+a+"'")})):l=void 0:(s.length&&(a=e.widget.extend.apply(null,[a].concat(s))),this.each((function(){var t=e.data(this,i);t?(t.option(a||{}),t._init&&t._init()):e.data(this,i,new n(a,this))}))),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),this.classesElementLookup={},i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){var t=this;this._destroy(),e.each(this.classesElementLookup,(function(e,n){t._removeClass(n,e)})),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:e.noop,widget:function(){return this.element},option:function(t,n){var i,r,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},i=t.split("."),t=i.shift(),i.length){for(r=o[t]=e.widget.extend({},this.options[t]),a=0;a<i.length-1;a++)r[i[a]]=r[i[a]]||{},r=r[i[a]];if(t=i.pop(),1===arguments.length)return void 0===r[t]?null:r[t];r[t]=n}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=n}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(t){var n,i,r;for(n in t)r=this.classesElementLookup[n],t[n]!==this.options.classes[n]&&r&&r.length&&(i=e(r.get()),this._removeClass(r,n),i.addClass(this._classes({element:i,keys:n,classes:t,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(t){var n=[],i=this;function r(){var n=[];t.element.each((function(t,r){e.map(i.classesElementLookup,(function(e){return e})).some((function(e){return e.is(r)}))||n.push(r)})),i._on(e(n),{remove:"_untrackClassesElement"})}function a(a,o){var s,l;for(l=0;l<a.length;l++)s=i.classesElementLookup[a[l]]||e(),t.add?(r(),s=e(e.uniqueSort(s.get().concat(t.element.get())))):s=e(s.not(t.element).get()),i.classesElementLookup[a[l]]=s,n.push(a[l]),o&&t.classes[a[l]]&&n.push(t.classes[a[l]])}return(t=e.extend({element:this.element,classes:this.options.classes||{}},t)).keys&&a(t.keys.match(/\S+/g)||[],!0),t.extra&&a(t.extra.match(/\S+/g)||[]),n.join(" ")},_untrackClassesElement:function(t){var n=this;e.each(n.classesElementLookup,(function(i,r){-1!==e.inArray(t.target,r)&&(n.classesElementLookup[i]=e(r.not(t.target).get()))})),this._off(e(t.target))},_removeClass:function(e,t,n){return this._toggleClass(e,t,n,!1)},_addClass:function(e,t,n){return this._toggleClass(e,t,n,!0)},_toggleClass:function(e,t,n,i){i="boolean"==typeof i?i:n;var r="string"==typeof e||null===e,a={extra:r?t:n,keys:r?e:t,element:r?this.element:e,add:i};return a.element.toggleClass(this._classes(a),i),this},_on:function(t,n,i){var r,a=this;"boolean"!=typeof t&&(i=n,n=t,t=!1),i?(n=r=e(n),this.bindings=this.bindings.add(n)):(i=n,n=this.element,r=this.widget()),e.each(i,(function(i,o){function s(){if(t||!0!==a.options.disabled&&!e(this).hasClass("ui-state-disabled"))return("string"==typeof o?a[o]:o).apply(a,arguments)}"string"!=typeof o&&(s.guid=o.guid=o.guid||s.guid||e.guid++);var l=i.match(/^([\w:-]*)\s*(.*)$/),u=l[1]+a.eventNamespace,c=l[2];c?r.on(u,c,s):n.on(u,s)}))},_off:function(t,n){n=(n||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.off(n),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){var n=this;return setTimeout((function(){return("string"==typeof e?n[e]:e).apply(n,arguments)}),t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){this._addClass(e(t.currentTarget),null,"ui-state-hover")},mouseleave:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){this._addClass(e(t.currentTarget),null,"ui-state-focus")},focusout:function(t){this._removeClass(e(t.currentTarget),null,"ui-state-focus")}})},_trigger:function(t,n,i){var r,a,o=this.options[t];if(i=i||{},(n=e.Event(n)).type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],a=n.originalEvent)for(r in a)r in n||(n[r]=a[r]);return this.element.trigger(n,i),!("function"==typeof o&&!1===o.apply(this.element[0],[n].concat(i))||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},(function(t,n){e.Widget.prototype["_"+t]=function(i,r,a){var o;"string"==typeof r&&(r={effect:r});var s=r?!0===r||"number"==typeof r?n:r.effect||n:t;"number"==typeof(r=r||{})?r={duration:r}:!0===r&&(r={}),o=!e.isEmptyObject(r),r.complete=a,r.delay&&i.delay(r.delay),o&&e.effects&&e.effects.effect[s]?i[t](r):s!==t&&i[s]?i[s](r.duration,r.easing,a):i.queue((function(n){e(this)[t](),a&&a.call(i[0]),n()}))}})),e.widget,function(){var t,n=Math.max,i=Math.abs,r=/left|center|right/,a=/top|center|bottom/,o=/[\+\-]\d+(\.[\d]+)?%?/,s=/^\w+/,l=/%$/,u=e.fn.position;function c(e,t,n){return[parseFloat(e[0])*(l.test(e[0])?t/100:1),parseFloat(e[1])*(l.test(e[1])?n/100:1)]}function d(t,n){return parseInt(e.css(t,n),10)||0}function h(e){return null!=e&&e===e.window}e.position={scrollbarWidth:function(){if(void 0!==t)return t;var n,i,r=e("<div style='display:block;position:absolute;width:200px;height:200px;overflow:hidden;'><div style='height:300px;width:auto;'></div></div>"),a=r.children()[0];return e("body").append(r),n=a.offsetWidth,r.css("overflow","scroll"),n===(i=a.offsetWidth)&&(i=r[0].clientWidth),r.remove(),t=n-i},getScrollInfo:function(t){var n=t.isWindow||t.isDocument?"":t.element.css("overflow-x"),i=t.isWindow||t.isDocument?"":t.element.css("overflow-y"),r="scroll"===n||"auto"===n&&t.width<t.element[0].scrollWidth;return{width:"scroll"===i||"auto"===i&&t.height<t.element[0].scrollHeight?e.position.scrollbarWidth():0,height:r?e.position.scrollbarWidth():0}},getWithinInfo:function(t){var n=e(t||window),i=h(n[0]),r=!!n[0]&&9===n[0].nodeType;return{element:n,isWindow:i,isDocument:r,offset:i||r?{left:0,top:0}:e(t).offset(),scrollLeft:n.scrollLeft(),scrollTop:n.scrollTop(),width:n.outerWidth(),height:n.outerHeight()}}},e.fn.position=function(t){if(!t||!t.of)return u.apply(this,arguments);var l,p,f,g,m,b,v,y,_="string"==typeof(t=e.extend({},t)).of?e(document).find(t.of):e(t.of),w=e.position.getWithinInfo(t.within),A=e.position.getScrollInfo(w),x=(t.collision||"flip").split(" "),C={};return b=9===(y=(v=_)[0]).nodeType?{width:v.width(),height:v.height(),offset:{top:0,left:0}}:h(y)?{width:v.width(),height:v.height(),offset:{top:v.scrollTop(),left:v.scrollLeft()}}:y.preventDefault?{width:0,height:0,offset:{top:y.pageY,left:y.pageX}}:{width:v.outerWidth(),height:v.outerHeight(),offset:v.offset()},_[0].preventDefault&&(t.at="left top"),p=b.width,f=b.height,g=b.offset,m=e.extend({},g),e.each(["my","at"],(function(){var e,n,i=(t[this]||"").split(" ");1===i.length&&(i=r.test(i[0])?i.concat(["center"]):a.test(i[0])?["center"].concat(i):["center","center"]),i[0]=r.test(i[0])?i[0]:"center",i[1]=a.test(i[1])?i[1]:"center",e=o.exec(i[0]),n=o.exec(i[1]),C[this]=[e?e[0]:0,n?n[0]:0],t[this]=[s.exec(i[0])[0],s.exec(i[1])[0]]})),1===x.length&&(x[1]=x[0]),"right"===t.at[0]?m.left+=p:"center"===t.at[0]&&(m.left+=p/2),"bottom"===t.at[1]?m.top+=f:"center"===t.at[1]&&(m.top+=f/2),l=c(C.at,p,f),m.left+=l[0],m.top+=l[1],this.each((function(){var r,a,o=e(this),s=o.outerWidth(),u=o.outerHeight(),h=d(this,"marginLeft"),b=d(this,"marginTop"),v=s+h+d(this,"marginRight")+A.width,y=u+b+d(this,"marginBottom")+A.height,k=e.extend({},m),T=c(C.my,o.outerWidth(),o.outerHeight());"right"===t.my[0]?k.left-=s:"center"===t.my[0]&&(k.left-=s/2),"bottom"===t.my[1]?k.top-=u:"center"===t.my[1]&&(k.top-=u/2),k.left+=T[0],k.top+=T[1],r={marginLeft:h,marginTop:b},e.each(["left","top"],(function(n,i){e.ui.position[x[n]]&&e.ui.position[x[n]][i](k,{targetWidth:p,targetHeight:f,elemWidth:s,elemHeight:u,collisionPosition:r,collisionWidth:v,collisionHeight:y,offset:[l[0]+T[0],l[1]+T[1]],my:t.my,at:t.at,within:w,elem:o})})),t.using&&(a=function(e){var r=g.left-k.left,a=r+p-s,l=g.top-k.top,c=l+f-u,d={target:{element:_,left:g.left,top:g.top,width:p,height:f},element:{element:o,left:k.left,top:k.top,width:s,height:u},horizontal:a<0?"left":r>0?"right":"center",vertical:c<0?"top":l>0?"bottom":"middle"};p<s&&i(r+a)<p&&(d.horizontal="center"),f<u&&i(l+c)<f&&(d.vertical="middle"),n(i(r),i(a))>n(i(l),i(c))?d.important="horizontal":d.important="vertical",t.using.call(this,e,d)}),o.offset(e.extend(k,{using:a}))}))},e.ui.position={fit:{left:function(e,t){var i,r=t.within,a=r.isWindow?r.scrollLeft:r.offset.left,o=r.width,s=e.left-t.collisionPosition.marginLeft,l=a-s,u=s+t.collisionWidth-o-a;t.collisionWidth>o?l>0&&u<=0?(i=e.left+l+t.collisionWidth-o-a,e.left+=l-i):e.left=u>0&&l<=0?a:l>u?a+o-t.collisionWidth:a:l>0?e.left+=l:u>0?e.left-=u:e.left=n(e.left-s,e.left)},top:function(e,t){var i,r=t.within,a=r.isWindow?r.scrollTop:r.offset.top,o=t.within.height,s=e.top-t.collisionPosition.marginTop,l=a-s,u=s+t.collisionHeight-o-a;t.collisionHeight>o?l>0&&u<=0?(i=e.top+l+t.collisionHeight-o-a,e.top+=l-i):e.top=u>0&&l<=0?a:l>u?a+o-t.collisionHeight:a:l>0?e.top+=l:u>0?e.top-=u:e.top=n(e.top-s,e.top)}},flip:{left:function(e,t){var n,r,a=t.within,o=a.offset.left+a.scrollLeft,s=a.width,l=a.isWindow?a.scrollLeft:a.offset.left,u=e.left-t.collisionPosition.marginLeft,c=u-l,d=u+t.collisionWidth-s-l,h="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,p="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,f=-2*t.offset[0];c<0?((n=e.left+h+p+f+t.collisionWidth-s-o)<0||n<i(c))&&(e.left+=h+p+f):d>0&&((r=e.left-t.collisionPosition.marginLeft+h+p+f-l)>0||i(r)<d)&&(e.left+=h+p+f)},top:function(e,t){var n,r,a=t.within,o=a.offset.top+a.scrollTop,s=a.height,l=a.isWindow?a.scrollTop:a.offset.top,u=e.top-t.collisionPosition.marginTop,c=u-l,d=u+t.collisionHeight-s-l,h="top"===t.my[1]?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,p="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,f=-2*t.offset[1];c<0?((r=e.top+h+p+f+t.collisionHeight-s-o)<0||r<i(c))&&(e.top+=h+p+f):d>0&&((n=e.top-t.collisionPosition.marginTop+h+p+f-l)>0||i(n)<d)&&(e.top+=h+p+f)}},flipfit:{left:function(){e.ui.position.flip.left.apply(this,arguments),e.ui.position.fit.left.apply(this,arguments)},top:function(){e.ui.position.flip.top.apply(this,arguments),e.ui.position.fit.top.apply(this,arguments)}}}}(),e.ui.position,e.extend(e.expr.pseudos,{data:e.expr.createPseudo?e.expr.createPseudo((function(t){return function(n){return!!e.data(n,t)}})):function(t,n,i){return!!e.data(t,i[3])}}),e.fn.extend({disableSelection:(o="onselectstart"in document.createElement("div")?"selectstart":"mousedown",function(){return this.on(o+".ui-disableSelection",(function(e){e.preventDefault()}))}),enableSelection:function(){return this.off(".ui-disableSelection")}});var a,o,s=e,l={},u=l.toString,c=/^([\-+])=\s*(\d+\.?\d*)/,d=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16),e[4]?(parseInt(e[4],16)/255).toFixed(2):1]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16),e[4]?(parseInt(e[4]+e[4],16)/255).toFixed(2):1]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],h=s.Color=function(e,t,n,i){return new s.Color.fn.parse(e,t,n,i)},p={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},f={byte:{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},g=h.support={},m=s("<p>")[0],b=s.each;function v(e){return null==e?e+"":"object"==typeof e?l[u.call(e)]||"object":typeof e}function y(e,t,n){var i=f[t.type]||{};return null==e?n||!t.def?null:t.def:(e=i.floor?~~e:parseFloat(e),isNaN(e)?t.def:i.mod?(e+i.mod)%i.mod:Math.min(i.max,Math.max(0,e)))}function _(e){var t=h(),n=t._rgba=[];return e=e.toLowerCase(),b(d,(function(i,r){var a,o=r.re.exec(e),s=o&&r.parse(o),l=r.space||"rgba";if(s)return a=t[l](s),t[p[l].cache]=a[p[l].cache],n=t._rgba=a._rgba,!1})),n.length?("0,0,0,0"===n.join()&&s.extend(n,a.transparent),t):a[e]}function w(e,t,n){return 6*(n=(n+1)%1)<1?e+(t-e)*n*6:2*n<1?t:3*n<2?e+(t-e)*(2/3-n)*6:e}m.style.cssText="background-color:rgba(1,1,1,.5)",g.rgba=m.style.backgroundColor.indexOf("rgba")>-1,b(p,(function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}})),s.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){l["[object "+t+"]"]=t.toLowerCase()})),h.fn=s.extend(h.prototype,{parse:function(e,t,n,i){if(void 0===e)return this._rgba=[null,null,null,null],this;(e.jquery||e.nodeType)&&(e=s(e).css(t),t=void 0);var r=this,o=v(e),l=this._rgba=[];return void 0!==t&&(e=[e,t,n,i],o="array"),"string"===o?this.parse(_(e)||a._default):"array"===o?(b(p.rgba.props,(function(t,n){l[n.idx]=y(e[n.idx],n)})),this):"object"===o?(b(p,e instanceof h?function(t,n){e[n.cache]&&(r[n.cache]=e[n.cache].slice())}:function(t,n){var i=n.cache;b(n.props,(function(t,a){if(!r[i]&&n.to){if("alpha"===t||null==e[t])return;r[i]=n.to(r._rgba)}r[i][a.idx]=y(e[t],a,!0)})),r[i]&&s.inArray(null,r[i].slice(0,3))<0&&(null==r[i][3]&&(r[i][3]=1),n.from&&(r._rgba=n.from(r[i])))}),this):void 0},is:function(e){var t=h(e),n=!0,i=this;return b(p,(function(e,r){var a,o=t[r.cache];return o&&(a=i[r.cache]||r.to&&r.to(i._rgba)||[],b(r.props,(function(e,t){if(null!=o[t.idx])return n=o[t.idx]===a[t.idx]}))),n})),n},_space:function(){var e=[],t=this;return b(p,(function(n,i){t[i.cache]&&e.push(n)})),e.pop()},transition:function(e,t){var n=h(e),i=n._space(),r=p[i],a=0===this.alpha()?h("transparent"):this,o=a[r.cache]||r.to(a._rgba),s=o.slice();return n=n[r.cache],b(r.props,(function(e,i){var r=i.idx,a=o[r],l=n[r],u=f[i.type]||{};null!==l&&(null===a?s[r]=l:(u.mod&&(l-a>u.mod/2?a+=u.mod:a-l>u.mod/2&&(a-=u.mod)),s[r]=y((l-a)*t+a,i)))})),this[i](s)},blend:function(e){if(1===this._rgba[3])return this;var t=this._rgba.slice(),n=t.pop(),i=h(e)._rgba;return h(s.map(t,(function(e,t){return(1-n)*i[t]+n*e})))},toRgbaString:function(){var e="rgba(",t=s.map(this._rgba,(function(e,t){return null!=e?e:t>2?1:0}));return 1===t[3]&&(t.pop(),e="rgb("),e+t.join()+")"},toHslaString:function(){var e="hsla(",t=s.map(this.hsla(),(function(e,t){return null==e&&(e=t>2?1:0),t&&t<3&&(e=Math.round(100*e)+"%"),e}));return 1===t[3]&&(t.pop(),e="hsl("),e+t.join()+")"},toHexString:function(e){var t=this._rgba.slice(),n=t.pop();return e&&t.push(~~(255*n)),"#"+s.map(t,(function(e){return 1===(e=(e||0).toString(16)).length?"0"+e:e})).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),h.fn.parse.prototype=h.fn,p.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,n,i=e[0]/255,r=e[1]/255,a=e[2]/255,o=e[3],s=Math.max(i,r,a),l=Math.min(i,r,a),u=s-l,c=s+l,d=.5*c;return t=l===s?0:i===s?60*(r-a)/u+360:r===s?60*(a-i)/u+120:60*(i-r)/u+240,n=0===u?0:d<=.5?u/c:u/(2-c),[Math.round(t)%360,n,d,null==o?1:o]},p.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,n=e[1],i=e[2],r=e[3],a=i<=.5?i*(1+n):i+n-i*n,o=2*i-a;return[Math.round(255*w(o,a,t+1/3)),Math.round(255*w(o,a,t)),Math.round(255*w(o,a,t-1/3)),r]},b(p,(function(e,t){var n=t.props,i=t.cache,r=t.to,a=t.from;h.fn[e]=function(e){if(r&&!this[i]&&(this[i]=r(this._rgba)),void 0===e)return this[i].slice();var t,o=v(e),s="array"===o||"object"===o?e:arguments,l=this[i].slice();return b(n,(function(e,t){var n=s["object"===o?e:t.idx];null==n&&(n=l[t.idx]),l[t.idx]=y(n,t)})),a?((t=h(a(l)))[i]=l,t):h(l)},b(n,(function(t,n){h.fn[t]||(h.fn[t]=function(i){var r,a,o,s,l=v(i);return a=(r=this[s="alpha"===t?this._hsla?"hsla":"rgba":e]())[n.idx],"undefined"===l?a:("function"===l&&(l=v(i=i.call(this,a))),null==i&&n.empty?this:("string"===l&&(o=c.exec(i))&&(i=a+parseFloat(o[2])*("+"===o[1]?1:-1)),r[n.idx]=i,this[s](r)))})}))})),h.hook=function(e){var t=e.split(" ");b(t,(function(e,t){s.cssHooks[t]={set:function(e,n){var i,r,a="";if("transparent"!==n&&("string"!==v(n)||(i=_(n)))){if(n=h(i||n),!g.rgba&&1!==n._rgba[3]){for(r="backgroundColor"===t?e.parentNode:e;(""===a||"transparent"===a)&&r&&r.style;)try{a=s.css(r,"backgroundColor"),r=r.parentNode}catch(e){}n=n.blend(a&&"transparent"!==a?a:"_default")}n=n.toRgbaString()}try{e.style[t]=n}catch(e){}}},s.fx.step[t]=function(e){e.colorInit||(e.start=h(e.elem,t),e.end=h(e.end),e.colorInit=!0),s.cssHooks[t].set(e.elem,e.start.transition(e.end,e.pos))}}))},h.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"),s.cssHooks.borderColor={expand:function(e){var t={};return b(["Top","Right","Bottom","Left"],(function(n,i){t["border"+i+"Color"]=e})),t}},a=s.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"};var A,x,C="ui-effects-",k="ui-effects-style",T="ui-effects-animated";if(e.effects={effect:{}},function(){var t=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};function i(e){var t,n,i,r=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,a={};if(r&&r.length&&r[0]&&r[r[0]])for(n=r.length;n--;)"string"==typeof r[t=r[n]]&&(a[(i=t,i.replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()})))]=r[t]);else for(t in r)"string"==typeof r[t]&&(a[t]=r[t]);return a}e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],(function(t,n){e.fx.step[n]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(s.style(e.elem,n,e.end),e.setAttr=!0)}})),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e.effects.animateClass=function(r,a,o,s){var l=e.speed(a,o,s);return this.queue((function(){var a,o=e(this),s=o.attr("class")||"",u=l.children?o.find("*").addBack():o;u=u.map((function(){return{el:e(this),start:i(this)}})),(a=function(){e.each(t,(function(e,t){r[t]&&o[t+"Class"](r[t])}))})(),u=u.map((function(){return this.end=i(this.el[0]),this.diff=function(t,i){var r,a,o={};for(r in i)a=i[r],t[r]!==a&&(n[r]||!e.fx.step[r]&&isNaN(parseFloat(a))||(o[r]=a));return o}(this.start,this.end),this})),o.attr("class",s),u=u.map((function(){var t=this,n=e.Deferred(),i=e.extend({},l,{queue:!1,complete:function(){n.resolve(t)}});return this.el.animate(this.diff,i),n.promise()})),e.when.apply(e,u.get()).done((function(){a(),e.each(arguments,(function(){var t=this.el;e.each(this.diff,(function(e){t.css(e,"")}))})),l.complete.call(o[0])}))}))},e.fn.extend({addClass:function(t){return function(n,i,r,a){return i?e.effects.animateClass.call(this,{add:n},i,r,a):t.apply(this,arguments)}}(e.fn.addClass),removeClass:function(t){return function(n,i,r,a){return arguments.length>1?e.effects.animateClass.call(this,{remove:n},i,r,a):t.apply(this,arguments)}}(e.fn.removeClass),toggleClass:function(t){return function(n,i,r,a,o){return"boolean"==typeof i||void 0===i?r?e.effects.animateClass.call(this,i?{add:n}:{remove:n},r,a,o):t.apply(this,arguments):e.effects.animateClass.call(this,{toggle:n},i,r,a)}}(e.fn.toggleClass),switchClass:function(t,n,i,r,a){return e.effects.animateClass.call(this,{add:n,remove:t},i,r,a)}})}(),function(){function t(t,n,i,r){return e.isPlainObject(t)&&(n=t,t=t.effect),t={effect:t},null==n&&(n={}),"function"==typeof n&&(r=n,i=null,n={}),("number"==typeof n||e.fx.speeds[n])&&(r=i,i=n,n={}),"function"==typeof i&&(r=i,i=null),n&&e.extend(t,n),i=i||n.duration,t.duration=e.fx.off?0:"number"==typeof i?i:i in e.fx.speeds?e.fx.speeds[i]:e.fx.speeds._default,t.complete=r||n.complete,t}function n(t){return!(t&&"number"!=typeof t&&!e.fx.speeds[t])||"string"==typeof t&&!e.effects.effect[t]||"function"==typeof t||"object"==typeof t&&!t.effect}function i(e,t){var n=t.outerWidth(),i=t.outerHeight(),r=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(e)||["",0,n,i,0];return{top:parseFloat(r[1])||0,right:"auto"===r[2]?n:parseFloat(r[2]),bottom:"auto"===r[3]?i:parseFloat(r[3]),left:parseFloat(r[4])||0}}e.expr&&e.expr.pseudos&&e.expr.pseudos.animated&&(e.expr.pseudos.animated=function(t){return function(n){return!!e(n).data(T)||t(n)}}(e.expr.pseudos.animated)),!1!==e.uiBackCompat&&e.extend(e.effects,{save:function(e,t){for(var n=0,i=t.length;n<i;n++)null!==t[n]&&e.data(C+t[n],e[0].style[t[n]])},restore:function(e,t){for(var n,i=0,r=t.length;i<r;i++)null!==t[i]&&(n=e.data(C+t[i]),e.css(t[i],n))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var n={width:t.outerWidth(!0),height:t.outerHeight(!0),float:t.css("float")},i=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),r={width:t.width(),height:t.height()},a=document.activeElement;try{a.id}catch(e){a=document.body}return t.wrap(i),(t[0]===a||e.contains(t[0],a))&&e(a).trigger("focus"),i=t.parent(),"static"===t.css("position")?(i.css({position:"relative"}),t.css({position:"relative"})):(e.extend(n,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],(function(e,i){n[i]=t.css(i),isNaN(parseInt(n[i],10))&&(n[i]="auto")})),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(r),i.css(n).show()},removeWrapper:function(t){var n=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===n||e.contains(t[0],n))&&e(n).trigger("focus")),t}}),e.extend(e.effects,{version:"1.13.2",define:function(t,n,i){return i||(i=n,n="effect"),e.effects.effect[t]=i,e.effects.effect[t].mode=n,i},scaledDimensions:function(e,t,n){if(0===t)return{height:0,width:0,outerHeight:0,outerWidth:0};var i="horizontal"!==n?(t||100)/100:1,r="vertical"!==n?(t||100)/100:1;return{height:e.height()*r,width:e.width()*i,outerHeight:e.outerHeight()*r,outerWidth:e.outerWidth()*i}},clipToBox:function(e){return{width:e.clip.right-e.clip.left,height:e.clip.bottom-e.clip.top,left:e.clip.left,top:e.clip.top}},unshift:function(e,t,n){var i=e.queue();t>1&&i.splice.apply(i,[1,0].concat(i.splice(t,n))),e.dequeue()},saveStyle:function(e){e.data(k,e[0].style.cssText)},restoreStyle:function(e){e[0].style.cssText=e.data(k)||"",e.removeData(k)},mode:function(e,t){var n=e.is(":hidden");return"toggle"===t&&(t=n?"show":"hide"),(n?"hide"===t:"show"===t)&&(t="none"),t},getBaseline:function(e,t){var n,i;switch(e[0]){case"top":n=0;break;case"middle":n=.5;break;case"bottom":n=1;break;default:n=e[0]/t.height}switch(e[1]){case"left":i=0;break;case"center":i=.5;break;case"right":i=1;break;default:i=e[1]/t.width}return{x:i,y:n}},createPlaceholder:function(t){var n,i=t.css("position"),r=t.position();return t.css({marginTop:t.css("marginTop"),marginBottom:t.css("marginBottom"),marginLeft:t.css("marginLeft"),marginRight:t.css("marginRight")}).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()),/^(static|relative)/.test(i)&&(i="absolute",n=e("<"+t[0].nodeName+">").insertAfter(t).css({display:/^(inline|ruby)/.test(t.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:t.css("marginTop"),marginBottom:t.css("marginBottom"),marginLeft:t.css("marginLeft"),marginRight:t.css("marginRight"),float:t.css("float")}).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()).addClass("ui-effects-placeholder"),t.data(C+"placeholder",n)),t.css({position:i,left:r.left,top:r.top}),n},removePlaceholder:function(e){var t=C+"placeholder",n=e.data(t);n&&(n.remove(),e.removeData(t))},cleanUp:function(t){e.effects.restoreStyle(t),e.effects.removePlaceholder(t)},setTransition:function(t,n,i,r){return r=r||{},e.each(n,(function(e,n){var a=t.cssUnit(n);a[0]>0&&(r[n]=a[0]*i+a[1])})),r}}),e.fn.extend({effect:function(){var n=t.apply(this,arguments),i=e.effects.effect[n.effect],r=i.mode,a=n.queue,o=a||"fx",s=n.complete,l=n.mode,u=[],c=function(t){var n=e(this),i=e.effects.mode(n,l)||r;n.data(T,!0),u.push(i),r&&("show"===i||i===r&&"hide"===i)&&n.show(),r&&"none"===i||e.effects.saveStyle(n),"function"==typeof t&&t()};if(e.fx.off||!i)return l?this[l](n.duration,s):this.each((function(){s&&s.call(this)}));function d(t){var a=e(this);function o(){"function"==typeof s&&s.call(a[0]),"function"==typeof t&&t()}n.mode=u.shift(),!1===e.uiBackCompat||r?"none"===n.mode?(a[l](),o()):i.call(a[0],n,(function(){a.removeData(T),e.effects.cleanUp(a),"hide"===n.mode&&a.hide(),o()})):(a.is(":hidden")?"hide"===l:"show"===l)?(a[l](),o()):i.call(a[0],n,o)}return!1===a?this.each(c).each(d):this.queue(o,c).queue(o,d)},show:function(e){return function(i){if(n(i))return e.apply(this,arguments);var r=t.apply(this,arguments);return r.mode="show",this.effect.call(this,r)}}(e.fn.show),hide:function(e){return function(i){if(n(i))return e.apply(this,arguments);var r=t.apply(this,arguments);return r.mode="hide",this.effect.call(this,r)}}(e.fn.hide),toggle:function(e){return function(i){if(n(i)||"boolean"==typeof i)return e.apply(this,arguments);var r=t.apply(this,arguments);return r.mode="toggle",this.effect.call(this,r)}}(e.fn.toggle),cssUnit:function(t){var n=this.css(t),i=[];return e.each(["em","px","%","pt"],(function(e,t){n.indexOf(t)>0&&(i=[parseFloat(n),t])})),i},cssClip:function(e){return e?this.css("clip","rect("+e.top+"px "+e.right+"px "+e.bottom+"px "+e.left+"px)"):i(this.css("clip"),this)},transfer:function(t,n){var i=e(this),r=e(t.to),a="fixed"===r.css("position"),o=e("body"),s=a?o.scrollTop():0,l=a?o.scrollLeft():0,u=r.offset(),c={top:u.top-s,left:u.left-l,height:r.innerHeight(),width:r.innerWidth()},d=i.offset(),h=e("<div class='ui-effects-transfer'></div>");h.appendTo("body").addClass(t.className).css({top:d.top-s,left:d.left-l,height:i.innerHeight(),width:i.innerWidth(),position:a?"fixed":"absolute"}).animate(c,t.duration,t.easing,(function(){h.remove(),"function"==typeof n&&n()}))}}),e.fx.step.clip=function(t){t.clipInit||(t.start=e(t.elem).cssClip(),"string"==typeof t.end&&(t.end=i(t.end,t.elem)),t.clipInit=!0),e(t.elem).cssClip({top:t.pos*(t.end.top-t.start.top)+t.start.top,right:t.pos*(t.end.right-t.start.right)+t.start.right,bottom:t.pos*(t.end.bottom-t.start.bottom)+t.start.bottom,left:t.pos*(t.end.left-t.start.left)+t.start.left})}}(),A={},e.each(["Quad","Cubic","Quart","Quint","Expo"],(function(e,t){A[t]=function(t){return Math.pow(t,e+2)}})),e.extend(A,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}}),e.each(A,(function(t,n){e.easing["easeIn"+t]=n,e.easing["easeOut"+t]=function(e){return 1-n(1-e)},e.easing["easeInOut"+t]=function(e){return e<.5?n(2*e)/2:1-n(-2*e+2)/2}})),e.effects,e.effects.define("blind","hide",(function(t,n){var i={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},r=e(this),a=t.direction||"up",o=r.cssClip(),s={clip:e.extend({},o)},l=e.effects.createPlaceholder(r);s.clip[i[a][0]]=s.clip[i[a][1]],"show"===t.mode&&(r.cssClip(s.clip),l&&l.css(e.effects.clipToBox(s)),s.clip=o),l&&l.animate(e.effects.clipToBox(s),t.duration,t.easing),r.animate(s,{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),e.effects.define("bounce",(function(t,n){var i,r,a,o=e(this),s=t.mode,l="hide"===s,u="show"===s,c=t.direction||"up",d=t.distance,h=t.times||5,p=2*h+(u||l?1:0),f=t.duration/p,g=t.easing,m="up"===c||"down"===c?"top":"left",b="up"===c||"left"===c,v=0,y=o.queue().length;for(e.effects.createPlaceholder(o),a=o.css(m),d||(d=o["top"===m?"outerHeight":"outerWidth"]()/3),u&&((r={opacity:1})[m]=a,o.css("opacity",0).css(m,b?2*-d:2*d).animate(r,f,g)),l&&(d/=Math.pow(2,h-1)),(r={})[m]=a;v<h;v++)(i={})[m]=(b?"-=":"+=")+d,o.animate(i,f,g).animate(r,f,g),d=l?2*d:d/2;l&&((i={opacity:0})[m]=(b?"-=":"+=")+d,o.animate(i,f,g)),o.queue(n),e.effects.unshift(o,y,p+1)})),e.effects.define("clip","hide",(function(t,n){var i,r={},a=e(this),o=t.direction||"vertical",s="both"===o,l=s||"horizontal"===o,u=s||"vertical"===o;i=a.cssClip(),r.clip={top:u?(i.bottom-i.top)/2:i.top,right:l?(i.right-i.left)/2:i.right,bottom:u?(i.bottom-i.top)/2:i.bottom,left:l?(i.right-i.left)/2:i.left},e.effects.createPlaceholder(a),"show"===t.mode&&(a.cssClip(r.clip),r.clip=i),a.animate(r,{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),e.effects.define("drop","hide",(function(t,n){var i,r=e(this),a="show"===t.mode,o=t.direction||"left",s="up"===o||"down"===o?"top":"left",l="up"===o||"left"===o?"-=":"+=",u="+="===l?"-=":"+=",c={opacity:0};e.effects.createPlaceholder(r),i=t.distance||r["top"===s?"outerHeight":"outerWidth"](!0)/2,c[s]=l+i,a&&(r.css(c),c[s]=u+i,c.opacity=1),r.animate(c,{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),e.effects.define("explode","hide",(function(t,n){var i,r,a,o,s,l,u=t.pieces?Math.round(Math.sqrt(t.pieces)):3,c=u,d=e(this),h="show"===t.mode,p=d.show().css("visibility","hidden").offset(),f=Math.ceil(d.outerWidth()/c),g=Math.ceil(d.outerHeight()/u),m=[];function b(){m.push(this),m.length===u*c&&(d.css({visibility:"visible"}),e(m).remove(),n())}for(i=0;i<u;i++)for(o=p.top+i*g,l=i-(u-1)/2,r=0;r<c;r++)a=p.left+r*f,s=r-(c-1)/2,d.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-r*f,top:-i*g}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:f,height:g,left:a+(h?s*f:0),top:o+(h?l*g:0),opacity:h?0:1}).animate({left:a+(h?0:s*f),top:o+(h?0:l*g),opacity:h?1:0},t.duration||500,t.easing,b)})),e.effects.define("fade","toggle",(function(t,n){var i="show"===t.mode;e(this).css("opacity",i?0:1).animate({opacity:i?1:0},{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),e.effects.define("fold","hide",(function(t,n){var i=e(this),r=t.mode,a="show"===r,o="hide"===r,s=t.size||15,l=/([0-9]+)%/.exec(s),u=t.horizFirst?["right","bottom"]:["bottom","right"],c=t.duration/2,d=e.effects.createPlaceholder(i),h=i.cssClip(),p={clip:e.extend({},h)},f={clip:e.extend({},h)},g=[h[u[0]],h[u[1]]],m=i.queue().length;l&&(s=parseInt(l[1],10)/100*g[o?0:1]),p.clip[u[0]]=s,f.clip[u[0]]=s,f.clip[u[1]]=0,a&&(i.cssClip(f.clip),d&&d.css(e.effects.clipToBox(f)),f.clip=h),i.queue((function(n){d&&d.animate(e.effects.clipToBox(p),c,t.easing).animate(e.effects.clipToBox(f),c,t.easing),n()})).animate(p,c,t.easing).animate(f,c,t.easing).queue(n),e.effects.unshift(i,m,4)})),e.effects.define("highlight","show",(function(t,n){var i=e(this),r={backgroundColor:i.css("backgroundColor")};"hide"===t.mode&&(r.opacity=0),e.effects.saveStyle(i),i.css({backgroundImage:"none",backgroundColor:t.color||"#ffff99"}).animate(r,{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),e.effects.define("size",(function(t,n){var i,r,a,o=e(this),s=["fontSize"],l=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],u=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],c=t.mode,d="effect"!==c,h=t.scale||"both",p=t.origin||["middle","center"],f=o.css("position"),g=o.position(),m=e.effects.scaledDimensions(o),b=t.from||m,v=t.to||e.effects.scaledDimensions(o,0);e.effects.createPlaceholder(o),"show"===c&&(a=b,b=v,v=a),r={from:{y:b.height/m.height,x:b.width/m.width},to:{y:v.height/m.height,x:v.width/m.width}},"box"!==h&&"both"!==h||(r.from.y!==r.to.y&&(b=e.effects.setTransition(o,l,r.from.y,b),v=e.effects.setTransition(o,l,r.to.y,v)),r.from.x!==r.to.x&&(b=e.effects.setTransition(o,u,r.from.x,b),v=e.effects.setTransition(o,u,r.to.x,v))),"content"!==h&&"both"!==h||r.from.y!==r.to.y&&(b=e.effects.setTransition(o,s,r.from.y,b),v=e.effects.setTransition(o,s,r.to.y,v)),p&&(i=e.effects.getBaseline(p,m),b.top=(m.outerHeight-b.outerHeight)*i.y+g.top,b.left=(m.outerWidth-b.outerWidth)*i.x+g.left,v.top=(m.outerHeight-v.outerHeight)*i.y+g.top,v.left=(m.outerWidth-v.outerWidth)*i.x+g.left),delete b.outerHeight,delete b.outerWidth,o.css(b),"content"!==h&&"both"!==h||(l=l.concat(["marginTop","marginBottom"]).concat(s),u=u.concat(["marginLeft","marginRight"]),o.find("*[width]").each((function(){var n=e(this),i=e.effects.scaledDimensions(n),a={height:i.height*r.from.y,width:i.width*r.from.x,outerHeight:i.outerHeight*r.from.y,outerWidth:i.outerWidth*r.from.x},o={height:i.height*r.to.y,width:i.width*r.to.x,outerHeight:i.height*r.to.y,outerWidth:i.width*r.to.x};r.from.y!==r.to.y&&(a=e.effects.setTransition(n,l,r.from.y,a),o=e.effects.setTransition(n,l,r.to.y,o)),r.from.x!==r.to.x&&(a=e.effects.setTransition(n,u,r.from.x,a),o=e.effects.setTransition(n,u,r.to.x,o)),d&&e.effects.saveStyle(n),n.css(a),n.animate(o,t.duration,t.easing,(function(){d&&e.effects.restoreStyle(n)}))}))),o.animate(v,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){var t=o.offset();0===v.opacity&&o.css("opacity",b.opacity),d||(o.css("position","static"===f?"relative":f).offset(t),e.effects.saveStyle(o)),n()}})})),e.effects.define("scale",(function(t,n){var i=e(this),r=t.mode,a=parseInt(t.percent,10)||(0===parseInt(t.percent,10)||"effect"!==r?0:100),o=e.extend(!0,{from:e.effects.scaledDimensions(i),to:e.effects.scaledDimensions(i,a,t.direction||"both"),origin:t.origin||["middle","center"]},t);t.fade&&(o.from.opacity=1,o.to.opacity=0),e.effects.effect.size.call(this,o,n)})),e.effects.define("puff","hide",(function(t,n){var i=e.extend(!0,{},t,{fade:!0,percent:parseInt(t.percent,10)||150});e.effects.effect.scale.call(this,i,n)})),e.effects.define("pulsate","show",(function(t,n){var i=e(this),r=t.mode,a="show"===r,o=a||"hide"===r,s=2*(t.times||5)+(o?1:0),l=t.duration/s,u=0,c=1,d=i.queue().length;for(!a&&i.is(":visible")||(i.css("opacity",0).show(),u=1);c<s;c++)i.animate({opacity:u},l,t.easing),u=1-u;i.animate({opacity:u},l,t.easing),i.queue(n),e.effects.unshift(i,d,s+1)})),e.effects.define("shake",(function(t,n){var i=1,r=e(this),a=t.direction||"left",o=t.distance||20,s=t.times||3,l=2*s+1,u=Math.round(t.duration/l),c="up"===a||"down"===a?"top":"left",d="up"===a||"left"===a,h={},p={},f={},g=r.queue().length;for(e.effects.createPlaceholder(r),h[c]=(d?"-=":"+=")+o,p[c]=(d?"+=":"-=")+2*o,f[c]=(d?"-=":"+=")+2*o,r.animate(h,u,t.easing);i<s;i++)r.animate(p,u,t.easing).animate(f,u,t.easing);r.animate(p,u,t.easing).animate(h,u/2,t.easing).queue(n),e.effects.unshift(r,g,l+1)})),e.effects.define("slide","show",(function(t,n){var i,r,a=e(this),o={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},s=t.mode,l=t.direction||"left",u="up"===l||"down"===l?"top":"left",c="up"===l||"left"===l,d=t.distance||a["top"===u?"outerHeight":"outerWidth"](!0),h={};e.effects.createPlaceholder(a),i=a.cssClip(),r=a.position()[u],h[u]=(c?-1:1)*d+r,h.clip=a.cssClip(),h.clip[o[l][1]]=h.clip[o[l][0]],"show"===s&&(a.cssClip(h.clip),a.css(u,h[u]),h.clip=i,h[u]=r),a.animate(h,{queue:!1,duration:t.duration,easing:t.easing,complete:n})})),!1!==e.uiBackCompat&&e.effects.define("transfer",(function(t,n){e(this).transfer(t,n)})),e.ui.focusable=function(t,n){var i,r,a,o,s,l=t.nodeName.toLowerCase();return"area"===l?(r=(i=t.parentNode).name,!(!t.href||!r||"map"!==i.nodeName.toLowerCase())&&(a=e("img[usemap='#"+r+"']")).length>0&&a.is(":visible")):(/^(input|select|textarea|button|object)$/.test(l)?(o=!t.disabled)&&(s=e(t).closest("fieldset")[0])&&(o=!s.disabled):o="a"===l&&t.href||n,o&&e(t).is(":visible")&&function(e){for(var t=e.css("visibility");"inherit"===t;)t=(e=e.parent()).css("visibility");return"visible"===t}(e(t)))},e.extend(e.expr.pseudos,{focusable:function(t){return e.ui.focusable(t,null!=e.attr(t,"tabindex"))}}),e.ui.focusable,e.fn._form=function(){return"string"==typeof this[0].form?this.closest("form"):e(this[0].form)},e.ui.formResetMixin={_formResetHandler:function(){var t=e(this);setTimeout((function(){var n=t.data("ui-form-reset-instances");e.each(n,(function(){this.refresh()}))}))},_bindFormResetHandler:function(){if(this.form=this.element._form(),this.form.length){var e=this.form.data("ui-form-reset-instances")||[];e.length||this.form.on("reset.ui-form-reset",this._formResetHandler),e.push(this),this.form.data("ui-form-reset-instances",e)}},_unbindFormResetHandler:function(){if(this.form.length){var t=this.form.data("ui-form-reset-instances");t.splice(e.inArray(this,t),1),t.length?this.form.data("ui-form-reset-instances",t):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},e.expr.pseudos||(e.expr.pseudos=e.expr[":"]),e.uniqueSort||(e.uniqueSort=e.unique),!e.escapeSelector){var S=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,E=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e};e.escapeSelector=function(e){return(e+"").replace(S,E)}}e.fn.even&&e.fn.odd||e.fn.extend({even:function(){return this.filter((function(e){return e%2==0}))},odd:function(){return this.filter((function(e){return e%2==1}))}}),e.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},e.fn.labels=function(){var t,n,i,r,a;return this.length?this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(r=this.eq(0).parents("label"),(i=this.attr("id"))&&(a=(t=this.eq(0).parents().last()).add(t.length?t.siblings():this.siblings()),n="label[for='"+e.escapeSelector(i)+"']",r=r.add(a.find(n).addBack(n))),this.pushStack(r)):this.pushStack([])},e.fn.scrollParent=function(t){var n=this.css("position"),i="absolute"===n,r=t?/(auto|scroll|hidden)/:/(auto|scroll)/,a=this.parents().filter((function(){var t=e(this);return(!i||"static"!==t.css("position"))&&r.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))})).eq(0);return"fixed"!==n&&a.length?a:e(this[0].ownerDocument||document)},e.extend(e.expr.pseudos,{tabbable:function(t){var n=e.attr(t,"tabindex"),i=null!=n;return(!i||n>=0)&&e.ui.focusable(t,i)}}),e.fn.extend({uniqueId:(x=0,function(){return this.each((function(){this.id||(this.id="ui-id-"+ ++x)}))}),removeUniqueId:function(){return this.each((function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")}))}}),e.widget("ui.accordion",{version:"1.13.2",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:!1,event:"click",header:function(e){return e.find("> li > :first-child").add(e.find("> :not(li)").even())},heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var t=this.options;this.prevShow=this.prevHide=e(),this._addClass("ui-accordion","ui-widget ui-helper-reset"),this.element.attr("role","tablist"),t.collapsible||!1!==t.active&&null!=t.active||(t.active=0),this._processPanels(),t.active<0&&(t.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():e()}},_createIcons:function(){var t,n,i=this.options.icons;i&&(t=e("<span>"),this._addClass(t,"ui-accordion-header-icon","ui-icon "+i.header),t.prependTo(this.headers),n=this.active.children(".ui-accordion-header-icon"),this._removeClass(n,i.header)._addClass(n,null,i.activeHeader)._addClass(this.headers,"ui-accordion-icons"))},_destroyIcons:function(){this._removeClass(this.headers,"ui-accordion-icons"),this.headers.children(".ui-accordion-header-icon").remove()},_destroy:function(){var e;this.element.removeAttr("role"),this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(),this._destroyIcons(),e=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&e.css("height","")},_setOption:function(e,t){"active"!==e?("event"===e&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(t)),this._super(e,t),"collapsible"!==e||t||!1!==this.options.active||this._activate(0),"icons"===e&&(this._destroyIcons(),t&&this._createIcons())):this._activate(t)},_setOptionDisabled:function(e){this._super(e),this.element.attr("aria-disabled",e),this._toggleClass(null,"ui-state-disabled",!!e),this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!e)},_keydown:function(t){if(!t.altKey&&!t.ctrlKey){var n=e.ui.keyCode,i=this.headers.length,r=this.headers.index(t.target),a=!1;switch(t.keyCode){case n.RIGHT:case n.DOWN:a=this.headers[(r+1)%i];break;case n.LEFT:case n.UP:a=this.headers[(r-1+i)%i];break;case n.SPACE:case n.ENTER:this._eventHandler(t);break;case n.HOME:a=this.headers[0];break;case n.END:a=this.headers[i-1]}a&&(e(t.target).attr("tabIndex",-1),e(a).attr("tabIndex",0),e(a).trigger("focus"),t.preventDefault())}},_panelKeyDown:function(t){t.keyCode===e.ui.keyCode.UP&&t.ctrlKey&&e(t.currentTarget).prev().trigger("focus")},refresh:function(){var t=this.options;this._processPanels(),!1===t.active&&!0===t.collapsible||!this.headers.length?(t.active=!1,this.active=e()):!1===t.active?this._activate(0):this.active.length&&!e.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(t.active=!1,this.active=e()):this._activate(Math.max(0,t.active-1)):t.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var e=this.headers,t=this.panels;"function"==typeof this.options.header?this.headers=this.options.header(this.element):this.headers=this.element.find(this.options.header),this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default"),this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide(),this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content"),t&&(this._off(e.not(this.headers)),this._off(t.not(this.panels)))},_refresh:function(){var t,n=this.options,i=n.heightStyle,r=this.element.parent();this.active=this._findActive(n.active),this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed"),this._addClass(this.active.next(),"ui-accordion-content-active"),this.active.next().show(),this.headers.attr("role","tab").each((function(){var t=e(this),n=t.uniqueId().attr("id"),i=t.next(),r=i.uniqueId().attr("id");t.attr("aria-controls",r),i.attr("aria-labelledby",n)})).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(n.event),"fill"===i?(t=r.height(),this.element.siblings(":visible").each((function(){var n=e(this),i=n.css("position");"absolute"!==i&&"fixed"!==i&&(t-=n.outerHeight(!0))})),this.headers.each((function(){t-=e(this).outerHeight(!0)})),this.headers.next().each((function(){e(this).height(Math.max(0,t-e(this).innerHeight()+e(this).height()))})).css("overflow","auto")):"auto"===i&&(t=0,this.headers.next().each((function(){var n=e(this).is(":visible");n||e(this).show(),t=Math.max(t,e(this).css("height","").height()),n||e(this).hide()})).height(t))},_activate:function(t){var n=this._findActive(t)[0];n!==this.active[0]&&(n=n||this.active[0],this._eventHandler({target:n,currentTarget:n,preventDefault:e.noop}))},_findActive:function(t){return"number"==typeof t?this.headers.eq(t):e()},_setupEvents:function(t){var n={keydown:"_keydown"};t&&e.each(t.split(" "),(function(e,t){n[t]="_eventHandler"})),this._off(this.headers.add(this.headers.next())),this._on(this.headers,n),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(t){var n,i,r=this.options,a=this.active,o=e(t.currentTarget),s=o[0]===a[0],l=s&&r.collapsible,u=l?e():o.next(),c=a.next(),d={oldHeader:a,oldPanel:c,newHeader:l?e():o,newPanel:u};t.preventDefault(),s&&!r.collapsible||!1===this._trigger("beforeActivate",t,d)||(r.active=!l&&this.headers.index(o),this.active=s?e():o,this._toggle(d),this._removeClass(a,"ui-accordion-header-active","ui-state-active"),r.icons&&(n=a.children(".ui-accordion-header-icon"),this._removeClass(n,null,r.icons.activeHeader)._addClass(n,null,r.icons.header)),s||(this._removeClass(o,"ui-accordion-header-collapsed")._addClass(o,"ui-accordion-header-active","ui-state-active"),r.icons&&(i=o.children(".ui-accordion-header-icon"),this._removeClass(i,null,r.icons.header)._addClass(i,null,r.icons.activeHeader)),this._addClass(o.next(),"ui-accordion-content-active")))},_toggle:function(t){var n=t.newPanel,i=this.prevShow.length?this.prevShow:t.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=n,this.prevHide=i,this.options.animate?this._animate(n,i,t):(i.hide(),n.show(),this._toggleComplete(t)),i.attr({"aria-hidden":"true"}),i.prev().attr({"aria-selected":"false","aria-expanded":"false"}),n.length&&i.length?i.prev().attr({tabIndex:-1,"aria-expanded":"false"}):n.length&&this.headers.filter((function(){return 0===parseInt(e(this).attr("tabIndex"),10)})).attr("tabIndex",-1),n.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(e,t,n){var i,r,a,o=this,s=0,l=e.css("box-sizing"),u=e.length&&(!t.length||e.index()<t.index()),c=this.options.animate||{},d=u&&c.down||c,h=function(){o._toggleComplete(n)};return"number"==typeof d&&(a=d),"string"==typeof d&&(r=d),r=r||d.easing||c.easing,a=a||d.duration||c.duration,t.length?e.length?(i=e.show().outerHeight(),t.animate(this.hideProps,{duration:a,easing:r,step:function(e,t){t.now=Math.round(e)}}),void e.hide().animate(this.showProps,{duration:a,easing:r,complete:h,step:function(e,n){n.now=Math.round(e),"height"!==n.prop?"content-box"===l&&(s+=n.now):"content"!==o.options.heightStyle&&(n.now=Math.round(i-t.outerHeight()-s),s=0)}})):t.animate(this.hideProps,a,r,h):e.animate(this.showProps,a,r,h)},_toggleComplete:function(e){var t=e.oldPanel,n=t.prev();this._removeClass(t,"ui-accordion-content-active"),this._removeClass(n,"ui-accordion-header-active")._addClass(n,"ui-accordion-header-collapsed"),t.length&&(t.parent()[0].className=t.parent()[0].className),this._trigger("activate",null,e)}}),e.ui.safeActiveElement=function(e){var t;try{t=e.activeElement}catch(n){t=e.body}return t||(t=e.body),t.nodeName||(t=e.body),t},e.widget("ui.menu",{version:"1.13.2",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.lastMousePosition={x:null,y:null},this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(e){e.preventDefault(),this._activateItem(e)},"click .ui-menu-item":function(t){var n=e(t.target),i=e(e.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&n.not(".ui-state-disabled").length&&(this.select(t),t.isPropagationStopped()||(this.mouseHandled=!0),n.has(".ui-menu").length?this.expand(t):!this.element.is(":focus")&&i.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":"_activateItem","mousemove .ui-menu-item":"_activateItem",mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(e,t){var n=this.active||this._menuItems().first();t||this.focus(e,n)},blur:function(t){this._delay((function(){!e.contains(this.element[0],e.ui.safeActiveElement(this.document[0]))&&this.collapseAll(t)}))},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){this._closeOnDocumentClick(e)&&this.collapseAll(e,!0),this.mouseHandled=!1}})},_activateItem:function(t){if(!this.previousFilter&&(t.clientX!==this.lastMousePosition.x||t.clientY!==this.lastMousePosition.y)){this.lastMousePosition={x:t.clientX,y:t.clientY};var n=e(t.target).closest(".ui-menu-item"),i=e(t.currentTarget);n[0]===i[0]&&(i.is(".ui-state-active")||(this._removeClass(i.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(t,i)))}},_destroy:function(){var t=this.element.find(".ui-menu-item").removeAttr("role aria-disabled").children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),t.children().each((function(){var t=e(this);t.data("ui-menu-submenu-caret")&&t.remove()}))},_keydown:function(t){var n,i,r,a,o=!0;switch(t.keyCode){case e.ui.keyCode.PAGE_UP:this.previousPage(t);break;case e.ui.keyCode.PAGE_DOWN:this.nextPage(t);break;case e.ui.keyCode.HOME:this._move("first","first",t);break;case e.ui.keyCode.END:this._move("last","last",t);break;case e.ui.keyCode.UP:this.previous(t);break;case e.ui.keyCode.DOWN:this.next(t);break;case e.ui.keyCode.LEFT:this.collapse(t);break;case e.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(t);break;case e.ui.keyCode.ENTER:case e.ui.keyCode.SPACE:this._activate(t);break;case e.ui.keyCode.ESCAPE:this.collapse(t);break;default:o=!1,i=this.previousFilter||"",a=!1,r=t.keyCode>=96&&t.keyCode<=105?(t.keyCode-96).toString():String.fromCharCode(t.keyCode),clearTimeout(this.filterTimer),r===i?a=!0:r=i+r,n=this._filterMenuItems(r),(n=a&&-1!==n.index(this.active.next())?this.active.nextAll(".ui-menu-item"):n).length||(r=String.fromCharCode(t.keyCode),n=this._filterMenuItems(r)),n.length?(this.focus(t,n),this.previousFilter=r,this.filterTimer=this._delay((function(){delete this.previousFilter}),1e3)):delete this.previousFilter}o&&t.preventDefault()},_activate:function(e){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(e):this.select(e))},refresh:function(){var t,n,i,r,a=this,o=this.options.icons.submenu,s=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),n=s.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each((function(){var t=e(this),n=t.prev(),i=e("<span>").data("ui-menu-submenu-caret",!0);a._addClass(i,"ui-menu-icon","ui-icon "+o),n.attr("aria-haspopup","true").prepend(i),t.attr("aria-labelledby",n.attr("id"))})),this._addClass(n,"ui-menu","ui-widget ui-widget-content ui-front"),(t=s.add(this.element).find(this.options.items)).not(".ui-menu-item").each((function(){var t=e(this);a._isDivider(t)&&a._addClass(t,"ui-menu-divider","ui-widget-content")})),r=(i=t.not(".ui-menu-item, .ui-menu-divider")).children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(i,"ui-menu-item")._addClass(r,"ui-menu-item-wrapper"),t.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!e.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(e,t){if("icons"===e){var n=this.element.find(".ui-menu-icon");this._removeClass(n,null,this.options.icons.submenu)._addClass(n,null,t.submenu)}this._super(e,t)},_setOptionDisabled:function(e){this._super(e),this.element.attr("aria-disabled",String(e)),this._toggleClass(null,"ui-state-disabled",!!e)},focus:function(e,t){var n,i,r;this.blur(e,e&&"focus"===e.type),this._scrollIntoView(t),this.active=t.first(),i=this.active.children(".ui-menu-item-wrapper"),this._addClass(i,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",i.attr("id")),r=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(r,null,"ui-state-active"),e&&"keydown"===e.type?this._close():this.timer=this._delay((function(){this._close()}),this.delay),(n=t.children(".ui-menu")).length&&e&&/^mouse/.test(e.type)&&this._startOpening(n),this.activeMenu=t.parent(),this._trigger("focus",e,{item:t})},_scrollIntoView:function(t){var n,i,r,a,o,s;this._hasScroll()&&(n=parseFloat(e.css(this.activeMenu[0],"borderTopWidth"))||0,i=parseFloat(e.css(this.activeMenu[0],"paddingTop"))||0,r=t.offset().top-this.activeMenu.offset().top-n-i,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),s=t.outerHeight(),r<0?this.activeMenu.scrollTop(a+r):r+s>o&&this.activeMenu.scrollTop(a+r-o+s))},blur:function(e,t){t||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",e,{item:this.active}),this.active=null)},_startOpening:function(e){clearTimeout(this.timer),"true"===e.attr("aria-hidden")&&(this.timer=this._delay((function(){this._close(),this._open(e)}),this.delay))},_open:function(t){var n=e.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden","true"),t.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(n)},collapseAll:function(t,n){clearTimeout(this.timer),this.timer=this._delay((function(){var i=n?this.element:e(t&&t.target).closest(this.element.find(".ui-menu"));i.length||(i=this.element),this._close(i),this.blur(t),this._removeClass(i.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=i}),n?0:this.delay)},_close:function(e){e||(e=this.active?this.active.parent():this.element),e.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(t){return!e(t.target).closest(".ui-menu").length},_isDivider:function(e){return!/[^\-\u2014\u2013\s]/.test(e.text())},collapse:function(e){var t=this.active&&this.active.parent().closest(".ui-menu-item",this.element);t&&t.length&&(this._close(),this.focus(e,t))},expand:function(e){var t=this.active&&this._menuItems(this.active.children(".ui-menu")).first();t&&t.length&&(this._open(t.parent()),this._delay((function(){this.focus(e,t)})))},next:function(e){this._move("next","first",e)},previous:function(e){this._move("prev","last",e)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_menuItems:function(e){return(e||this.element).find(this.options.items).filter(".ui-menu-item")},_move:function(e,t,n){var i;this.active&&(i="first"===e||"last"===e?this.active["first"===e?"prevAll":"nextAll"](".ui-menu-item").last():this.active[e+"All"](".ui-menu-item").first()),i&&i.length&&this.active||(i=this._menuItems(this.activeMenu)[t]()),this.focus(n,i)},nextPage:function(t){var n,i,r;this.active?this.isLastItem()||(this._hasScroll()?(i=this.active.offset().top,r=this.element.innerHeight(),0===e.fn.jquery.indexOf("3.2.")&&(r+=this.element[0].offsetHeight-this.element.outerHeight()),this.active.nextAll(".ui-menu-item").each((function(){return(n=e(this)).offset().top-i-r<0})),this.focus(t,n)):this.focus(t,this._menuItems(this.activeMenu)[this.active?"last":"first"]())):this.next(t)},previousPage:function(t){var n,i,r;this.active?this.isFirstItem()||(this._hasScroll()?(i=this.active.offset().top,r=this.element.innerHeight(),0===e.fn.jquery.indexOf("3.2.")&&(r+=this.element[0].offsetHeight-this.element.outerHeight()),this.active.prevAll(".ui-menu-item").each((function(){return(n=e(this)).offset().top-i+r>0})),this.focus(t,n)):this.focus(t,this._menuItems(this.activeMenu).first())):this.next(t)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(t){this.active=this.active||e(t.target).closest(".ui-menu-item");var n={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(t,!0),this._trigger("select",t,n)},_filterMenuItems:function(t){var n=t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),i=new RegExp("^"+n,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter((function(){return i.test(String.prototype.trim.call(e(this).children(".ui-menu-item-wrapper").text()))}))}}),e.widget("ui.autocomplete",{version:"1.13.2",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,liveRegionTimer:null,_create:function(){var t,n,i,r=this.element[0].nodeName.toLowerCase(),a="textarea"===r,o="input"===r;this.isMultiLine=a||!o&&this._isContentEditable(this.element),this.valueMethod=this.element[a||o?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(r){if(this.element.prop("readOnly"))return t=!0,i=!0,void(n=!0);t=!1,i=!1,n=!1;var a=e.ui.keyCode;switch(r.keyCode){case a.PAGE_UP:t=!0,this._move("previousPage",r);break;case a.PAGE_DOWN:t=!0,this._move("nextPage",r);break;case a.UP:t=!0,this._keyEvent("previous",r);break;case a.DOWN:t=!0,this._keyEvent("next",r);break;case a.ENTER:this.menu.active&&(t=!0,r.preventDefault(),this.menu.select(r));break;case a.TAB:this.menu.active&&this.menu.select(r);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(r),r.preventDefault());break;default:n=!0,this._searchTimeout(r)}},keypress:function(i){if(t)return t=!1,void(this.isMultiLine&&!this.menu.element.is(":visible")||i.preventDefault());if(!n){var r=e.ui.keyCode;switch(i.keyCode){case r.PAGE_UP:this._move("previousPage",i);break;case r.PAGE_DOWN:this._move("nextPage",i);break;case r.UP:this._keyEvent("previous",i);break;case r.DOWN:this._keyEvent("next",i)}}},input:function(e){if(i)return i=!1,void e.preventDefault();this._searchTimeout(e)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(e){clearTimeout(this.searching),this.close(e),this._change(e)}}),this._initSource(),this.menu=e("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().attr({unselectable:"on"}).menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault()},menufocus:function(t,n){var i,r;if(this.isNewMenu&&(this.isNewMenu=!1,t.originalEvent&&/^mouse/.test(t.originalEvent.type)))return this.menu.blur(),void this.document.one("mousemove",(function(){e(t.target).trigger(t.originalEvent)}));r=n.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",t,{item:r})&&t.originalEvent&&/^key/.test(t.originalEvent.type)&&this._value(r.value),(i=n.item.attr("aria-label")||r.value)&&String.prototype.trim.call(i).length&&(clearTimeout(this.liveRegionTimer),this.liveRegionTimer=this._delay((function(){this.liveRegion.html(e("<div>").text(i))}),100))},menuselect:function(t,n){var i=n.item.data("ui-autocomplete-item"),r=this.previous;this.element[0]!==e.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=r,this._delay((function(){this.previous=r,this.selectedItem=i}))),!1!==this._trigger("select",t,{item:i})&&this._value(i.value),this.term=this._value(),this.close(t),this.selectedItem=i}}),this.liveRegion=e("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(e,t){this._super(e,t),"source"===e&&this._initSource(),"appendTo"===e&&this.menu.element.appendTo(this._appendTo()),"disabled"===e&&t&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(t){var n=this.menu.element[0];return t.target===this.element[0]||t.target===n||e.contains(n,t.target)},_closeOnClickOutside:function(e){this._isEventTargetInWidget(e)||this.close()},_appendTo:function(){var t=this.options.appendTo;return t&&(t=t.jquery||t.nodeType?e(t):this.document.find(t).eq(0)),t&&t[0]||(t=this.element.closest(".ui-front, dialog")),t.length||(t=this.document[0].body),t},_initSource:function(){var t,n,i=this;Array.isArray(this.options.source)?(t=this.options.source,this.source=function(n,i){i(e.ui.autocomplete.filter(t,n.term))}):"string"==typeof this.options.source?(n=this.options.source,this.source=function(t,r){i.xhr&&i.xhr.abort(),i.xhr=e.ajax({url:n,data:t,dataType:"json",success:function(e){r(e)},error:function(){r([])}})}):this.source=this.options.source},_searchTimeout:function(e){clearTimeout(this.searching),this.searching=this._delay((function(){var t=this.term===this._value(),n=this.menu.element.is(":visible"),i=e.altKey||e.ctrlKey||e.metaKey||e.shiftKey;t&&(!t||n||i)||(this.selectedItem=null,this.search(null,e))}),this.options.delay)},search:function(e,t){return e=null!=e?e:this._value(),this.term=this._value(),e.length<this.options.minLength?this.close(t):!1!==this._trigger("search",t)?this._search(e):void 0},_search:function(e){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:e},this._response())},_response:function(){var e=++this.requestIndex;return function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")}.bind(this)},__response:function(e){e&&(e=this._normalize(e)),this._trigger("response",null,{content:e}),!this.options.disabled&&e&&e.length&&!this.cancelSearch?(this._suggest(e),this._trigger("open")):this._close()},close:function(e){this.cancelSearch=!0,this._close(e)},_close:function(e){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",e))},_change:function(e){this.previous!==this._value()&&this._trigger("change",e,{item:this.selectedItem})},_normalize:function(t){return t.length&&t[0].label&&t[0].value?t:e.map(t,(function(t){return"string"==typeof t?{label:t,value:t}:e.extend({},t,{label:t.label||t.value,value:t.value||t.label})}))},_suggest:function(t){var n=this.menu.element.empty();this._renderMenu(n,t),this.isNewMenu=!0,this.menu.refresh(),n.show(),this._resizeMenu(),n.position(e.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var e=this.menu.element;e.outerWidth(Math.max(e.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(t,n){var i=this;e.each(n,(function(e,n){i._renderItemData(t,n)}))},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-autocomplete-item",t)},_renderItem:function(t,n){return e("<li>").append(e("<div>").text(n.label)).appendTo(t)},_move:function(e,t){if(this.menu.element.is(":visible"))return this.menu.isFirstItem()&&/^previous/.test(e)||this.menu.isLastItem()&&/^next/.test(e)?(this.isMultiLine||this._value(this.term),void this.menu.blur()):void this.menu[e](t);this.search(null,t)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(e,t){this.isMultiLine&&!this.menu.element.is(":visible")||(this._move(e,t),t.preventDefault())},_isContentEditable:function(e){if(!e.length)return!1;var t=e.prop("contentEditable");return"inherit"===t?this._isContentEditable(e.parent()):"true"===t}}),e.extend(e.ui.autocomplete,{escapeRegex:function(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(t,n){var i=new RegExp(e.ui.autocomplete.escapeRegex(n),"i");return e.grep(t,(function(e){return i.test(e.label||e.value||e)}))}}),e.widget("ui.autocomplete",e.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(e){return e+(e>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(t){var n;this._superApply(arguments),this.options.disabled||this.cancelSearch||(n=t&&t.length?this.options.messages.results(t.length):this.options.messages.noResults,clearTimeout(this.liveRegionTimer),this.liveRegionTimer=this._delay((function(){this.liveRegion.html(e("<div>").text(n))}),100))}}),e.ui.autocomplete;var D,P=/ui-corner-([a-z]){2,6}/g;function I(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:"",selectMonthLabel:"Select month",selectYearLabel:"Select year"},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,onUpdateDatepicker:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},e.extend(this._defaults,this.regional[""]),this.regional.en=e.extend(!0,{},this.regional[""]),this.regional["en-US"]=e.extend(!0,{},this.regional.en),this.dpDiv=N(e("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function N(t){var n="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return t.on("mouseout",n,(function(){e(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).removeClass("ui-datepicker-next-hover")})).on("mouseover",n,O)}function O(){e.datepicker._isDisabledDatepicker(D.inline?D.dpDiv.parent()[0]:D.input[0])||(e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),e(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).addClass("ui-datepicker-next-hover"))}function M(t,n){for(var i in e.extend(t,n),n)null==n[i]&&(t[i]=n[i]);return t}e.widget("ui.controlgroup",{version:"1.13.2",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:!0,items:{button:"input[type=button], input[type=submit], input[type=reset], button, a",controlgroupLabel:".ui-controlgroup-label",checkboxradio:"input[type='checkbox'], input[type='radio']",selectmenu:"select",spinner:".ui-spinner-input"}},_create:function(){this._enhance()},_enhance:function(){this.element.attr("role","toolbar"),this.refresh()},_destroy:function(){this._callChildMethod("destroy"),this.childWidgets.removeData("ui-controlgroup-data"),this.element.removeAttr("role"),this.options.items.controlgroupLabel&&this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()},_initWidgets:function(){var t=this,n=[];e.each(this.options.items,(function(i,r){var a,o={};if(r)return"controlgroupLabel"===i?((a=t.element.find(r)).each((function(){var t=e(this);t.children(".ui-controlgroup-label-contents").length||t.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")})),t._addClass(a,null,"ui-widget ui-widget-content ui-state-default"),void(n=n.concat(a.get()))):void(e.fn[i]&&(o=t["_"+i+"Options"]?t["_"+i+"Options"]("middle"):{classes:{}},t.element.find(r).each((function(){var r=e(this),a=r[i]("instance"),s=e.widget.extend({},o);if("button"!==i||!r.parent(".ui-spinner").length){a||(a=r[i]()[i]("instance")),a&&(s.classes=t._resolveClassesValues(s.classes,a)),r[i](s);var l=r[i]("widget");e.data(l[0],"ui-controlgroup-data",a||r[i]("instance")),n.push(l[0])}}))))})),this.childWidgets=e(e.uniqueSort(n)),this._addClass(this.childWidgets,"ui-controlgroup-item")},_callChildMethod:function(t){this.childWidgets.each((function(){var n=e(this).data("ui-controlgroup-data");n&&n[t]&&n[t]()}))},_updateCornerClass:function(e,t){var n=this._buildSimpleOptions(t,"label").classes.label;this._removeClass(e,null,"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"),this._addClass(e,null,n)},_buildSimpleOptions:function(e,t){var n="vertical"===this.options.direction,i={classes:{}};return i.classes[t]={middle:"",first:"ui-corner-"+(n?"top":"left"),last:"ui-corner-"+(n?"bottom":"right"),only:"ui-corner-all"}[e],i},_spinnerOptions:function(e){var t=this._buildSimpleOptions(e,"ui-spinner");return t.classes["ui-spinner-up"]="",t.classes["ui-spinner-down"]="",t},_buttonOptions:function(e){return this._buildSimpleOptions(e,"ui-button")},_checkboxradioOptions:function(e){return this._buildSimpleOptions(e,"ui-checkboxradio-label")},_selectmenuOptions:function(e){var t="vertical"===this.options.direction;return{width:!!t&&"auto",classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(t?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(t?"top":"left")},last:{"ui-selectmenu-button-open":t?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(t?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[e]}},_resolveClassesValues:function(t,n){var i={};return e.each(t,(function(e){var r=n.options.classes[e]||"";r=String.prototype.trim.call(r.replace(P,"")),i[e]=(r+" "+t[e]).replace(/\s+/g," ")})),i},_setOption:function(e,t){"direction"===e&&this._removeClass("ui-controlgroup-"+this.options.direction),this._super(e,t),"disabled"!==e?this.refresh():this._callChildMethod(t?"disable":"enable")},refresh:function(){var t,n=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction),"horizontal"===this.options.direction&&this._addClass(null,"ui-helper-clearfix"),this._initWidgets(),t=this.childWidgets,this.options.onlyVisible&&(t=t.filter(":visible")),t.length&&(e.each(["first","last"],(function(e,i){var r=t[i]().data("ui-controlgroup-data");if(r&&n["_"+r.widgetName+"Options"]){var a=n["_"+r.widgetName+"Options"](1===t.length?"only":i);a.classes=n._resolveClassesValues(a.classes,r),r.element[r.widgetName](a)}else n._updateCornerClass(t[i](),i)})),this._callChildMethod("refresh"))}}),e.widget("ui.checkboxradio",[e.ui.formResetMixin,{version:"1.13.2",options:{disabled:null,label:null,icon:!0,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function(){var t,n,i,r=this._super()||{};return this._readType(),n=this.element.labels(),this.label=e(n[n.length-1]),this.label.length||e.error("No label found for checkboxradio widget"),this.originalLabel="",(i=this.label.contents().not(this.element[0])).length&&(this.originalLabel+=i.clone().wrapAll("<div></div>").parent().html()),this.originalLabel&&(r.label=this.originalLabel),null!=(t=this.element[0].disabled)&&(r.disabled=t),r},_create:function(){var e=this.element[0].checked;this._bindFormResetHandler(),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled),this._setOption("disabled",this.options.disabled),this._addClass("ui-checkboxradio","ui-helper-hidden-accessible"),this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget"),"radio"===this.type&&this._addClass(this.label,"ui-checkboxradio-radio-label"),this.options.label&&this.options.label!==this.originalLabel?this._updateLabel():this.originalLabel&&(this.options.label=this.originalLabel),this._enhance(),e&&this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active"),this._on({change:"_toggleClasses",focus:function(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus")},blur:function(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus")}})},_readType:function(){var t=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type,"input"===t&&/radio|checkbox/.test(this.type)||e.error("Can't create checkboxradio on element.nodeName="+t+" and element.type="+this.type)},_enhance:function(){this._updateIcon(this.element[0].checked)},widget:function(){return this.label},_getRadioGroup:function(){var t=this.element[0].name,n="input[name='"+e.escapeSelector(t)+"']";return t?(this.form.length?e(this.form[0].elements).filter(n):e(n).filter((function(){return 0===e(this)._form().length}))).not(this.element):e([])},_toggleClasses:function(){var t=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",t),this.options.icon&&"checkbox"===this.type&&this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",t)._toggleClass(this.icon,null,"ui-icon-blank",!t),"radio"===this.type&&this._getRadioGroup().each((function(){var t=e(this).checkboxradio("instance");t&&t._removeClass(t.label,"ui-checkboxradio-checked","ui-state-active")}))},_destroy:function(){this._unbindFormResetHandler(),this.icon&&(this.icon.remove(),this.iconSpace.remove())},_setOption:function(e,t){if("label"!==e||t){if(this._super(e,t),"disabled"===e)return this._toggleClass(this.label,null,"ui-state-disabled",t),void(this.element[0].disabled=t);this.refresh()}},_updateIcon:function(t){var n="ui-icon ui-icon-background ";this.options.icon?(this.icon||(this.icon=e("<span>"),this.iconSpace=e("<span> </span>"),this._addClass(this.iconSpace,"ui-checkboxradio-icon-space")),"checkbox"===this.type?(n+=t?"ui-icon-check ui-state-checked":"ui-icon-blank",this._removeClass(this.icon,null,t?"ui-icon-blank":"ui-icon-check")):n+="ui-icon-blank",this._addClass(this.icon,"ui-checkboxradio-icon",n),t||this._removeClass(this.icon,null,"ui-icon-check ui-state-checked"),this.icon.prependTo(this.label).after(this.iconSpace)):void 0!==this.icon&&(this.icon.remove(),this.iconSpace.remove(),delete this.icon)},_updateLabel:function(){var e=this.label.contents().not(this.element[0]);this.icon&&(e=e.not(this.icon[0])),this.iconSpace&&(e=e.not(this.iconSpace[0])),e.remove(),this.label.append(this.options.label)},refresh:function(){var e=this.element[0].checked,t=this.element[0].disabled;this._updateIcon(e),this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",e),null!==this.options.label&&this._updateLabel(),t!==this.options.disabled&&this._setOptions({disabled:t})}}]),e.ui.checkboxradio,e.widget("ui.button",{version:"1.13.2",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var e,t=this._super()||{};return this.isInput=this.element.is("input"),null!=(e=this.element[0].disabled)&&(t.disabled=e),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(t.label=this.originalLabel),t},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(t){t.keyCode===e.ui.keyCode.SPACE&&(t.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(t,n){var i="iconPosition"!==t,r=i?this.options.iconPosition:n,a="top"===r||"bottom"===r;this.icon?i&&this._removeClass(this.icon,null,this.options.icon):(this.icon=e("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),i&&this._addClass(this.icon,null,n),this._attachIcon(r),a?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=e("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(r))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(e){this.icon[/^(?:end|bottom)/.test(e)?"before":"after"](this.iconSpace)},_attachIcon:function(e){this.element[/^(?:end|bottom)/.test(e)?"append":"prepend"](this.icon)},_setOptions:function(e){var t=void 0===e.showLabel?this.options.showLabel:e.showLabel,n=void 0===e.icon?this.options.icon:e.icon;t||n||(e.showLabel=!0),this._super(e)},_setOption:function(e,t){"icon"===e&&(t?this._updateIcon(e,t):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===e&&this._updateIcon(e,t),"showLabel"===e&&(this._toggleClass("ui-button-icon-only",null,!t),this._updateTooltip()),"label"===e&&(this.isInput?this.element.val(t):(this.element.html(t),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(e,t),"disabled"===e&&(this._toggleClass(null,"ui-state-disabled",t),this.element[0].disabled=t,t&&this.element.trigger("blur"))},refresh:function(){var e=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");e!==this.options.disabled&&this._setOptions({disabled:e}),this._updateTooltip()}}),!1!==e.uiBackCompat&&(e.widget("ui.button",e.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(e,t){"text"!==e?("showLabel"===e&&(this.options.text=t),"icon"===e&&(this.options.icons.primary=t),"icons"===e&&(t.primary?(this._super("icon",t.primary),this._super("iconPosition","beginning")):t.secondary&&(this._super("icon",t.secondary),this._super("iconPosition","end"))),this._superApply(arguments)):this._super("showLabel",t)}}),e.fn.button=function(t){return function(n){var i="string"==typeof n,r=Array.prototype.slice.call(arguments,1),a=this;return i?this.length||"instance"!==n?this.each((function(){var t,i=e(this).attr("type"),o="checkbox"!==i&&"radio"!==i?"button":"checkboxradio",s=e.data(this,"ui-"+o);return"instance"===n?(a=s,!1):s?"function"!=typeof s[n]||"_"===n.charAt(0)?e.error("no such method '"+n+"' for button widget instance"):(t=s[n].apply(s,r))!==s&&void 0!==t?(a=t&&t.jquery?a.pushStack(t.get()):t,!1):void 0:e.error("cannot call methods on button prior to initialization; attempted to call method '"+n+"'")})):a=void 0:(r.length&&(n=e.widget.extend.apply(null,[n].concat(r))),this.each((function(){var i=e(this).attr("type"),r="checkbox"!==i&&"radio"!==i?"button":"checkboxradio",a=e.data(this,"ui-"+r);if(a)a.option(n||{}),a._init&&a._init();else{if("button"===r)return void t.call(e(this),n);e(this).checkboxradio(e.extend({icon:!1},n))}}))),a}}(e.fn.button),e.fn.buttonset=function(){return e.ui.controlgroup||e.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),e.ui.button,e.extend(e.ui,{datepicker:{version:"1.13.2"}}),e.extend(I.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return M(this._defaults,e||{}),this},_attachDatepicker:function(t,n){var i,r,a;r="div"===(i=t.nodeName.toLowerCase())||"span"===i,t.id||(this.uuid+=1,t.id="dp"+this.uuid),(a=this._newInst(e(t),r)).settings=e.extend({},n||{}),"input"===i?this._connectDatepicker(t,a):r&&this._inlineDatepicker(t,a)},_newInst:function(t,n){return{id:t[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1"),input:t,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:n,dpDiv:n?N(e("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(t,n){var i=e(t);n.append=e([]),n.trigger=e([]),i.hasClass(this.markerClassName)||(this._attachments(i,n),i.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(n),e.data(t,"datepicker",n),n.settings.disabled&&this._disableDatepicker(t))},_attachments:function(t,n){var i,r,a,o=this._get(n,"appendText"),s=this._get(n,"isRTL");n.append&&n.append.remove(),o&&(n.append=e("<span>").addClass(this._appendClass).text(o),t[s?"before":"after"](n.append)),t.off("focus",this._showDatepicker),n.trigger&&n.trigger.remove(),"focus"!==(i=this._get(n,"showOn"))&&"both"!==i||t.on("focus",this._showDatepicker),"button"!==i&&"both"!==i||(r=this._get(n,"buttonText"),a=this._get(n,"buttonImage"),this._get(n,"buttonImageOnly")?n.trigger=e("<img>").addClass(this._triggerClass).attr({src:a,alt:r,title:r}):(n.trigger=e("<button type='button'>").addClass(this._triggerClass),a?n.trigger.html(e("<img>").attr({src:a,alt:r,title:r})):n.trigger.text(r)),t[s?"before":"after"](n.trigger),n.trigger.on("click",(function(){return e.datepicker._datepickerShowing&&e.datepicker._lastInput===t[0]?e.datepicker._hideDatepicker():e.datepicker._datepickerShowing&&e.datepicker._lastInput!==t[0]?(e.datepicker._hideDatepicker(),e.datepicker._showDatepicker(t[0])):e.datepicker._showDatepicker(t[0]),!1})))},_autoSize:function(e){if(this._get(e,"autoSize")&&!e.inline){var t,n,i,r,a=new Date(2009,11,20),o=this._get(e,"dateFormat");o.match(/[DM]/)&&(t=function(e){for(n=0,i=0,r=0;r<e.length;r++)e[r].length>n&&(n=e[r].length,i=r);return i},a.setMonth(t(this._get(e,o.match(/MM/)?"monthNames":"monthNamesShort"))),a.setDate(t(this._get(e,o.match(/DD/)?"dayNames":"dayNamesShort"))+20-a.getDay())),e.input.attr("size",this._formatDate(e,a).length)}},_inlineDatepicker:function(t,n){var i=e(t);i.hasClass(this.markerClassName)||(i.addClass(this.markerClassName).append(n.dpDiv),e.data(t,"datepicker",n),this._setDate(n,this._getDefaultDate(n),!0),this._updateDatepicker(n),this._updateAlternate(n),n.settings.disabled&&this._disableDatepicker(t),n.dpDiv.css("display","block"))},_dialogDatepicker:function(t,n,i,r,a){var o,s,l,u,c,d=this._dialogInst;return d||(this.uuid+=1,o="dp"+this.uuid,this._dialogInput=e("<input type='text' id='"+o+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),e("body").append(this._dialogInput),(d=this._dialogInst=this._newInst(this._dialogInput,!1)).settings={},e.data(this._dialogInput[0],"datepicker",d)),M(d.settings,r||{}),n=n&&n.constructor===Date?this._formatDate(d,n):n,this._dialogInput.val(n),this._pos=a?a.length?a:[a.pageX,a.pageY]:null,this._pos||(s=document.documentElement.clientWidth,l=document.documentElement.clientHeight,u=document.documentElement.scrollLeft||document.body.scrollLeft,c=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[s/2-100+u,l/2-150+c]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),d.settings.onSelect=i,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),e.blockUI&&e.blockUI(this.dpDiv),e.data(this._dialogInput[0],"datepicker",d),this},_destroyDatepicker:function(t){var n,i=e(t),r=e.data(t,"datepicker");i.hasClass(this.markerClassName)&&(n=t.nodeName.toLowerCase(),e.removeData(t,"datepicker"),"input"===n?(r.append.remove(),r.trigger.remove(),i.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):"div"!==n&&"span"!==n||i.removeClass(this.markerClassName).empty(),D===r&&(D=null,this._curInst=null))},_enableDatepicker:function(t){var n,i,r=e(t),a=e.data(t,"datepicker");r.hasClass(this.markerClassName)&&("input"===(n=t.nodeName.toLowerCase())?(t.disabled=!1,a.trigger.filter("button").each((function(){this.disabled=!1})).end().filter("img").css({opacity:"1.0",cursor:""})):"div"!==n&&"span"!==n||((i=r.children("."+this._inlineClass)).children().removeClass("ui-state-disabled"),i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=e.map(this._disabledInputs,(function(e){return e===t?null:e})))},_disableDatepicker:function(t){var n,i,r=e(t),a=e.data(t,"datepicker");r.hasClass(this.markerClassName)&&("input"===(n=t.nodeName.toLowerCase())?(t.disabled=!0,a.trigger.filter("button").each((function(){this.disabled=!0})).end().filter("img").css({opacity:"0.5",cursor:"default"})):"div"!==n&&"span"!==n||((i=r.children("."+this._inlineClass)).children().addClass("ui-state-disabled"),i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=e.map(this._disabledInputs,(function(e){return e===t?null:e})),this._disabledInputs[this._disabledInputs.length]=t)},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;t<this._disabledInputs.length;t++)if(this._disabledInputs[t]===e)return!0;return!1},_getInst:function(t){try{return e.data(t,"datepicker")}catch(e){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(t,n,i){var r,a,o,s,l=this._getInst(t);if(2===arguments.length&&"string"==typeof n)return"defaults"===n?e.extend({},e.datepicker._defaults):l?"all"===n?e.extend({},l.settings):this._get(l,n):null;r=n||{},"string"==typeof n&&((r={})[n]=i),l&&(this._curInst===l&&this._hideDatepicker(),a=this._getDateDatepicker(t,!0),o=this._getMinMaxDate(l,"min"),s=this._getMinMaxDate(l,"max"),M(l.settings,r),null!==o&&void 0!==r.dateFormat&&void 0===r.minDate&&(l.settings.minDate=this._formatDate(l,o)),null!==s&&void 0!==r.dateFormat&&void 0===r.maxDate&&(l.settings.maxDate=this._formatDate(l,s)),"disabled"in r&&(r.disabled?this._disableDatepicker(t):this._enableDatepicker(t)),this._attachments(e(t),l),this._autoSize(l),this._setDate(l,a),this._updateAlternate(l),this._updateDatepicker(l))},_changeDatepicker:function(e,t,n){this._optionDatepicker(e,t,n)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var n=this._getInst(e);n&&(this._setDate(n,t),this._updateDatepicker(n),this._updateAlternate(n))},_getDateDatepicker:function(e,t){var n=this._getInst(e);return n&&!n.inline&&this._setDateFromField(n,t),n?this._getDate(n):null},_doKeyDown:function(t){var n,i,r,a=e.datepicker._getInst(t.target),o=!0,s=a.dpDiv.is(".ui-datepicker-rtl");if(a._keyEvent=!0,e.datepicker._datepickerShowing)switch(t.keyCode){case 9:e.datepicker._hideDatepicker(),o=!1;break;case 13:return(r=e("td."+e.datepicker._dayOverClass+":not(."+e.datepicker._currentClass+")",a.dpDiv))[0]&&e.datepicker._selectDay(t.target,a.selectedMonth,a.selectedYear,r[0]),(n=e.datepicker._get(a,"onSelect"))?(i=e.datepicker._formatDate(a),n.apply(a.input?a.input[0]:null,[i,a])):e.datepicker._hideDatepicker(),!1;case 27:e.datepicker._hideDatepicker();break;case 33:e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(a,"stepBigMonths"):-e.datepicker._get(a,"stepMonths"),"M");break;case 34:e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(a,"stepBigMonths"):+e.datepicker._get(a,"stepMonths"),"M");break;case 35:(t.ctrlKey||t.metaKey)&&e.datepicker._clearDate(t.target),o=t.ctrlKey||t.metaKey;break;case 36:(t.ctrlKey||t.metaKey)&&e.datepicker._gotoToday(t.target),o=t.ctrlKey||t.metaKey;break;case 37:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,s?1:-1,"D"),o=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(a,"stepBigMonths"):-e.datepicker._get(a,"stepMonths"),"M");break;case 38:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,-7,"D"),o=t.ctrlKey||t.metaKey;break;case 39:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,s?-1:1,"D"),o=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(a,"stepBigMonths"):+e.datepicker._get(a,"stepMonths"),"M");break;case 40:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,7,"D"),o=t.ctrlKey||t.metaKey;break;default:o=!1}else 36===t.keyCode&&t.ctrlKey?e.datepicker._showDatepicker(this):o=!1;o&&(t.preventDefault(),t.stopPropagation())},_doKeyPress:function(t){var n,i,r=e.datepicker._getInst(t.target);if(e.datepicker._get(r,"constrainInput"))return n=e.datepicker._possibleChars(e.datepicker._get(r,"dateFormat")),i=String.fromCharCode(null==t.charCode?t.keyCode:t.charCode),t.ctrlKey||t.metaKey||i<" "||!n||n.indexOf(i)>-1},_doKeyUp:function(t){var n=e.datepicker._getInst(t.target);if(n.input.val()!==n.lastVal)try{e.datepicker.parseDate(e.datepicker._get(n,"dateFormat"),n.input?n.input.val():null,e.datepicker._getFormatConfig(n))&&(e.datepicker._setDateFromField(n),e.datepicker._updateAlternate(n),e.datepicker._updateDatepicker(n))}catch(e){}return!0},_showDatepicker:function(t){var n,i,r,a,o,s,l;"input"!==(t=t.target||t).nodeName.toLowerCase()&&(t=e("input",t.parentNode)[0]),e.datepicker._isDisabledDatepicker(t)||e.datepicker._lastInput===t||(n=e.datepicker._getInst(t),e.datepicker._curInst&&e.datepicker._curInst!==n&&(e.datepicker._curInst.dpDiv.stop(!0,!0),n&&e.datepicker._datepickerShowing&&e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])),!1!==(r=(i=e.datepicker._get(n,"beforeShow"))?i.apply(t,[t,n]):{})&&(M(n.settings,r),n.lastVal=null,e.datepicker._lastInput=t,e.datepicker._setDateFromField(n),e.datepicker._inDialog&&(t.value=""),e.datepicker._pos||(e.datepicker._pos=e.datepicker._findPos(t),e.datepicker._pos[1]+=t.offsetHeight),a=!1,e(t).parents().each((function(){return!(a|="fixed"===e(this).css("position"))})),o={left:e.datepicker._pos[0],top:e.datepicker._pos[1]},e.datepicker._pos=null,n.dpDiv.empty(),n.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),e.datepicker._updateDatepicker(n),o=e.datepicker._checkOffset(n,o,a),n.dpDiv.css({position:e.datepicker._inDialog&&e.blockUI?"static":a?"fixed":"absolute",display:"none",left:o.left+"px",top:o.top+"px"}),n.inline||(s=e.datepicker._get(n,"showAnim"),l=e.datepicker._get(n,"duration"),n.dpDiv.css("z-index",function(e){for(var t,n;e.length&&e[0]!==document;){if(("absolute"===(t=e.css("position"))||"relative"===t||"fixed"===t)&&(n=parseInt(e.css("zIndex"),10),!isNaN(n)&&0!==n))return n;e=e.parent()}return 0}(e(t))+1),e.datepicker._datepickerShowing=!0,e.effects&&e.effects.effect[s]?n.dpDiv.show(s,e.datepicker._get(n,"showOptions"),l):n.dpDiv[s||"show"](s?l:null),e.datepicker._shouldFocusInput(n)&&n.input.trigger("focus"),e.datepicker._curInst=n)))},_updateDatepicker:function(t){this.maxRows=4,D=t,t.dpDiv.empty().append(this._generateHTML(t)),this._attachHandlers(t);var n,i=this._getNumberOfMonths(t),r=i[1],a=t.dpDiv.find("."+this._dayOverClass+" a"),o=e.datepicker._get(t,"onUpdateDatepicker");a.length>0&&O.apply(a.get(0)),t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),r>1&&t.dpDiv.addClass("ui-datepicker-multi-"+r).css("width",17*r+"em"),t.dpDiv[(1!==i[0]||1!==i[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),t.dpDiv[(this._get(t,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),t===e.datepicker._curInst&&e.datepicker._datepickerShowing&&e.datepicker._shouldFocusInput(t)&&t.input.trigger("focus"),t.yearshtml&&(n=t.yearshtml,setTimeout((function(){n===t.yearshtml&&t.yearshtml&&t.dpDiv.find("select.ui-datepicker-year").first().replaceWith(t.yearshtml),n=t.yearshtml=null}),0)),o&&o.apply(t.input?t.input[0]:null,[t])},_shouldFocusInput:function(e){return e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&!e.input.is(":focus")},_checkOffset:function(t,n,i){var r=t.dpDiv.outerWidth(),a=t.dpDiv.outerHeight(),o=t.input?t.input.outerWidth():0,s=t.input?t.input.outerHeight():0,l=document.documentElement.clientWidth+(i?0:e(document).scrollLeft()),u=document.documentElement.clientHeight+(i?0:e(document).scrollTop());return n.left-=this._get(t,"isRTL")?r-o:0,n.left-=i&&n.left===t.input.offset().left?e(document).scrollLeft():0,n.top-=i&&n.top===t.input.offset().top+s?e(document).scrollTop():0,n.left-=Math.min(n.left,n.left+r>l&&l>r?Math.abs(n.left+r-l):0),n.top-=Math.min(n.top,n.top+a>u&&u>a?Math.abs(a+s):0),n},_findPos:function(t){for(var n,i=this._getInst(t),r=this._get(i,"isRTL");t&&("hidden"===t.type||1!==t.nodeType||e.expr.pseudos.hidden(t));)t=t[r?"previousSibling":"nextSibling"];return[(n=e(t).offset()).left,n.top]},_hideDatepicker:function(t){var n,i,r,a,o=this._curInst;!o||t&&o!==e.data(t,"datepicker")||this._datepickerShowing&&(n=this._get(o,"showAnim"),i=this._get(o,"duration"),r=function(){e.datepicker._tidyDialog(o)},e.effects&&(e.effects.effect[n]||e.effects[n])?o.dpDiv.hide(n,e.datepicker._get(o,"showOptions"),i,r):o.dpDiv["slideDown"===n?"slideUp":"fadeIn"===n?"fadeOut":"hide"](n?i:null,r),n||r(),this._datepickerShowing=!1,(a=this._get(o,"onClose"))&&a.apply(o.input?o.input[0]:null,[o.input?o.input.val():"",o]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),e.blockUI&&(e.unblockUI(),e("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(t){if(e.datepicker._curInst){var n=e(t.target),i=e.datepicker._getInst(n[0]);(n[0].id===e.datepicker._mainDivId||0!==n.parents("#"+e.datepicker._mainDivId).length||n.hasClass(e.datepicker.markerClassName)||n.closest("."+e.datepicker._triggerClass).length||!e.datepicker._datepickerShowing||e.datepicker._inDialog&&e.blockUI)&&(!n.hasClass(e.datepicker.markerClassName)||e.datepicker._curInst===i)||e.datepicker._hideDatepicker()}},_adjustDate:function(t,n,i){var r=e(t),a=this._getInst(r[0]);this._isDisabledDatepicker(r[0])||(this._adjustInstDate(a,n,i),this._updateDatepicker(a))},_gotoToday:function(t){var n,i=e(t),r=this._getInst(i[0]);this._get(r,"gotoCurrent")&&r.currentDay?(r.selectedDay=r.currentDay,r.drawMonth=r.selectedMonth=r.currentMonth,r.drawYear=r.selectedYear=r.currentYear):(n=new Date,r.selectedDay=n.getDate(),r.drawMonth=r.selectedMonth=n.getMonth(),r.drawYear=r.selectedYear=n.getFullYear()),this._notifyChange(r),this._adjustDate(i)},_selectMonthYear:function(t,n,i){var r=e(t),a=this._getInst(r[0]);a["selected"+("M"===i?"Month":"Year")]=a["draw"+("M"===i?"Month":"Year")]=parseInt(n.options[n.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(r)},_selectDay:function(t,n,i,r){var a,o=e(t);e(r).hasClass(this._unselectableClass)||this._isDisabledDatepicker(o[0])||((a=this._getInst(o[0])).selectedDay=a.currentDay=parseInt(e("a",r).attr("data-date")),a.selectedMonth=a.currentMonth=n,a.selectedYear=a.currentYear=i,this._selectDate(t,this._formatDate(a,a.currentDay,a.currentMonth,a.currentYear)))},_clearDate:function(t){var n=e(t);this._selectDate(n,"")},_selectDate:function(t,n){var i,r=e(t),a=this._getInst(r[0]);n=null!=n?n:this._formatDate(a),a.input&&a.input.val(n),this._updateAlternate(a),(i=this._get(a,"onSelect"))?i.apply(a.input?a.input[0]:null,[n,a]):a.input&&a.input.trigger("change"),a.inline?this._updateDatepicker(a):(this._hideDatepicker(),this._lastInput=a.input[0],"object"!=typeof a.input[0]&&a.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(t){var n,i,r,a=this._get(t,"altField");a&&(n=this._get(t,"altFormat")||this._get(t,"dateFormat"),i=this._getDate(t),r=this.formatDate(n,i,this._getFormatConfig(t)),e(document).find(a).val(r))},noWeekends:function(e){var t=e.getDay();return[t>0&&t<6,""]},iso8601Week:function(e){var t,n=new Date(e.getTime());return n.setDate(n.getDate()+4-(n.getDay()||7)),t=n.getTime(),n.setMonth(0),n.setDate(1),Math.floor(Math.round((t-n)/864e5)/7)+1},parseDate:function(t,n,i){if(null==t||null==n)throw"Invalid arguments";if(""===(n="object"==typeof n?n.toString():n+""))return null;var r,a,o,s,l=0,u=(i?i.shortYearCutoff:null)||this._defaults.shortYearCutoff,c="string"!=typeof u?u:(new Date).getFullYear()%100+parseInt(u,10),d=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,h=(i?i.dayNames:null)||this._defaults.dayNames,p=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,f=(i?i.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,b=-1,v=-1,y=!1,_=function(e){var n=r+1<t.length&&t.charAt(r+1)===e;return n&&r++,n},w=function(e){var t=_(e),i="@"===e?14:"!"===e?20:"y"===e&&t?4:"o"===e?3:2,r=new RegExp("^\\d{"+("y"===e?i:1)+","+i+"}"),a=n.substring(l).match(r);if(!a)throw"Missing number at position "+l;return l+=a[0].length,parseInt(a[0],10)},A=function(t,i,r){var a=-1,o=e.map(_(t)?r:i,(function(e,t){return[[t,e]]})).sort((function(e,t){return-(e[1].length-t[1].length)}));if(e.each(o,(function(e,t){var i=t[1];if(n.substr(l,i.length).toLowerCase()===i.toLowerCase())return a=t[0],l+=i.length,!1})),-1!==a)return a+1;throw"Unknown name at position "+l},x=function(){if(n.charAt(l)!==t.charAt(r))throw"Unexpected literal at position "+l;l++};for(r=0;r<t.length;r++)if(y)"'"!==t.charAt(r)||_("'")?x():y=!1;else switch(t.charAt(r)){case"d":b=w("d");break;case"D":A("D",d,h);break;case"o":v=w("o");break;case"m":m=w("m");break;case"M":m=A("M",p,f);break;case"y":g=w("y");break;case"@":g=(s=new Date(w("@"))).getFullYear(),m=s.getMonth()+1,b=s.getDate();break;case"!":g=(s=new Date((w("!")-this._ticksTo1970)/1e4)).getFullYear(),m=s.getMonth()+1,b=s.getDate();break;case"'":_("'")?x():y=!0;break;default:x()}if(l<n.length&&(o=n.substr(l),!/^\s+/.test(o)))throw"Extra/unparsed characters found in date: "+o;if(-1===g?g=(new Date).getFullYear():g<100&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(g<=c?0:-100)),v>-1)for(m=1,b=v;!(b<=(a=this._getDaysInMonth(g,m-1)));)m++,b-=a;if((s=this._daylightSavingAdjust(new Date(g,m-1,b))).getFullYear()!==g||s.getMonth()+1!==m||s.getDate()!==b)throw"Invalid date";return s},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*60*60*1e7,formatDate:function(e,t,n){if(!t)return"";var i,r=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,a=(n?n.dayNames:null)||this._defaults.dayNames,o=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,s=(n?n.monthNames:null)||this._defaults.monthNames,l=function(t){var n=i+1<e.length&&e.charAt(i+1)===t;return n&&i++,n},u=function(e,t,n){var i=""+t;if(l(e))for(;i.length<n;)i="0"+i;return i},c=function(e,t,n,i){return l(e)?i[t]:n[t]},d="",h=!1;if(t)for(i=0;i<e.length;i++)if(h)"'"!==e.charAt(i)||l("'")?d+=e.charAt(i):h=!1;else switch(e.charAt(i)){case"d":d+=u("d",t.getDate(),2);break;case"D":d+=c("D",t.getDay(),r,a);break;case"o":d+=u("o",Math.round((new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime()-new Date(t.getFullYear(),0,0).getTime())/864e5),3);break;case"m":d+=u("m",t.getMonth()+1,2);break;case"M":d+=c("M",t.getMonth(),o,s);break;case"y":d+=l("y")?t.getFullYear():(t.getFullYear()%100<10?"0":"")+t.getFullYear()%100;break;case"@":d+=t.getTime();break;case"!":d+=1e4*t.getTime()+this._ticksTo1970;break;case"'":l("'")?d+="'":h=!0;break;default:d+=e.charAt(i)}return d},_possibleChars:function(e){var t,n="",i=!1,r=function(n){var i=t+1<e.length&&e.charAt(t+1)===n;return i&&t++,i};for(t=0;t<e.length;t++)if(i)"'"!==e.charAt(t)||r("'")?n+=e.charAt(t):i=!1;else switch(e.charAt(t)){case"d":case"m":case"y":case"@":n+="0123456789";break;case"D":case"M":return null;case"'":r("'")?n+="'":i=!0;break;default:n+=e.charAt(t)}return n},_get:function(e,t){return void 0!==e.settings[t]?e.settings[t]:this._defaults[t]},_setDateFromField:function(e,t){if(e.input.val()!==e.lastVal){var n=this._get(e,"dateFormat"),i=e.lastVal=e.input?e.input.val():null,r=this._getDefaultDate(e),a=r,o=this._getFormatConfig(e);try{a=this.parseDate(n,i,o)||r}catch(e){i=t?"":i}e.selectedDay=a.getDate(),e.drawMonth=e.selectedMonth=a.getMonth(),e.drawYear=e.selectedYear=a.getFullYear(),e.currentDay=i?a.getDate():0,e.currentMonth=i?a.getMonth():0,e.currentYear=i?a.getFullYear():0,this._adjustInstDate(e)}},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(t,n,i){var r=null==n||""===n?i:"string"==typeof n?function(n){try{return e.datepicker.parseDate(e.datepicker._get(t,"dateFormat"),n,e.datepicker._getFormatConfig(t))}catch(e){}for(var i=(n.toLowerCase().match(/^c/)?e.datepicker._getDate(t):null)||new Date,r=i.getFullYear(),a=i.getMonth(),o=i.getDate(),s=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=s.exec(n);l;){switch(l[2]||"d"){case"d":case"D":o+=parseInt(l[1],10);break;case"w":case"W":o+=7*parseInt(l[1],10);break;case"m":case"M":a+=parseInt(l[1],10),o=Math.min(o,e.datepicker._getDaysInMonth(r,a));break;case"y":case"Y":r+=parseInt(l[1],10),o=Math.min(o,e.datepicker._getDaysInMonth(r,a))}l=s.exec(n)}return new Date(r,a,o)}(n):"number"==typeof n?isNaN(n)?i:function(e){var t=new Date;return t.setDate(t.getDate()+e),t}(n):new Date(n.getTime());return(r=r&&"Invalid Date"===r.toString()?i:r)&&(r.setHours(0),r.setMinutes(0),r.setSeconds(0),r.setMilliseconds(0)),this._daylightSavingAdjust(r)},_daylightSavingAdjust:function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},_setDate:function(e,t,n){var i=!t,r=e.selectedMonth,a=e.selectedYear,o=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=o.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=o.getMonth(),e.drawYear=e.selectedYear=e.currentYear=o.getFullYear(),r===e.selectedMonth&&a===e.selectedYear||n||this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(i?"":this._formatDate(e))},_getDate:function(e){return!e.currentYear||e.input&&""===e.input.val()?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay))},_attachHandlers:function(t){var n=this._get(t,"stepMonths"),i="#"+t.id.replace(/\\\\/g,"\\");t.dpDiv.find("[data-handler]").map((function(){var t={prev:function(){e.datepicker._adjustDate(i,-n,"M")},next:function(){e.datepicker._adjustDate(i,+n,"M")},hide:function(){e.datepicker._hideDatepicker()},today:function(){e.datepicker._gotoToday(i)},selectDay:function(){return e.datepicker._selectDay(i,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return e.datepicker._selectMonthYear(i,this,"M"),!1},selectYear:function(){return e.datepicker._selectMonthYear(i,this,"Y"),!1}};e(this).on(this.getAttribute("data-event"),t[this.getAttribute("data-handler")])}))},_generateHTML:function(t){var n,i,r,a,o,s,l,u,c,d,h,p,f,g,m,b,v,y,_,w,A,x,C,k,T,S,E,D,P,I,N,O,M,B,z,j,L,R,H,F=new Date,W=this._daylightSavingAdjust(new Date(F.getFullYear(),F.getMonth(),F.getDate())),U=this._get(t,"isRTL"),q=this._get(t,"showButtonPanel"),Y=this._get(t,"hideIfNoPrevNext"),$=this._get(t,"navigationAsDateFormat"),V=this._getNumberOfMonths(t),K=this._get(t,"showCurrentAtPos"),G=this._get(t,"stepMonths"),Q=1!==V[0]||1!==V[1],X=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),J=this._getMinMaxDate(t,"min"),Z=this._getMinMaxDate(t,"max"),ee=t.drawMonth-K,te=t.drawYear;if(ee<0&&(ee+=12,te--),Z)for(n=this._daylightSavingAdjust(new Date(Z.getFullYear(),Z.getMonth()-V[0]*V[1]+1,Z.getDate())),n=J&&n<J?J:n;this._daylightSavingAdjust(new Date(te,ee,1))>n;)--ee<0&&(ee=11,te--);for(t.drawMonth=ee,t.drawYear=te,i=this._get(t,"prevText"),i=$?this.formatDate(i,this._daylightSavingAdjust(new Date(te,ee-G,1)),this._getFormatConfig(t)):i,r=this._canAdjustMonth(t,-1,te,ee)?e("<a>").attr({class:"ui-datepicker-prev ui-corner-all","data-handler":"prev","data-event":"click",title:i}).append(e("<span>").addClass("ui-icon ui-icon-circle-triangle-"+(U?"e":"w")).text(i))[0].outerHTML:Y?"":e("<a>").attr({class:"ui-datepicker-prev ui-corner-all ui-state-disabled",title:i}).append(e("<span>").addClass("ui-icon ui-icon-circle-triangle-"+(U?"e":"w")).text(i))[0].outerHTML,a=this._get(t,"nextText"),a=$?this.formatDate(a,this._daylightSavingAdjust(new Date(te,ee+G,1)),this._getFormatConfig(t)):a,o=this._canAdjustMonth(t,1,te,ee)?e("<a>").attr({class:"ui-datepicker-next ui-corner-all","data-handler":"next","data-event":"click",title:a}).append(e("<span>").addClass("ui-icon ui-icon-circle-triangle-"+(U?"w":"e")).text(a))[0].outerHTML:Y?"":e("<a>").attr({class:"ui-datepicker-next ui-corner-all ui-state-disabled",title:a}).append(e("<span>").attr("class","ui-icon ui-icon-circle-triangle-"+(U?"w":"e")).text(a))[0].outerHTML,s=this._get(t,"currentText"),l=this._get(t,"gotoCurrent")&&t.currentDay?X:W,s=$?this.formatDate(s,l,this._getFormatConfig(t)):s,u="",t.inline||(u=e("<button>").attr({type:"button",class:"ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all","data-handler":"hide","data-event":"click"}).text(this._get(t,"closeText"))[0].outerHTML),c="",q&&(c=e("<div class='ui-datepicker-buttonpane ui-widget-content'>").append(U?u:"").append(this._isInRange(t,l)?e("<button>").attr({type:"button",class:"ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all","data-handler":"today","data-event":"click"}).text(s):"").append(U?"":u)[0].outerHTML),d=parseInt(this._get(t,"firstDay"),10),d=isNaN(d)?0:d,h=this._get(t,"showWeek"),p=this._get(t,"dayNames"),f=this._get(t,"dayNamesMin"),g=this._get(t,"monthNames"),m=this._get(t,"monthNamesShort"),b=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),y=this._get(t,"selectOtherMonths"),_=this._getDefaultDate(t),w="",x=0;x<V[0];x++){for(C="",this.maxRows=4,k=0;k<V[1];k++){if(T=this._daylightSavingAdjust(new Date(te,ee,t.selectedDay)),S=" ui-corner-all",E="",Q){if(E+="<div class='ui-datepicker-group",V[1]>1)switch(k){case 0:E+=" ui-datepicker-group-first",S=" ui-corner-"+(U?"right":"left");break;case V[1]-1:E+=" ui-datepicker-group-last",S=" ui-corner-"+(U?"left":"right");break;default:E+=" ui-datepicker-group-middle",S=""}E+="'>"}for(E+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+S+"'>"+(/all|left/.test(S)&&0===x?U?o:r:"")+(/all|right/.test(S)&&0===x?U?r:o:"")+this._generateMonthYearHeader(t,ee,te,J,Z,x>0||k>0,g,m)+"</div><table class='ui-datepicker-calendar'><thead><tr>",D=h?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",A=0;A<7;A++)D+="<th scope='col'"+((A+d+6)%7>=5?" class='ui-datepicker-week-end'":"")+"><span title='"+p[P=(A+d)%7]+"'>"+f[P]+"</span></th>";for(E+=D+"</tr></thead><tbody>",I=this._getDaysInMonth(te,ee),te===t.selectedYear&&ee===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,I)),N=(this._getFirstDayOfMonth(te,ee)-d+7)%7,O=Math.ceil((N+I)/7),M=Q&&this.maxRows>O?this.maxRows:O,this.maxRows=M,B=this._daylightSavingAdjust(new Date(te,ee,1-N)),z=0;z<M;z++){for(E+="<tr>",j=h?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(B)+"</td>":"",A=0;A<7;A++)L=b?b.apply(t.input?t.input[0]:null,[B]):[!0,""],H=(R=B.getMonth()!==ee)&&!y||!L[0]||J&&B<J||Z&&B>Z,j+="<td class='"+((A+d+6)%7>=5?" ui-datepicker-week-end":"")+(R?" ui-datepicker-other-month":"")+(B.getTime()===T.getTime()&&ee===t.selectedMonth&&t._keyEvent||_.getTime()===B.getTime()&&_.getTime()===T.getTime()?" "+this._dayOverClass:"")+(H?" "+this._unselectableClass+" ui-state-disabled":"")+(R&&!v?"":" "+L[1]+(B.getTime()===X.getTime()?" "+this._currentClass:"")+(B.getTime()===W.getTime()?" ui-datepicker-today":""))+"'"+(R&&!v||!L[2]?"":" title='"+L[2].replace(/'/g,"&#39;")+"'")+(H?"":" data-handler='selectDay' data-event='click' data-month='"+B.getMonth()+"' data-year='"+B.getFullYear()+"'")+">"+(R&&!v?"&#xa0;":H?"<span class='ui-state-default'>"+B.getDate()+"</span>":"<a class='ui-state-default"+(B.getTime()===W.getTime()?" ui-state-highlight":"")+(B.getTime()===X.getTime()?" ui-state-active":"")+(R?" ui-priority-secondary":"")+"' href='#' aria-current='"+(B.getTime()===X.getTime()?"true":"false")+"' data-date='"+B.getDate()+"'>"+B.getDate()+"</a>")+"</td>",B.setDate(B.getDate()+1),B=this._daylightSavingAdjust(B);E+=j+"</tr>"}++ee>11&&(ee=0,te++),C+=E+="</tbody></table>"+(Q?"</div>"+(V[0]>0&&k===V[1]-1?"<div class='ui-datepicker-row-break'></div>":""):"")}w+=C}return w+=c,t._keyEvent=!1,w},_generateMonthYearHeader:function(e,t,n,i,r,a,o,s){var l,u,c,d,h,p,f,g,m=this._get(e,"changeMonth"),b=this._get(e,"changeYear"),v=this._get(e,"showMonthAfterYear"),y=this._get(e,"selectMonthLabel"),_=this._get(e,"selectYearLabel"),w="<div class='ui-datepicker-title'>",A="";if(a||!m)A+="<span class='ui-datepicker-month'>"+o[t]+"</span>";else{for(l=i&&i.getFullYear()===n,u=r&&r.getFullYear()===n,A+="<select class='ui-datepicker-month' aria-label='"+y+"' data-handler='selectMonth' data-event='change'>",c=0;c<12;c++)(!l||c>=i.getMonth())&&(!u||c<=r.getMonth())&&(A+="<option value='"+c+"'"+(c===t?" selected='selected'":"")+">"+s[c]+"</option>");A+="</select>"}if(v||(w+=A+(!a&&m&&b?"":"&#xa0;")),!e.yearshtml)if(e.yearshtml="",a||!b)w+="<span class='ui-datepicker-year'>"+n+"</span>";else{for(d=this._get(e,"yearRange").split(":"),h=(new Date).getFullYear(),p=function(e){var t=e.match(/c[+\-].*/)?n+parseInt(e.substring(1),10):e.match(/[+\-].*/)?h+parseInt(e,10):parseInt(e,10);return isNaN(t)?h:t},f=p(d[0]),g=Math.max(f,p(d[1]||"")),f=i?Math.max(f,i.getFullYear()):f,g=r?Math.min(g,r.getFullYear()):g,e.yearshtml+="<select class='ui-datepicker-year' aria-label='"+_+"' data-handler='selectYear' data-event='change'>";f<=g;f++)e.yearshtml+="<option value='"+f+"'"+(f===n?" selected='selected'":"")+">"+f+"</option>";e.yearshtml+="</select>",w+=e.yearshtml,e.yearshtml=null}return w+=this._get(e,"yearSuffix"),v&&(w+=(!a&&m&&b?"":"&#xa0;")+A),w+"</div>"},_adjustInstDate:function(e,t,n){var i=e.selectedYear+("Y"===n?t:0),r=e.selectedMonth+("M"===n?t:0),a=Math.min(e.selectedDay,this._getDaysInMonth(i,r))+("D"===n?t:0),o=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(i,r,a)));e.selectedDay=o.getDate(),e.drawMonth=e.selectedMonth=o.getMonth(),e.drawYear=e.selectedYear=o.getFullYear(),"M"!==n&&"Y"!==n||this._notifyChange(e)},_restrictMinMax:function(e,t){var n=this._getMinMaxDate(e,"min"),i=this._getMinMaxDate(e,"max"),r=n&&t<n?n:t;return i&&r>i?i:r},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return null==t?[1,1]:"number"==typeof t?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return new Date(e,t,1).getDay()},_canAdjustMonth:function(e,t,n,i){var r=this._getNumberOfMonths(e),a=this._daylightSavingAdjust(new Date(n,i+(t<0?t:r[0]*r[1]),1));return t<0&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(e,a)},_isInRange:function(e,t){var n,i,r=this._getMinMaxDate(e,"min"),a=this._getMinMaxDate(e,"max"),o=null,s=null,l=this._get(e,"yearRange");return l&&(n=l.split(":"),i=(new Date).getFullYear(),o=parseInt(n[0],10),s=parseInt(n[1],10),n[0].match(/[+\-].*/)&&(o+=i),n[1].match(/[+\-].*/)&&(s+=i)),(!r||t.getTime()>=r.getTime())&&(!a||t.getTime()<=a.getTime())&&(!o||t.getFullYear()>=o)&&(!s||t.getFullYear()<=s)},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return{shortYearCutoff:t="string"!=typeof t?t:(new Date).getFullYear()%100+parseInt(t,10),dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,n,i){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var r=t?"object"==typeof t?t:this._daylightSavingAdjust(new Date(i,n,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),r,this._getFormatConfig(e))}}),e.fn.datepicker=function(t){if(!this.length)return this;e.datepicker.initialized||(e(document).on("mousedown",e.datepicker._checkExternalClick),e.datepicker.initialized=!0),0===e("#"+e.datepicker._mainDivId).length&&e("body").append(e.datepicker.dpDiv);var n=Array.prototype.slice.call(arguments,1);return"string"!=typeof t||"isDisabled"!==t&&"getDate"!==t&&"widget"!==t?"option"===t&&2===arguments.length&&"string"==typeof arguments[1]?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(n)):this.each((function(){"string"==typeof t?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this].concat(n)):e.datepicker._attachDatepicker(this,t)})):e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(n))},e.datepicker=new I,e.datepicker.initialized=!1,e.datepicker.uuid=(new Date).getTime(),e.datepicker.version="1.13.2",e.datepicker,e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var B,z=!1;function j(e){return function(){var t=this.element.val();e.apply(this,arguments),this._refresh(),t!==this.element.val()&&this._trigger("change")}}e(document).on("mouseup",(function(){z=!1})),e.widget("ui.mouse",{version:"1.13.2",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,(function(e){return t._mouseDown(e)})).on("click."+this.widgetName,(function(n){if(!0===e.data(n.target,t.widgetName+".preventClickEvent"))return e.removeData(n.target,t.widgetName+".preventClickEvent"),n.stopImmediatePropagation(),!1})),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!z){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var n=this,i=1===t.which,r=!("string"!=typeof this.options.cancel||!t.target.nodeName)&&e(t.target).closest(this.options.cancel).length;return!(i&&!r&&this._mouseCapture(t)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout((function(){n.mouseDelayMet=!0}),this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=!1!==this._mouseStart(t),!this._mouseStarted)?(t.preventDefault(),0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return n._mouseMove(e)},this._mouseUpDelegate=function(e){return n._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),z=!0,0)))}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||document.documentMode<9)&&!t.button)return this._mouseUp(t);if(!t.which)if(t.originalEvent.altKey||t.originalEvent.ctrlKey||t.originalEvent.metaKey||t.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,t),this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,z=!1,t.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),e.ui.plugin={add:function(t,n,i){var r,a=e.ui[t].prototype;for(r in i)a.plugins[r]=a.plugins[r]||[],a.plugins[r].push([n,i[r]])},call:function(e,t,n,i){var r,a=e.plugins[t];if(a&&(i||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(r=0;r<a.length;r++)e.options[a[r][0]]&&a[r][1].apply(e.element,n)}},e.ui.safeBlur=function(t){t&&"body"!==t.nodeName.toLowerCase()&&e(t).trigger("blur")},e.widget("ui.draggable",e.ui.mouse,{version:"1.13.2",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(t){var n=this.options;return!(this.helper||n.disabled||e(t.target).closest(".ui-resizable-handle").length>0||(this.handle=this._getHandle(t),!this.handle||(this._blurActiveElement(t),this._blockFrames(!0===n.iframeFix?"iframe":n.iframeFix),0)))},_blockFrames:function(t){this.iframeBlocks=this.document.find(t).map((function(){var t=e(this);return e("<div>").css("position","absolute").appendTo(t.parent()).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()).offset(t.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(t){var n=e.ui.safeActiveElement(this.document[0]);e(t.target).closest(n).length||e.ui.safeBlur(n)},_mouseStart:function(t){var n=this.options;return this.helper=this._createHelper(t),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter((function(){return"fixed"===e(this).css("position")})).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(t),this.originalPosition=this.position=this._generatePosition(t,!1),this.originalPageX=t.pageX,this.originalPageY=t.pageY,n.cursorAt&&this._adjustOffsetFromHelper(n.cursorAt),this._setContainment(),!1===this._trigger("start",t)?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(t,n){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(t,!0),this.positionAbs=this._convertPositionTo("absolute"),!n){var i=this._uiHash();if(!1===this._trigger("drag",t,i))return this._mouseUp(new e.Event("mouseup",t)),!1;this.position=i.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var n=this,i=!1;return e.ui.ddmanager&&!this.options.dropBehaviour&&(i=e.ui.ddmanager.drop(this,t)),this.dropped&&(i=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!i||"valid"===this.options.revert&&i||!0===this.options.revert||"function"==typeof this.options.revert&&this.options.revert.call(this.element,i)?e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),(function(){!1!==n._trigger("stop",t)&&n._clear()})):!1!==this._trigger("stop",t)&&this._clear(),!1},_mouseUp:function(t){return this._unblockFrames(),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),this.handleElement.is(t.target)&&this.element.trigger("focus"),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new e.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(t){return!this.options.handle||!!e(t.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(t){var n=this.options,i="function"==typeof n.helper,r=i?e(n.helper.apply(this.element[0],[t])):"clone"===n.helper?this.element.clone().removeAttr("id"):this.element;return r.parents("body").length||r.appendTo("parent"===n.appendTo?this.element[0].parentNode:n.appendTo),i&&r[0]===this.element[0]&&this._setPositionRelative(),r[0]===this.element[0]||/(fixed|absolute)/.test(r.css("position"))||r.css("position","absolute"),r},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),Array.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var t=this.offsetParent.offset(),n=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==n&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.element.position(),t=this._isRootNode(this.scrollParent[0]);return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,n,i,r=this.options,a=this.document[0];this.relativeContainer=null,r.containment?"window"!==r.containment?"document"!==r.containment?r.containment.constructor!==Array?("parent"===r.containment&&(r.containment=this.helper[0].parentNode),(i=(n=e(r.containment))[0])&&(t=/(scroll|auto)/.test(n.css("overflow")),this.containment=[(parseInt(n.css("borderLeftWidth"),10)||0)+(parseInt(n.css("paddingLeft"),10)||0),(parseInt(n.css("borderTopWidth"),10)||0)+(parseInt(n.css("paddingTop"),10)||0),(t?Math.max(i.scrollWidth,i.offsetWidth):i.offsetWidth)-(parseInt(n.css("borderRightWidth"),10)||0)-(parseInt(n.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(t?Math.max(i.scrollHeight,i.offsetHeight):i.offsetHeight)-(parseInt(n.css("borderBottomWidth"),10)||0)-(parseInt(n.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=n)):this.containment=r.containment:this.containment=[0,0,e(a).width()-this.helperProportions.width-this.margins.left,(e(a).height()||a.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,e(window).scrollLeft()+e(window).width()-this.helperProportions.width-this.margins.left,e(window).scrollTop()+(e(window).height()||a.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(e,t){t||(t=this.position);var n="absolute"===e?1:-1,i=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.offset.scroll.top:i?0:this.offset.scroll.top)*n,left:t.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.offset.scroll.left:i?0:this.offset.scroll.left)*n}},_generatePosition:function(e,t){var n,i,r,a,o=this.options,s=this._isRootNode(this.scrollParent[0]),l=e.pageX,u=e.pageY;return s&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(this.relativeContainer?(i=this.relativeContainer.offset(),n=[this.containment[0]+i.left,this.containment[1]+i.top,this.containment[2]+i.left,this.containment[3]+i.top]):n=this.containment,e.pageX-this.offset.click.left<n[0]&&(l=n[0]+this.offset.click.left),e.pageY-this.offset.click.top<n[1]&&(u=n[1]+this.offset.click.top),e.pageX-this.offset.click.left>n[2]&&(l=n[2]+this.offset.click.left),e.pageY-this.offset.click.top>n[3]&&(u=n[3]+this.offset.click.top)),o.grid&&(r=o.grid[1]?this.originalPageY+Math.round((u-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,u=n?r-this.offset.click.top>=n[1]||r-this.offset.click.top>n[3]?r:r-this.offset.click.top>=n[1]?r-o.grid[1]:r+o.grid[1]:r,a=o.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,l=n?a-this.offset.click.left>=n[0]||a-this.offset.click.left>n[2]?a:a-this.offset.click.left>=n[0]?a-o.grid[0]:a+o.grid[0]:a),"y"===o.axis&&(l=this.originalPageX),"x"===o.axis&&(u=this.originalPageY)),{top:u-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(t,n,i){return i=i||this._uiHash(),e.ui.plugin.call(this,t,[n,i,this],!0),/^(drag|start|stop)/.test(t)&&(this.positionAbs=this._convertPositionTo("absolute"),i.offset=this.positionAbs),e.Widget.prototype._trigger.call(this,t,n,i)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,n,i){var r=e.extend({},n,{item:i.element});i.sortables=[],e(i.options.connectToSortable).each((function(){var n=e(this).sortable("instance");n&&!n.options.disabled&&(i.sortables.push(n),n.refreshPositions(),n._trigger("activate",t,r))}))},stop:function(t,n,i){var r=e.extend({},n,{item:i.element});i.cancelHelperRemoval=!1,e.each(i.sortables,(function(){var e=this;e.isOver?(e.isOver=0,i.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,r))}))},drag:function(t,n,i){e.each(i.sortables,(function(){var r=!1,a=this;a.positionAbs=i.positionAbs,a.helperProportions=i.helperProportions,a.offset.click=i.offset.click,a._intersectsWith(a.containerCache)&&(r=!0,e.each(i.sortables,(function(){return this.positionAbs=i.positionAbs,this.helperProportions=i.helperProportions,this.offset.click=i.offset.click,this!==a&&this._intersectsWith(this.containerCache)&&e.contains(a.element[0],this.element[0])&&(r=!1),r}))),r?(a.isOver||(a.isOver=1,i._parent=n.helper.parent(),a.currentItem=n.helper.appendTo(a.element).data("ui-sortable-item",!0),a.options._helper=a.options.helper,a.options.helper=function(){return n.helper[0]},t.target=a.currentItem[0],a._mouseCapture(t,!0),a._mouseStart(t,!0,!0),a.offset.click.top=i.offset.click.top,a.offset.click.left=i.offset.click.left,a.offset.parent.left-=i.offset.parent.left-a.offset.parent.left,a.offset.parent.top-=i.offset.parent.top-a.offset.parent.top,i._trigger("toSortable",t),i.dropped=a.element,e.each(i.sortables,(function(){this.refreshPositions()})),i.currentItem=i.element,a.fromOutside=i),a.currentItem&&(a._mouseDrag(t),n.position=a.position)):a.isOver&&(a.isOver=0,a.cancelHelperRemoval=!0,a.options._revert=a.options.revert,a.options.revert=!1,a._trigger("out",t,a._uiHash(a)),a._mouseStop(t,!0),a.options.revert=a.options._revert,a.options.helper=a.options._helper,a.placeholder&&a.placeholder.remove(),n.helper.appendTo(i._parent),i._refreshOffsets(t),n.position=i._generatePosition(t,!0),i._trigger("fromSortable",t),i.dropped=!1,e.each(i.sortables,(function(){this.refreshPositions()})))}))}}),e.ui.plugin.add("draggable","cursor",{start:function(t,n,i){var r=e("body"),a=i.options;r.css("cursor")&&(a._cursor=r.css("cursor")),r.css("cursor",a.cursor)},stop:function(t,n,i){var r=i.options;r._cursor&&e("body").css("cursor",r._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,n,i){var r=e(n.helper),a=i.options;r.css("opacity")&&(a._opacity=r.css("opacity")),r.css("opacity",a.opacity)},stop:function(t,n,i){var r=i.options;r._opacity&&e(n.helper).css("opacity",r._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(e,t,n){n.scrollParentNotHidden||(n.scrollParentNotHidden=n.helper.scrollParent(!1)),n.scrollParentNotHidden[0]!==n.document[0]&&"HTML"!==n.scrollParentNotHidden[0].tagName&&(n.overflowOffset=n.scrollParentNotHidden.offset())},drag:function(t,n,i){var r=i.options,a=!1,o=i.scrollParentNotHidden[0],s=i.document[0];o!==s&&"HTML"!==o.tagName?(r.axis&&"x"===r.axis||(i.overflowOffset.top+o.offsetHeight-t.pageY<r.scrollSensitivity?o.scrollTop=a=o.scrollTop+r.scrollSpeed:t.pageY-i.overflowOffset.top<r.scrollSensitivity&&(o.scrollTop=a=o.scrollTop-r.scrollSpeed)),r.axis&&"y"===r.axis||(i.overflowOffset.left+o.offsetWidth-t.pageX<r.scrollSensitivity?o.scrollLeft=a=o.scrollLeft+r.scrollSpeed:t.pageX-i.overflowOffset.left<r.scrollSensitivity&&(o.scrollLeft=a=o.scrollLeft-r.scrollSpeed))):(r.axis&&"x"===r.axis||(t.pageY-e(s).scrollTop()<r.scrollSensitivity?a=e(s).scrollTop(e(s).scrollTop()-r.scrollSpeed):e(window).height()-(t.pageY-e(s).scrollTop())<r.scrollSensitivity&&(a=e(s).scrollTop(e(s).scrollTop()+r.scrollSpeed))),r.axis&&"y"===r.axis||(t.pageX-e(s).scrollLeft()<r.scrollSensitivity?a=e(s).scrollLeft(e(s).scrollLeft()-r.scrollSpeed):e(window).width()-(t.pageX-e(s).scrollLeft())<r.scrollSensitivity&&(a=e(s).scrollLeft(e(s).scrollLeft()+r.scrollSpeed)))),!1!==a&&e.ui.ddmanager&&!r.dropBehaviour&&e.ui.ddmanager.prepareOffsets(i,t)}}),e.ui.plugin.add("draggable","snap",{start:function(t,n,i){var r=i.options;i.snapElements=[],e(r.snap.constructor!==String?r.snap.items||":data(ui-draggable)":r.snap).each((function(){var t=e(this),n=t.offset();this!==i.element[0]&&i.snapElements.push({item:this,width:t.outerWidth(),height:t.outerHeight(),top:n.top,left:n.left})}))},drag:function(t,n,i){var r,a,o,s,l,u,c,d,h,p,f=i.options,g=f.snapTolerance,m=n.offset.left,b=m+i.helperProportions.width,v=n.offset.top,y=v+i.helperProportions.height;for(h=i.snapElements.length-1;h>=0;h--)u=(l=i.snapElements[h].left-i.margins.left)+i.snapElements[h].width,d=(c=i.snapElements[h].top-i.margins.top)+i.snapElements[h].height,b<l-g||m>u+g||y<c-g||v>d+g||!e.contains(i.snapElements[h].item.ownerDocument,i.snapElements[h].item)?(i.snapElements[h].snapping&&i.options.snap.release&&i.options.snap.release.call(i.element,t,e.extend(i._uiHash(),{snapItem:i.snapElements[h].item})),i.snapElements[h].snapping=!1):("inner"!==f.snapMode&&(r=Math.abs(c-y)<=g,a=Math.abs(d-v)<=g,o=Math.abs(l-b)<=g,s=Math.abs(u-m)<=g,r&&(n.position.top=i._convertPositionTo("relative",{top:c-i.helperProportions.height,left:0}).top),a&&(n.position.top=i._convertPositionTo("relative",{top:d,left:0}).top),o&&(n.position.left=i._convertPositionTo("relative",{top:0,left:l-i.helperProportions.width}).left),s&&(n.position.left=i._convertPositionTo("relative",{top:0,left:u}).left)),p=r||a||o||s,"outer"!==f.snapMode&&(r=Math.abs(c-v)<=g,a=Math.abs(d-y)<=g,o=Math.abs(l-m)<=g,s=Math.abs(u-b)<=g,r&&(n.position.top=i._convertPositionTo("relative",{top:c,left:0}).top),a&&(n.position.top=i._convertPositionTo("relative",{top:d-i.helperProportions.height,left:0}).top),o&&(n.position.left=i._convertPositionTo("relative",{top:0,left:l}).left),s&&(n.position.left=i._convertPositionTo("relative",{top:0,left:u-i.helperProportions.width}).left)),!i.snapElements[h].snapping&&(r||a||o||s||p)&&i.options.snap.snap&&i.options.snap.snap.call(i.element,t,e.extend(i._uiHash(),{snapItem:i.snapElements[h].item})),i.snapElements[h].snapping=r||a||o||s||p)}}),e.ui.plugin.add("draggable","stack",{start:function(t,n,i){var r,a=i.options,o=e.makeArray(e(a.stack)).sort((function(t,n){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(n).css("zIndex"),10)||0)}));o.length&&(r=parseInt(e(o[0]).css("zIndex"),10)||0,e(o).each((function(t){e(this).css("zIndex",r+t)})),this.css("zIndex",r+o.length))}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,n,i){var r=e(n.helper),a=i.options;r.css("zIndex")&&(a._zIndex=r.css("zIndex")),r.css("zIndex",a.zIndex)},stop:function(t,n,i){var r=i.options;r._zIndex&&e(n.helper).css("zIndex",r._zIndex)}}),e.ui.draggable,e.widget("ui.resizable",e.ui.mouse,{version:"1.13.2",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(e){return parseFloat(e)||0},_isNumber:function(e){return!isNaN(parseFloat(e))},_hasScroll:function(t,n){if("hidden"===e(t).css("overflow"))return!1;var i=n&&"left"===n?"scrollLeft":"scrollTop",r=!1;if(t[i]>0)return!0;try{t[i]=1,r=t[i]>0,t[i]=0}catch(e){}return r},_create:function(){var t,n=this.options,i=this;this._addClass("ui-resizable"),e.extend(this,{_aspectRatio:!!n.aspectRatio,aspectRatio:n.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:n.helper||n.ghost||n.animate?n.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(e("<div class='ui-wrapper'></div>").css({overflow:"hidden",position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,t={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(t),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(t),this._proportionallyResize()),this._setupHandles(),n.autoHide&&e(this.element).on("mouseenter",(function(){n.disabled||(i._removeClass("ui-resizable-autohide"),i._handles.show())})).on("mouseleave",(function(){n.disabled||i.resizing||(i._addClass("ui-resizable-autohide"),i._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy(),this._addedHandles.remove();var t,n=function(t){e(t).removeData("resizable").removeData("ui-resizable").off(".resizable")};return this.elementIsWrapper&&(n(this.element),t=this.element,this.originalElement.css({position:t.css("position"),width:t.outerWidth(),height:t.outerHeight(),top:t.css("top"),left:t.css("left")}).insertAfter(t),t.remove()),this.originalElement.css("resize",this.originalResizeStyle),n(this.originalElement),this},_setOption:function(e,t){switch(this._super(e,t),e){case"handles":this._removeHandles(),this._setupHandles();break;case"aspectRatio":this._aspectRatio=!!t}},_setupHandles:function(){var t,n,i,r,a,o=this.options,s=this;if(this.handles=o.handles||(e(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=e(),this._addedHandles=e(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),i=this.handles.split(","),this.handles={},n=0;n<i.length;n++)r="ui-resizable-"+(t=String.prototype.trim.call(i[n])),a=e("<div>"),this._addClass(a,"ui-resizable-handle "+r),a.css({zIndex:o.zIndex}),this.handles[t]=".ui-resizable-"+t,this.element.children(this.handles[t]).length||(this.element.append(a),this._addedHandles=this._addedHandles.add(a));this._renderAxis=function(t){var n,i,r,a;for(n in t=t||this.element,this.handles)this.handles[n].constructor===String?this.handles[n]=this.element.children(this.handles[n]).first().show():(this.handles[n].jquery||this.handles[n].nodeType)&&(this.handles[n]=e(this.handles[n]),this._on(this.handles[n],{mousedown:s._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(i=e(this.handles[n],this.element),a=/sw|ne|nw|se|n|s/.test(n)?i.outerHeight():i.outerWidth(),r=["padding",/ne|nw|n/.test(n)?"Top":/se|sw|s/.test(n)?"Bottom":/^e$/.test(n)?"Right":"Left"].join(""),t.css(r,a),this._proportionallyResize()),this._handles=this._handles.add(this.handles[n])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",(function(){s.resizing||(this.className&&(a=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),s.axis=a&&a[1]?a[1]:"se")})),o.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._addedHandles.remove()},_mouseCapture:function(t){var n,i,r=!1;for(n in this.handles)((i=e(this.handles[n])[0])===t.target||e.contains(i,t.target))&&(r=!0);return!this.options.disabled&&r},_mouseStart:function(t){var n,i,r,a=this.options,o=this.element;return this.resizing=!0,this._renderProxy(),n=this._num(this.helper.css("left")),i=this._num(this.helper.css("top")),a.containment&&(n+=e(a.containment).scrollLeft()||0,i+=e(a.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:n,top:i},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:o.width(),height:o.height()},this.originalSize=this._helper?{width:o.outerWidth(),height:o.outerHeight()}:{width:o.width(),height:o.height()},this.sizeDiff={width:o.outerWidth()-o.width(),height:o.outerHeight()-o.height()},this.originalPosition={left:n,top:i},this.originalMousePosition={left:t.pageX,top:t.pageY},this.aspectRatio="number"==typeof a.aspectRatio?a.aspectRatio:this.originalSize.width/this.originalSize.height||1,r=e(".ui-resizable-"+this.axis).css("cursor"),e("body").css("cursor","auto"===r?this.axis+"-resize":r),this._addClass("ui-resizable-resizing"),this._propagate("start",t),!0},_mouseDrag:function(t){var n,i,r=this.originalMousePosition,a=this.axis,o=t.pageX-r.left||0,s=t.pageY-r.top||0,l=this._change[a];return this._updatePrevProperties(),!!l&&(n=l.apply(this,[t,o,s]),this._updateVirtualBoundaries(t.shiftKey),(this._aspectRatio||t.shiftKey)&&(n=this._updateRatio(n,t)),n=this._respectSize(n,t),this._updateCache(n),this._propagate("resize",t),i=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),e.isEmptyObject(i)||(this._updatePrevProperties(),this._trigger("resize",t,this.ui()),this._applyChanges()),!1)},_mouseStop:function(t){this.resizing=!1;var n,i,r,a,o,s,l,u=this.options,c=this;return this._helper&&(r=(i=(n=this._proportionallyResizeElements).length&&/textarea/i.test(n[0].nodeName))&&this._hasScroll(n[0],"left")?0:c.sizeDiff.height,a=i?0:c.sizeDiff.width,o={width:c.helper.width()-a,height:c.helper.height()-r},s=parseFloat(c.element.css("left"))+(c.position.left-c.originalPosition.left)||null,l=parseFloat(c.element.css("top"))+(c.position.top-c.originalPosition.top)||null,u.animate||this.element.css(e.extend(o,{top:l,left:s})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!u.animate&&this._proportionallyResize()),e("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",t),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var e={};return this.position.top!==this.prevPosition.top&&(e.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(e.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(e.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(e.height=this.size.height+"px"),this.helper.css(e),e},_updateVirtualBoundaries:function(e){var t,n,i,r,a,o=this.options;a={minWidth:this._isNumber(o.minWidth)?o.minWidth:0,maxWidth:this._isNumber(o.maxWidth)?o.maxWidth:1/0,minHeight:this._isNumber(o.minHeight)?o.minHeight:0,maxHeight:this._isNumber(o.maxHeight)?o.maxHeight:1/0},(this._aspectRatio||e)&&(t=a.minHeight*this.aspectRatio,i=a.minWidth/this.aspectRatio,n=a.maxHeight*this.aspectRatio,r=a.maxWidth/this.aspectRatio,t>a.minWidth&&(a.minWidth=t),i>a.minHeight&&(a.minHeight=i),n<a.maxWidth&&(a.maxWidth=n),r<a.maxHeight&&(a.maxHeight=r)),this._vBoundaries=a},_updateCache:function(e){this.offset=this.helper.offset(),this._isNumber(e.left)&&(this.position.left=e.left),this._isNumber(e.top)&&(this.position.top=e.top),this._isNumber(e.height)&&(this.size.height=e.height),this._isNumber(e.width)&&(this.size.width=e.width)},_updateRatio:function(e){var t=this.position,n=this.size,i=this.axis;return this._isNumber(e.height)?e.width=e.height*this.aspectRatio:this._isNumber(e.width)&&(e.height=e.width/this.aspectRatio),"sw"===i&&(e.left=t.left+(n.width-e.width),e.top=null),"nw"===i&&(e.top=t.top+(n.height-e.height),e.left=t.left+(n.width-e.width)),e},_respectSize:function(e){var t=this._vBoundaries,n=this.axis,i=this._isNumber(e.width)&&t.maxWidth&&t.maxWidth<e.width,r=this._isNumber(e.height)&&t.maxHeight&&t.maxHeight<e.height,a=this._isNumber(e.width)&&t.minWidth&&t.minWidth>e.width,o=this._isNumber(e.height)&&t.minHeight&&t.minHeight>e.height,s=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,u=/sw|nw|w/.test(n),c=/nw|ne|n/.test(n);return a&&(e.width=t.minWidth),o&&(e.height=t.minHeight),i&&(e.width=t.maxWidth),r&&(e.height=t.maxHeight),a&&u&&(e.left=s-t.minWidth),i&&u&&(e.left=s-t.maxWidth),o&&c&&(e.top=l-t.minHeight),r&&c&&(e.top=l-t.maxHeight),e.width||e.height||e.left||!e.top?e.width||e.height||e.top||!e.left||(e.left=null):e.top=null,e},_getPaddingPlusBorderDimensions:function(e){for(var t=0,n=[],i=[e.css("borderTopWidth"),e.css("borderRightWidth"),e.css("borderBottomWidth"),e.css("borderLeftWidth")],r=[e.css("paddingTop"),e.css("paddingRight"),e.css("paddingBottom"),e.css("paddingLeft")];t<4;t++)n[t]=parseFloat(i[t])||0,n[t]+=parseFloat(r[t])||0;return{height:n[0]+n[2],width:n[1]+n[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var e,t=0,n=this.helper||this.element;t<this._proportionallyResizeElements.length;t++)e=this._proportionallyResizeElements[t],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(e)),e.css({height:n.height()-this.outerDimensions.height||0,width:n.width()-this.outerDimensions.width||0})},_renderProxy:function(){var t=this.element,n=this.options;this.elementOffset=t.offset(),this._helper?(this.helper=this.helper||e("<div></div>").css({overflow:"hidden"}),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++n.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(e,t){return{width:this.originalSize.width+t}},w:function(e,t){var n=this.originalSize;return{left:this.originalPosition.left+t,width:n.width-t}},n:function(e,t,n){var i=this.originalSize;return{top:this.originalPosition.top+n,height:i.height-n}},s:function(e,t,n){return{height:this.originalSize.height+n}},se:function(t,n,i){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[t,n,i]))},sw:function(t,n,i){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[t,n,i]))},ne:function(t,n,i){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[t,n,i]))},nw:function(t,n,i){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[t,n,i]))}},_propagate:function(t,n){e.ui.plugin.call(this,t,[n,this.ui()]),"resize"!==t&&this._trigger(t,n,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),e.ui.plugin.add("resizable","animate",{stop:function(t){var n=e(this).resizable("instance"),i=n.options,r=n._proportionallyResizeElements,a=r.length&&/textarea/i.test(r[0].nodeName),o=a&&n._hasScroll(r[0],"left")?0:n.sizeDiff.height,s=a?0:n.sizeDiff.width,l={width:n.size.width-s,height:n.size.height-o},u=parseFloat(n.element.css("left"))+(n.position.left-n.originalPosition.left)||null,c=parseFloat(n.element.css("top"))+(n.position.top-n.originalPosition.top)||null;n.element.animate(e.extend(l,c&&u?{top:c,left:u}:{}),{duration:i.animateDuration,easing:i.animateEasing,step:function(){var i={width:parseFloat(n.element.css("width")),height:parseFloat(n.element.css("height")),top:parseFloat(n.element.css("top")),left:parseFloat(n.element.css("left"))};r&&r.length&&e(r[0]).css({width:i.width,height:i.height}),n._updateCache(i),n._propagate("resize",t)}})}}),e.ui.plugin.add("resizable","containment",{start:function(){var t,n,i,r,a,o,s,l=e(this).resizable("instance"),u=l.options,c=l.element,d=u.containment,h=d instanceof e?d.get(0):/parent/.test(d)?c.parent().get(0):d;h&&(l.containerElement=e(h),/document/.test(d)||d===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight}):(t=e(h),n=[],e(["Top","Right","Left","Bottom"]).each((function(e,i){n[e]=l._num(t.css("padding"+i))})),l.containerOffset=t.offset(),l.containerPosition=t.position(),l.containerSize={height:t.innerHeight()-n[3],width:t.innerWidth()-n[1]},i=l.containerOffset,r=l.containerSize.height,a=l.containerSize.width,o=l._hasScroll(h,"left")?h.scrollWidth:a,s=l._hasScroll(h)?h.scrollHeight:r,l.parentData={element:h,left:i.left,top:i.top,width:o,height:s}))},resize:function(t){var n,i,r,a,o=e(this).resizable("instance"),s=o.options,l=o.containerOffset,u=o.position,c=o._aspectRatio||t.shiftKey,d={top:0,left:0},h=o.containerElement,p=!0;h[0]!==document&&/static/.test(h.css("position"))&&(d=l),u.left<(o._helper?l.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-l.left:o.position.left-d.left),c&&(o.size.height=o.size.width/o.aspectRatio,p=!1),o.position.left=s.helper?l.left:0),u.top<(o._helper?l.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-l.top:o.position.top),c&&(o.size.width=o.size.height*o.aspectRatio,p=!1),o.position.top=o._helper?l.top:0),r=o.containerElement.get(0)===o.element.parent().get(0),a=/relative|absolute/.test(o.containerElement.css("position")),r&&a?(o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top):(o.offset.left=o.element.offset().left,o.offset.top=o.element.offset().top),n=Math.abs(o.sizeDiff.width+(o._helper?o.offset.left-d.left:o.offset.left-l.left)),i=Math.abs(o.sizeDiff.height+(o._helper?o.offset.top-d.top:o.offset.top-l.top)),n+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-n,c&&(o.size.height=o.size.width/o.aspectRatio,p=!1)),i+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-i,c&&(o.size.width=o.size.height*o.aspectRatio,p=!1)),p||(o.position.left=o.prevPosition.left,o.position.top=o.prevPosition.top,o.size.width=o.prevSize.width,o.size.height=o.prevSize.height)},stop:function(){var t=e(this).resizable("instance"),n=t.options,i=t.containerOffset,r=t.containerPosition,a=t.containerElement,o=e(t.helper),s=o.offset(),l=o.outerWidth()-t.sizeDiff.width,u=o.outerHeight()-t.sizeDiff.height;t._helper&&!n.animate&&/relative/.test(a.css("position"))&&e(this).css({left:s.left-r.left-i.left,width:l,height:u}),t._helper&&!n.animate&&/static/.test(a.css("position"))&&e(this).css({left:s.left-r.left-i.left,width:l,height:u})}}),e.ui.plugin.add("resizable","alsoResize",{start:function(){var t=e(this).resizable("instance").options;e(t.alsoResize).each((function(){var t=e(this);t.data("ui-resizable-alsoresize",{width:parseFloat(t.width()),height:parseFloat(t.height()),left:parseFloat(t.css("left")),top:parseFloat(t.css("top"))})}))},resize:function(t,n){var i=e(this).resizable("instance"),r=i.options,a=i.originalSize,o=i.originalPosition,s={height:i.size.height-a.height||0,width:i.size.width-a.width||0,top:i.position.top-o.top||0,left:i.position.left-o.left||0};e(r.alsoResize).each((function(){var t=e(this),i=e(this).data("ui-resizable-alsoresize"),r={},a=t.parents(n.originalElement[0]).length?["width","height"]:["width","height","top","left"];e.each(a,(function(e,t){var n=(i[t]||0)+(s[t]||0);n&&n>=0&&(r[t]=n||null)})),t.css(r)}))},stop:function(){e(this).removeData("ui-resizable-alsoresize")}}),e.ui.plugin.add("resizable","ghost",{start:function(){var t=e(this).resizable("instance"),n=t.size;t.ghost=t.originalElement.clone(),t.ghost.css({opacity:.25,display:"block",position:"relative",height:n.height,width:n.width,margin:0,left:0,top:0}),t._addClass(t.ghost,"ui-resizable-ghost"),!1!==e.uiBackCompat&&"string"==typeof t.options.ghost&&t.ghost.addClass(this.options.ghost),t.ghost.appendTo(t.helper)},resize:function(){var t=e(this).resizable("instance");t.ghost&&t.ghost.css({position:"relative",height:t.size.height,width:t.size.width})},stop:function(){var t=e(this).resizable("instance");t.ghost&&t.helper&&t.helper.get(0).removeChild(t.ghost.get(0))}}),e.ui.plugin.add("resizable","grid",{resize:function(){var t,n=e(this).resizable("instance"),i=n.options,r=n.size,a=n.originalSize,o=n.originalPosition,s=n.axis,l="number"==typeof i.grid?[i.grid,i.grid]:i.grid,u=l[0]||1,c=l[1]||1,d=Math.round((r.width-a.width)/u)*u,h=Math.round((r.height-a.height)/c)*c,p=a.width+d,f=a.height+h,g=i.maxWidth&&i.maxWidth<p,m=i.maxHeight&&i.maxHeight<f,b=i.minWidth&&i.minWidth>p,v=i.minHeight&&i.minHeight>f;i.grid=l,b&&(p+=u),v&&(f+=c),g&&(p-=u),m&&(f-=c),/^(se|s|e)$/.test(s)?(n.size.width=p,n.size.height=f):/^(ne)$/.test(s)?(n.size.width=p,n.size.height=f,n.position.top=o.top-h):/^(sw)$/.test(s)?(n.size.width=p,n.size.height=f,n.position.left=o.left-d):((f-c<=0||p-u<=0)&&(t=n._getPaddingPlusBorderDimensions(this)),f-c>0?(n.size.height=f,n.position.top=o.top-h):(f=c-t.height,n.size.height=f,n.position.top=o.top+a.height-f),p-u>0?(n.size.width=p,n.position.left=o.left-d):(p=u-t.width,n.size.width=p,n.position.left=o.left+a.width-p))}}),e.ui.resizable,e.widget("ui.dialog",{version:"1.13.2",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(t){var n=e(this).css(t).offset().top;n<0&&e(this).css("top",t.top-n)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&e.fn.draggable&&this._makeDraggable(),this.options.resizable&&e.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var t=this.options.appendTo;return t&&(t.jquery||t.nodeType)?e(t):this.document.find(t||"body").eq(0)},_destroy:function(){var e,t=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),(e=t.parent.children().eq(t.index)).length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},disable:e.noop,enable:e.noop,close:function(t){var n=this;this._isOpen&&!1!==this._trigger("beforeClose",t)&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||e.ui.safeBlur(e.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,(function(){n._trigger("close",t)})))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(t,n){var i=!1,r=this.uiDialog.siblings(".ui-front:visible").map((function(){return+e(this).css("z-index")})).get(),a=Math.max.apply(null,r);return a>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",a+1),i=!0),i&&!n&&this._trigger("focus",t),i},open:function(){var t=this;this._isOpen?this._moveToTop()&&this._focusTabbable():(this._isOpen=!0,this.opener=e(e.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,(function(){t._focusTabbable(),t._trigger("focus")})),this._makeFocusTarget(),this._trigger("open"))},_focusTabbable:function(){var e=this._focusedElement;e||(e=this.element.find("[autofocus]")),e.length||(e=this.element.find(":tabbable")),e.length||(e=this.uiDialogButtonPane.find(":tabbable")),e.length||(e=this.uiDialogTitlebarClose.filter(":tabbable")),e.length||(e=this.uiDialog),e.eq(0).trigger("focus")},_restoreTabbableFocus:function(){var t=e.ui.safeActiveElement(this.document[0]);this.uiDialog[0]===t||e.contains(this.uiDialog[0],t)||this._focusTabbable()},_keepFocus:function(e){e.preventDefault(),this._restoreTabbableFocus(),this._delay(this._restoreTabbableFocus)},_createWrapper:function(){this.uiDialog=e("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(t){if(this.options.closeOnEscape&&!t.isDefaultPrevented()&&t.keyCode&&t.keyCode===e.ui.keyCode.ESCAPE)return t.preventDefault(),void this.close(t);if(t.keyCode===e.ui.keyCode.TAB&&!t.isDefaultPrevented()){var n=this.uiDialog.find(":tabbable"),i=n.first(),r=n.last();t.target!==r[0]&&t.target!==this.uiDialog[0]||t.shiftKey?t.target!==i[0]&&t.target!==this.uiDialog[0]||!t.shiftKey||(this._delay((function(){r.trigger("focus")})),t.preventDefault()):(this._delay((function(){i.trigger("focus")})),t.preventDefault())}},mousedown:function(e){this._moveToTop(e)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var t;this.uiDialogTitlebar=e("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(t){e(t.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=e("<button type='button'></button>").button({label:e("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(e){e.preventDefault(),this.close(e)}}),t=e("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(t,"ui-dialog-title"),this._title(t),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":t.attr("id")})},_title:function(e){this.options.title?e.text(this.options.title):e.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=e("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=e("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var t=this,n=this.options.buttons;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),e.isEmptyObject(n)||Array.isArray(n)&&!n.length?this._removeClass(this.uiDialog,"ui-dialog-buttons"):(e.each(n,(function(n,i){var r,a;i="function"==typeof i?{click:i,text:n}:i,i=e.extend({type:"button"},i),r=i.click,a={icon:i.icon,iconPosition:i.iconPosition,showLabel:i.showLabel,icons:i.icons,text:i.text},delete i.click,delete i.icon,delete i.iconPosition,delete i.showLabel,delete i.icons,"boolean"==typeof i.text&&delete i.text,e("<button></button>",i).button(a).appendTo(t.uiButtonSet).on("click",(function(){r.apply(t.element[0],arguments)}))})),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){var t=this,n=this.options;function i(e){return{position:e.position,offset:e.offset}}this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(n,r){t._addClass(e(this),"ui-dialog-dragging"),t._blockFrames(),t._trigger("dragStart",n,i(r))},drag:function(e,n){t._trigger("drag",e,i(n))},stop:function(r,a){var o=a.offset.left-t.document.scrollLeft(),s=a.offset.top-t.document.scrollTop();n.position={my:"left top",at:"left"+(o>=0?"+":"")+o+" top"+(s>=0?"+":"")+s,of:t.window},t._removeClass(e(this),"ui-dialog-dragging"),t._unblockFrames(),t._trigger("dragStop",r,i(a))}})},_makeResizable:function(){var t=this,n=this.options,i=n.resizable,r=this.uiDialog.css("position"),a="string"==typeof i?i:"n,e,s,w,se,sw,ne,nw";function o(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:n.maxWidth,maxHeight:n.maxHeight,minWidth:n.minWidth,minHeight:this._minHeight(),handles:a,start:function(n,i){t._addClass(e(this),"ui-dialog-resizing"),t._blockFrames(),t._trigger("resizeStart",n,o(i))},resize:function(e,n){t._trigger("resize",e,o(n))},stop:function(i,r){var a=t.uiDialog.offset(),s=a.left-t.document.scrollLeft(),l=a.top-t.document.scrollTop();n.height=t.uiDialog.height(),n.width=t.uiDialog.width(),n.position={my:"left top",at:"left"+(s>=0?"+":"")+s+" top"+(l>=0?"+":"")+l,of:t.window},t._removeClass(e(this),"ui-dialog-resizing"),t._unblockFrames(),t._trigger("resizeStop",i,o(r))}}).css("position",r)},_trackFocus:function(){this._on(this.widget(),{focusin:function(t){this._makeFocusTarget(),this._focusedElement=e(t.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var t=this._trackingInstances(),n=e.inArray(this,t);-1!==n&&t.splice(n,1)},_trackingInstances:function(){var e=this.document.data("ui-dialog-instances");return e||(e=[],this.document.data("ui-dialog-instances",e)),e},_minHeight:function(){var e=this.options;return"auto"===e.height?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(){var e=this.uiDialog.is(":visible");e||this.uiDialog.show(),this.uiDialog.position(this.options.position),e||this.uiDialog.hide()},_setOptions:function(t){var n=this,i=!1,r={};e.each(t,(function(e,t){n._setOption(e,t),e in n.sizeRelatedOptions&&(i=!0),e in n.resizableRelatedOptions&&(r[e]=t)})),i&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",r)},_setOption:function(t,n){var i,r,a=this.uiDialog;"disabled"!==t&&(this._super(t,n),"appendTo"===t&&this.uiDialog.appendTo(this._appendTo()),"buttons"===t&&this._createButtons(),"closeText"===t&&this.uiDialogTitlebarClose.button({label:e("<a>").text(""+this.options.closeText).html()}),"draggable"===t&&((i=a.is(":data(ui-draggable)"))&&!n&&a.draggable("destroy"),!i&&n&&this._makeDraggable()),"position"===t&&this._position(),"resizable"===t&&((r=a.is(":data(ui-resizable)"))&&!n&&a.resizable("destroy"),r&&"string"==typeof n&&a.resizable("option","handles",n),r||!1===n||this._makeResizable()),"title"===t&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var e,t,n,i=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),i.minWidth>i.width&&(i.width=i.minWidth),e=this.uiDialog.css({height:"auto",width:i.width}).outerHeight(),t=Math.max(0,i.minHeight-e),n="number"==typeof i.maxHeight?Math.max(0,i.maxHeight-e):"none","auto"===i.height?this.element.css({minHeight:t,maxHeight:n,height:"auto"}):this.element.height(Math.max(0,i.height-e)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map((function(){var t=e(this);return e("<div>").css({position:"absolute",width:t.outerWidth(),height:t.outerHeight()}).appendTo(t.parent()).offset(t.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(t){return!!e(t.target).closest(".ui-dialog").length||!!e(t.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var t=e.fn.jquery.substring(0,4),n=!0;this._delay((function(){n=!1})),this.document.data("ui-dialog-overlays")||this.document.on("focusin.ui-dialog",function(e){if(!n){var i=this._trackingInstances()[0];i._allowInteraction(e)||(e.preventDefault(),i._focusTabbable(),"3.4."!==t&&"3.5."!==t||i._delay(i._restoreTabbableFocus))}}.bind(this)),this.overlay=e("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var e=this.document.data("ui-dialog-overlays")-1;e?this.document.data("ui-dialog-overlays",e):(this.document.off("focusin.ui-dialog"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null}}}),!1!==e.uiBackCompat&&e.widget("ui.dialog",e.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(e,t){"dialogClass"===e&&this.uiDialog.removeClass(this.options.dialogClass).addClass(t),this._superApply(arguments)}}),e.ui.dialog,e.widget("ui.droppable",{version:"1.13.2",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,t=this.options,n=t.accept;this.isover=!1,this.isout=!0,this.accept="function"==typeof n?n:function(e){return e.is(n)},this.proportions=function(){if(!arguments.length)return e||(e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight});e=arguments[0]},this._addToManager(t.scope),t.addClasses&&this._addClass("ui-droppable")},_addToManager:function(t){e.ui.ddmanager.droppables[t]=e.ui.ddmanager.droppables[t]||[],e.ui.ddmanager.droppables[t].push(this)},_splice:function(e){for(var t=0;t<e.length;t++)e[t]===this&&e.splice(t,1)},_destroy:function(){var t=e.ui.ddmanager.droppables[this.options.scope];this._splice(t)},_setOption:function(t,n){if("accept"===t)this.accept="function"==typeof n?n:function(e){return e.is(n)};else if("scope"===t){var i=e.ui.ddmanager.droppables[this.options.scope];this._splice(i),this._addToManager(n)}this._super(t,n)},_activate:function(t){var n=e.ui.ddmanager.current;this._addActiveClass(),n&&this._trigger("activate",t,this.ui(n))},_deactivate:function(t){var n=e.ui.ddmanager.current;this._removeActiveClass(),n&&this._trigger("deactivate",t,this.ui(n))},_over:function(t){var n=e.ui.ddmanager.current;n&&(n.currentItem||n.element)[0]!==this.element[0]&&this.accept.call(this.element[0],n.currentItem||n.element)&&(this._addHoverClass(),this._trigger("over",t,this.ui(n)))},_out:function(t){var n=e.ui.ddmanager.current;n&&(n.currentItem||n.element)[0]!==this.element[0]&&this.accept.call(this.element[0],n.currentItem||n.element)&&(this._removeHoverClass(),this._trigger("out",t,this.ui(n)))},_drop:function(t,n){var i=n||e.ui.ddmanager.current,r=!1;return!(!i||(i.currentItem||i.element)[0]===this.element[0])&&(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each((function(){var n=e(this).droppable("instance");if(n.options.greedy&&!n.options.disabled&&n.options.scope===i.options.scope&&n.accept.call(n.element[0],i.currentItem||i.element)&&e.ui.intersect(i,e.extend(n,{offset:n.element.offset()}),n.options.tolerance,t))return r=!0,!1})),!r&&!!this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",t,this.ui(i)),this.element))},ui:function(e){return{draggable:e.currentItem||e.element,helper:e.helper,position:e.position,offset:e.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}}),e.ui.intersect=function(){function e(e,t,n){return e>=t&&e<t+n}return function(t,n,i,r){if(!n.offset)return!1;var a=(t.positionAbs||t.position.absolute).left+t.margins.left,o=(t.positionAbs||t.position.absolute).top+t.margins.top,s=a+t.helperProportions.width,l=o+t.helperProportions.height,u=n.offset.left,c=n.offset.top,d=u+n.proportions().width,h=c+n.proportions().height;switch(i){case"fit":return u<=a&&s<=d&&c<=o&&l<=h;case"intersect":return u<a+t.helperProportions.width/2&&s-t.helperProportions.width/2<d&&c<o+t.helperProportions.height/2&&l-t.helperProportions.height/2<h;case"pointer":return e(r.pageY,c,n.proportions().height)&&e(r.pageX,u,n.proportions().width);case"touch":return(o>=c&&o<=h||l>=c&&l<=h||o<c&&l>h)&&(a>=u&&a<=d||s>=u&&s<=d||a<u&&s>d);default:return!1}}}(),e.ui.ddmanager={current:null,droppables:{default:[]},prepareOffsets:function(t,n){var i,r,a=e.ui.ddmanager.droppables[t.options.scope]||[],o=n?n.type:null,s=(t.currentItem||t.element).find(":data(ui-droppable)").addBack();e:for(i=0;i<a.length;i++)if(!(a[i].options.disabled||t&&!a[i].accept.call(a[i].element[0],t.currentItem||t.element))){for(r=0;r<s.length;r++)if(s[r]===a[i].element[0]){a[i].proportions().height=0;continue e}a[i].visible="none"!==a[i].element.css("display"),a[i].visible&&("mousedown"===o&&a[i]._activate.call(a[i],n),a[i].offset=a[i].element.offset(),a[i].proportions({width:a[i].element[0].offsetWidth,height:a[i].element[0].offsetHeight}))}},drop:function(t,n){var i=!1;return e.each((e.ui.ddmanager.droppables[t.options.scope]||[]).slice(),(function(){this.options&&(!this.options.disabled&&this.visible&&e.ui.intersect(t,this,this.options.tolerance,n)&&(i=this._drop.call(this,n)||i),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],t.currentItem||t.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,n)))})),i},dragStart:function(t,n){t.element.parentsUntil("body").on("scroll.droppable",(function(){t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,n)}))},drag:function(t,n){t.options.refreshPositions&&e.ui.ddmanager.prepareOffsets(t,n),e.each(e.ui.ddmanager.droppables[t.options.scope]||[],(function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var i,r,a,o=e.ui.intersect(t,this,this.options.tolerance,n),s=!o&&this.isover?"isout":o&&!this.isover?"isover":null;s&&(this.options.greedy&&(r=this.options.scope,(a=this.element.parents(":data(ui-droppable)").filter((function(){return e(this).droppable("instance").options.scope===r}))).length&&((i=e(a[0]).droppable("instance")).greedyChild="isover"===s)),i&&"isover"===s&&(i.isover=!1,i.isout=!0,i._out.call(i,n)),this[s]=!0,this["isout"===s?"isover":"isout"]=!1,this["isover"===s?"_over":"_out"].call(this,n),i&&"isout"===s&&(i.isout=!1,i.isover=!0,i._over.call(i,n)))}}))},dragStop:function(t,n){t.element.parentsUntil("body").off("scroll.droppable"),t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,n)}},!1!==e.uiBackCompat&&e.widget("ui.droppable",e.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),e.ui.droppable,e.widget("ui.progressbar",{version:"1.13.2",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=e("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(e){if(void 0===e)return this.options.value;this.options.value=this._constrainedValue(e),this._refreshValue()},_constrainedValue:function(e){return void 0===e&&(e=this.options.value),this.indeterminate=!1===e,"number"!=typeof e&&(e=0),!this.indeterminate&&Math.min(this.options.max,Math.max(this.min,e))},_setOptions:function(e){var t=e.value;delete e.value,this._super(e),this.options.value=this._constrainedValue(t),this._refreshValue()},_setOption:function(e,t){"max"===e&&(t=Math.max(this.min,t)),this._super(e,t)},_setOptionDisabled:function(e){this._super(e),this.element.attr("aria-disabled",e),this._toggleClass(null,"ui-state-disabled",!!e)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var t=this.options.value,n=this._percentage();this.valueDiv.toggle(this.indeterminate||t>this.min).width(n.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,t===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=e("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":t}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==t&&(this.oldValue=t,this._trigger("change")),t===this.options.max&&this._trigger("complete")}}),e.widget("ui.selectable",e.ui.mouse,{version:"1.13.2",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var t=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){t.elementPos=e(t.element[0]).offset(),t.selectees=e(t.options.filter,t.element[0]),t._addClass(t.selectees,"ui-selectee"),t.selectees.each((function(){var n=e(this),i=n.offset(),r={left:i.left-t.elementPos.left,top:i.top-t.elementPos.top};e.data(this,"selectable-item",{element:this,$element:n,left:r.left,top:r.top,right:r.left+n.outerWidth(),bottom:r.top+n.outerHeight(),startselected:!1,selected:n.hasClass("ui-selected"),selecting:n.hasClass("ui-selecting"),unselecting:n.hasClass("ui-unselecting")})}))},this.refresh(),this._mouseInit(),this.helper=e("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(t){var n=this,i=this.options;this.opos=[t.pageX,t.pageY],this.elementPos=e(this.element[0]).offset(),this.options.disabled||(this.selectees=e(i.filter,this.element[0]),this._trigger("start",t),e(i.appendTo).append(this.helper),this.helper.css({left:t.pageX,top:t.pageY,width:0,height:0}),i.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each((function(){var i=e.data(this,"selectable-item");i.startselected=!0,t.metaKey||t.ctrlKey||(n._removeClass(i.$element,"ui-selected"),i.selected=!1,n._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,n._trigger("unselecting",t,{unselecting:i.element}))})),e(t.target).parents().addBack().each((function(){var i,r=e.data(this,"selectable-item");if(r)return i=!t.metaKey&&!t.ctrlKey||!r.$element.hasClass("ui-selected"),n._removeClass(r.$element,i?"ui-unselecting":"ui-selected")._addClass(r.$element,i?"ui-selecting":"ui-unselecting"),r.unselecting=!i,r.selecting=i,r.selected=i,i?n._trigger("selecting",t,{selecting:r.element}):n._trigger("unselecting",t,{unselecting:r.element}),!1})))},_mouseDrag:function(t){if(this.dragged=!0,!this.options.disabled){var n,i=this,r=this.options,a=this.opos[0],o=this.opos[1],s=t.pageX,l=t.pageY;return a>s&&(n=s,s=a,a=n),o>l&&(n=l,l=o,o=n),this.helper.css({left:a,top:o,width:s-a,height:l-o}),this.selectees.each((function(){var n=e.data(this,"selectable-item"),u=!1,c={};n&&n.element!==i.element[0]&&(c.left=n.left+i.elementPos.left,c.right=n.right+i.elementPos.left,c.top=n.top+i.elementPos.top,c.bottom=n.bottom+i.elementPos.top,"touch"===r.tolerance?u=!(c.left>s||c.right<a||c.top>l||c.bottom<o):"fit"===r.tolerance&&(u=c.left>a&&c.right<s&&c.top>o&&c.bottom<l),u?(n.selected&&(i._removeClass(n.$element,"ui-selected"),n.selected=!1),n.unselecting&&(i._removeClass(n.$element,"ui-unselecting"),n.unselecting=!1),n.selecting||(i._addClass(n.$element,"ui-selecting"),n.selecting=!0,i._trigger("selecting",t,{selecting:n.element}))):(n.selecting&&((t.metaKey||t.ctrlKey)&&n.startselected?(i._removeClass(n.$element,"ui-selecting"),n.selecting=!1,i._addClass(n.$element,"ui-selected"),n.selected=!0):(i._removeClass(n.$element,"ui-selecting"),n.selecting=!1,n.startselected&&(i._addClass(n.$element,"ui-unselecting"),n.unselecting=!0),i._trigger("unselecting",t,{unselecting:n.element}))),n.selected&&(t.metaKey||t.ctrlKey||n.startselected||(i._removeClass(n.$element,"ui-selected"),n.selected=!1,i._addClass(n.$element,"ui-unselecting"),n.unselecting=!0,i._trigger("unselecting",t,{unselecting:n.element})))))})),!1}},_mouseStop:function(t){var n=this;return this.dragged=!1,e(".ui-unselecting",this.element[0]).each((function(){var i=e.data(this,"selectable-item");n._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1,i.startselected=!1,n._trigger("unselected",t,{unselected:i.element})})),e(".ui-selecting",this.element[0]).each((function(){var i=e.data(this,"selectable-item");n._removeClass(i.$element,"ui-selecting")._addClass(i.$element,"ui-selected"),i.selecting=!1,i.selected=!0,i.startselected=!0,n._trigger("selected",t,{selected:i.element})})),this._trigger("stop",t),this.helper.remove(),!1}}),e.widget("ui.selectmenu",[e.ui.formResetMixin,{version:"1.13.2",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:!1,change:null,close:null,focus:null,open:null,select:null},_create:function(){var t=this.element.uniqueId().attr("id");this.ids={element:t,button:t+"-button",menu:t+"-menu"},this._drawButton(),this._drawMenu(),this._bindFormResetHandler(),this._rendered=!1,this.menuItems=e()},_drawButton:function(){var t,n=this,i=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);this.labels=this.element.labels().attr("for",this.ids.button),this._on(this.labels,{click:function(e){this.button.trigger("focus"),e.preventDefault()}}),this.element.hide(),this.button=e("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element),this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget"),t=e("<span>").appendTo(this.button),this._addClass(t,"ui-selectmenu-icon","ui-icon "+this.options.icons.button),this.buttonItem=this._renderButtonItem(i).appendTo(this.button),!1!==this.options.width&&this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",(function(){n._rendered||n._refreshMenu()}))},_drawMenu:function(){var t=this;this.menu=e("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=e("<div>").append(this.menu),this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front"),this.menuWrap.appendTo(this._appendTo()),this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function(e,n){e.preventDefault(),t._setSelection(),t._select(n.item.data("ui-selectmenu-item"),e)},focus:function(e,n){var i=n.item.data("ui-selectmenu-item");null!=t.focusIndex&&i.index!==t.focusIndex&&(t._trigger("focus",e,{item:i}),t.isOpen||t._select(i,e)),t.focusIndex=i.index,t.button.attr("aria-activedescendant",t.menuItems.eq(i.index).attr("id"))}}).menu("instance"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item")||{})),null===this.options.width&&this._resizeButton()},_refreshMenu:function(){var e,t=this.element.find("option");this.menu.empty(),this._parseOptions(t),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"),this._rendered=!0,t.length&&(e=this._getSelectedItem(),this.menuInstance.focus(null,e),this._setAria(e.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(e){this.options.disabled||(this._rendered?(this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.menuItems.length&&(this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",e)))},_position:function(){this.menuWrap.position(e.extend({of:this.button},this.options.position))},close:function(e){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",e))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderButtonItem:function(t){var n=e("<span>");return this._setText(n,t.label),this._addClass(n,"ui-selectmenu-text"),n},_renderMenu:function(t,n){var i=this,r="";e.each(n,(function(n,a){var o;a.optgroup!==r&&(o=e("<li>",{text:a.optgroup}),i._addClass(o,"ui-selectmenu-optgroup","ui-menu-divider"+(a.element.parent("optgroup").prop("disabled")?" ui-state-disabled":"")),o.appendTo(t),r=a.optgroup),i._renderItemData(t,a)}))},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-selectmenu-item",t)},_renderItem:function(t,n){var i=e("<li>"),r=e("<div>",{title:n.element.attr("title")});return n.disabled&&this._addClass(i,null,"ui-state-disabled"),this._setText(r,n.label),i.append(r).appendTo(t)},_setText:function(e,t){t?e.text(t):e.html("&#160;")},_move:function(e,t){var n,i,r=".ui-menu-item";this.isOpen?n=this.menuItems.eq(this.focusIndex).parent("li"):(n=this.menuItems.eq(this.element[0].selectedIndex).parent("li"),r+=":not(.ui-state-disabled)"),(i="first"===e||"last"===e?n["first"===e?"prevAll":"nextAll"](r).eq(-1):n[e+"All"](r).eq(0)).length&&this.menuInstance.focus(t,i)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li")},_toggle:function(e){this[this.isOpen?"close":"open"](e)},_setSelection:function(){var e;this.range&&(window.getSelection?((e=window.getSelection()).removeAllRanges(),e.addRange(this.range)):this.range.select(),this.button.trigger("focus"))},_documentClick:{mousedown:function(t){this.isOpen&&(e(t.target).closest(".ui-selectmenu-menu, #"+e.escapeSelector(this.ids.button)).length||this.close(t))}},_buttonEvents:{mousedown:function(){var e;window.getSelection?(e=window.getSelection()).rangeCount&&(this.range=e.getRangeAt(0)):this.range=document.selection.createRange()},click:function(e){this._setSelection(),this._toggle(e)},keydown:function(t){var n=!0;switch(t.keyCode){case e.ui.keyCode.TAB:case e.ui.keyCode.ESCAPE:this.close(t),n=!1;break;case e.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(t);break;case e.ui.keyCode.UP:t.altKey?this._toggle(t):this._move("prev",t);break;case e.ui.keyCode.DOWN:t.altKey?this._toggle(t):this._move("next",t);break;case e.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(t):this._toggle(t);break;case e.ui.keyCode.LEFT:this._move("prev",t);break;case e.ui.keyCode.RIGHT:this._move("next",t);break;case e.ui.keyCode.HOME:case e.ui.keyCode.PAGE_UP:this._move("first",t);break;case e.ui.keyCode.END:case e.ui.keyCode.PAGE_DOWN:this._move("last",t);break;default:this.menu.trigger(t),n=!1}n&&t.preventDefault()}},_selectFocusedItem:function(e){var t=this.menuItems.eq(this.focusIndex).parent("li");t.hasClass("ui-state-disabled")||this._select(t.data("ui-selectmenu-item"),e)},_select:function(e,t){var n=this.element[0].selectedIndex;this.element[0].selectedIndex=e.index,this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(e)),this._setAria(e),this._trigger("select",t,{item:e}),e.index!==n&&this._trigger("change",t,{item:e}),this.close(t)},_setAria:function(e){var t=this.menuItems.eq(e.index).attr("id");this.button.attr({"aria-labelledby":t,"aria-activedescendant":t}),this.menu.attr("aria-activedescendant",t)},_setOption:function(e,t){if("icons"===e){var n=this.button.find("span.ui-icon");this._removeClass(n,null,this.options.icons.button)._addClass(n,null,t.button)}this._super(e,t),"appendTo"===e&&this.menuWrap.appendTo(this._appendTo()),"width"===e&&this._resizeButton()},_setOptionDisabled:function(e){this._super(e),this.menuInstance.option("disabled",e),this.button.attr("aria-disabled",e),this._toggleClass(this.button,null,"ui-state-disabled",e),this.element.prop("disabled",e),e?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)},_appendTo:function(){var t=this.options.appendTo;return t&&(t=t.jquery||t.nodeType?e(t):this.document.find(t).eq(0)),t&&t[0]||(t=this.element.closest(".ui-front, dialog")),t.length||(t=this.document[0].body),t},_toggleAttr:function(){this.button.attr("aria-expanded",this.isOpen),this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var e=this.options.width;!1!==e?(null===e&&(e=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(e)):this.button.css("width","")},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){var e=this._super();return e.disabled=this.element.prop("disabled"),e},_parseOptions:function(t){var n=this,i=[];t.each((function(t,r){r.hidden||i.push(n._parseOption(e(r),t))})),this.items=i},_parseOption:function(e,t){var n=e.parent("optgroup");return{element:e,index:t,value:e.val(),label:e.text(),optgroup:n.attr("label")||"",disabled:n.prop("disabled")||e.prop("disabled")}},_destroy:function(){this._unbindFormResetHandler(),this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.labels.attr("for",this.ids.element)}}]),e.widget("ui.slider",e.ui.mouse,{version:"1.13.2",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var t,n,i=this.options,r=this.element.find(".ui-slider-handle"),a=[];for(n=i.values&&i.values.length||1,r.length>n&&(r.slice(n).remove(),r=r.slice(0,n)),t=r.length;t<n;t++)a.push("<span tabindex='0'></span>");this.handles=r.add(e(a.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each((function(t){e(this).data("ui-slider-handle-index",t).attr("tabIndex",0)}))},_createRange:function(){var t=this.options;t.range?(!0===t.range&&(t.values?t.values.length&&2!==t.values.length?t.values=[t.values[0],t.values[0]]:Array.isArray(t.values)&&(t.values=t.values.slice(0)):t.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=e("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),"min"!==t.range&&"max"!==t.range||this._addClass(this.range,"ui-slider-range-"+t.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(t){var n,i,r,a,o,s,l,u=this,c=this.options;return!c.disabled&&(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),n={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(n),r=this._valueMax()-this._valueMin()+1,this.handles.each((function(t){var n=Math.abs(i-u.values(t));(r>n||r===n&&(t===u._lastChangedValue||u.values(t)===c.min))&&(r=n,a=e(this),o=t)})),!1!==this._start(t,o)&&(this._mouseSliding=!0,this._handleIndex=o,this._addClass(a,null,"ui-state-active"),a.trigger("focus"),s=a.offset(),l=!e(t.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:t.pageX-s.left-a.width()/2,top:t.pageY-s.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(t,o,i),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(e){var t={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(t);return this._slide(e,this._handleIndex,n),!1},_mouseStop:function(e){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(e,this._handleIndex),this._change(e,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(e){var t,n,i,r,a;return"horizontal"===this.orientation?(t=this.elementSize.width,n=e.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(t=this.elementSize.height,n=e.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),(i=n/t)>1&&(i=1),i<0&&(i=0),"vertical"===this.orientation&&(i=1-i),r=this._valueMax()-this._valueMin(),a=this._valueMin()+i*r,this._trimAlignValue(a)},_uiHash:function(e,t,n){var i={handle:this.handles[e],handleIndex:e,value:void 0!==t?t:this.value()};return this._hasMultipleValues()&&(i.value=void 0!==t?t:this.values(e),i.values=n||this.values()),i},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(e,t){return this._trigger("start",e,this._uiHash(t))},_slide:function(e,t,n){var i,r=this.value(),a=this.values();this._hasMultipleValues()&&(i=this.values(t?0:1),r=this.values(t),2===this.options.values.length&&!0===this.options.range&&(n=0===t?Math.min(i,n):Math.max(i,n)),a[t]=n),n!==r&&!1!==this._trigger("slide",e,this._uiHash(t,n,a))&&(this._hasMultipleValues()?this.values(t,n):this.value(n))},_stop:function(e,t){this._trigger("stop",e,this._uiHash(t))},_change:function(e,t){this._keySliding||this._mouseSliding||(this._lastChangedValue=t,this._trigger("change",e,this._uiHash(t)))},value:function(e){return arguments.length?(this.options.value=this._trimAlignValue(e),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,t){var n,i,r;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(t),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!Array.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(n=this.options.values,i=arguments[0],r=0;r<n.length;r+=1)n[r]=this._trimAlignValue(i[r]),this._change(null,r);this._refreshValue()},_setOption:function(e,t){var n,i=0;switch("range"===e&&!0===this.options.range&&("min"===t?(this.options.value=this._values(0),this.options.values=null):"max"===t&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),Array.isArray(this.options.values)&&(i=this.options.values.length),this._super(e,t),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(t),this.handles.css("horizontal"===t?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),n=i-1;n>=0;n--)this._change(null,n);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(e){this._super(e),this._toggleClass(null,"ui-state-disabled",!!e)},_value:function(){var e=this.options.value;return this._trimAlignValue(e)},_values:function(e){var t,n,i;if(arguments.length)return t=this.options.values[e],this._trimAlignValue(t);if(this._hasMultipleValues()){for(n=this.options.values.slice(),i=0;i<n.length;i+=1)n[i]=this._trimAlignValue(n[i]);return n}return[]},_trimAlignValue:function(e){if(e<=this._valueMin())return this._valueMin();if(e>=this._valueMax())return this._valueMax();var t=this.options.step>0?this.options.step:1,n=(e-this._valueMin())%t,i=e-n;return 2*Math.abs(n)>=t&&(i+=n>0?t:-t),parseFloat(i.toFixed(5))},_calculateNewMax:function(){var e=this.options.max,t=this._valueMin(),n=this.options.step;(e=Math.round((e-t)/n)*n+t)>this.options.max&&(e-=n),this.max=parseFloat(e.toFixed(this._precision()))},_precision:function(){var e=this._precisionOf(this.options.step);return null!==this.options.min&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=e.toString(),n=t.indexOf(".");return-1===n?0:t.length-n-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(e){"vertical"===e&&this.range.css({width:"",left:""}),"horizontal"===e&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var t,n,i,r,a,o=this.options.range,s=this.options,l=this,u=!this._animateOff&&s.animate,c={};this._hasMultipleValues()?this.handles.each((function(i){n=(l.values(i)-l._valueMin())/(l._valueMax()-l._valueMin())*100,c["horizontal"===l.orientation?"left":"bottom"]=n+"%",e(this).stop(1,1)[u?"animate":"css"](c,s.animate),!0===l.options.range&&("horizontal"===l.orientation?(0===i&&l.range.stop(1,1)[u?"animate":"css"]({left:n+"%"},s.animate),1===i&&l.range[u?"animate":"css"]({width:n-t+"%"},{queue:!1,duration:s.animate})):(0===i&&l.range.stop(1,1)[u?"animate":"css"]({bottom:n+"%"},s.animate),1===i&&l.range[u?"animate":"css"]({height:n-t+"%"},{queue:!1,duration:s.animate}))),t=n})):(i=this.value(),r=this._valueMin(),a=this._valueMax(),n=a!==r?(i-r)/(a-r)*100:0,c["horizontal"===this.orientation?"left":"bottom"]=n+"%",this.handle.stop(1,1)[u?"animate":"css"](c,s.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({width:n+"%"},s.animate),"max"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({width:100-n+"%"},s.animate),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({height:n+"%"},s.animate),"max"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[u?"animate":"css"]({height:100-n+"%"},s.animate))},_handleEvents:{keydown:function(t){var n,i,r,a=e(t.target).data("ui-slider-handle-index");switch(t.keyCode){case e.ui.keyCode.HOME:case e.ui.keyCode.END:case e.ui.keyCode.PAGE_UP:case e.ui.keyCode.PAGE_DOWN:case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(t.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(e(t.target),null,"ui-state-active"),!1===this._start(t,a)))return}switch(r=this.options.step,n=i=this._hasMultipleValues()?this.values(a):this.value(),t.keyCode){case e.ui.keyCode.HOME:i=this._valueMin();break;case e.ui.keyCode.END:i=this._valueMax();break;case e.ui.keyCode.PAGE_UP:i=this._trimAlignValue(n+(this._valueMax()-this._valueMin())/this.numPages);break;case e.ui.keyCode.PAGE_DOWN:i=this._trimAlignValue(n-(this._valueMax()-this._valueMin())/this.numPages);break;case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:if(n===this._valueMax())return;i=this._trimAlignValue(n+r);break;case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(n===this._valueMin())return;i=this._trimAlignValue(n-r)}this._slide(t,a,i)},keyup:function(t){var n=e(t.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(t,n),this._change(t,n),this._removeClass(e(t.target),null,"ui-state-active"))}}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.13.2",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,n){return e>=t&&e<t+n},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){var t=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),e.each(this.items,(function(){t._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")}))},_destroy:function(){this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,n){var i=null,r=!1,a=this;return!(this.reverting||this.options.disabled||"static"===this.options.type||(this._refreshItems(t),e(t.target).parents().each((function(){if(e.data(this,a.widgetName+"-item")===a)return i=e(this),!1})),e.data(t.target,a.widgetName+"-item")===a&&(i=e(t.target)),!i||this.options.handle&&!n&&(e(this.options.handle,i).find("*").addBack().each((function(){this===t.target&&(r=!0)})),!r)||(this.currentItem=i,this._removeCurrentsFromItems(),0)))},_mouseStart:function(t,n,i){var r,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.appendTo=e("parent"!==o.appendTo?o.appendTo:this.currentItem.parent()),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),this.scrollParent=this.placeholder.scrollParent(),e.extend(this.offset,{parent:this._getParentOffset()}),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=e("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!i)for(r=this.containers.length-1;r>=0;r--)this.containers[r]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this.helper.parent().is(this.appendTo)||(this.helper.detach().appendTo(this.appendTo),this.offset.parent=this._getParentOffset()),this.position=this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,this.lastPositionAbs=this.positionAbs=this._convertPositionTo("absolute"),this._mouseDrag(t),!0},_scroll:function(e){var t=this.options,n=!1;return this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<t.scrollSensitivity?this.scrollParent[0].scrollTop=n=this.scrollParent[0].scrollTop+t.scrollSpeed:e.pageY-this.overflowOffset.top<t.scrollSensitivity&&(this.scrollParent[0].scrollTop=n=this.scrollParent[0].scrollTop-t.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<t.scrollSensitivity?this.scrollParent[0].scrollLeft=n=this.scrollParent[0].scrollLeft+t.scrollSpeed:e.pageX-this.overflowOffset.left<t.scrollSensitivity&&(this.scrollParent[0].scrollLeft=n=this.scrollParent[0].scrollLeft-t.scrollSpeed)):(e.pageY-this.document.scrollTop()<t.scrollSensitivity?n=this.document.scrollTop(this.document.scrollTop()-t.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<t.scrollSensitivity&&(n=this.document.scrollTop(this.document.scrollTop()+t.scrollSpeed)),e.pageX-this.document.scrollLeft()<t.scrollSensitivity?n=this.document.scrollLeft(this.document.scrollLeft()-t.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<t.scrollSensitivity&&(n=this.document.scrollLeft(this.document.scrollLeft()+t.scrollSpeed))),n},_mouseDrag:function(t){var n,i,r,a,o=this.options;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),o.scroll&&!1!==this._scroll(t)&&(this._refreshItemPositions(!0),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.dragDirection={vertical:this._getDragVerticalDirection(),horizontal:this._getDragHorizontalDirection()},n=this.items.length-1;n>=0;n--)if(r=(i=this.items[n]).item[0],(a=this._intersectsWithPointer(i))&&i.instance===this.currentContainer&&!(r===this.currentItem[0]||this.placeholder[1===a?"next":"prev"]()[0]===r||e.contains(this.placeholder[0],r)||"semi-dynamic"===this.options.type&&e.contains(this.element[0],r))){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(i))break;this._rearrange(t,i),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,n){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var i=this,r=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=r.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=r.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(o,parseInt(this.options.revert,10)||500,(function(){i._clear(t)}))}else this._clear(t,n);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new e.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var n=this._getItemsAsjQuery(t&&t.connected),i=[];return t=t||{},e(n).each((function(){var n=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);n&&i.push((t.key||n[1]+"[]")+"="+(t.key&&t.expression?n[1]:n[2]))})),!i.length&&t.key&&i.push(t.key+"="),i.join("&")},toArray:function(t){var n=this._getItemsAsjQuery(t&&t.connected),i=[];return t=t||{},n.each((function(){i.push(e(t.item||this).attr(t.attribute||"id")||"")})),i},_intersectsWith:function(e){var t=this.positionAbs.left,n=t+this.helperProportions.width,i=this.positionAbs.top,r=i+this.helperProportions.height,a=e.left,o=a+e.width,s=e.top,l=s+e.height,u=this.offset.click.top,c=this.offset.click.left,d="x"===this.options.axis||i+u>s&&i+u<l,h="y"===this.options.axis||t+c>a&&t+c<o,p=d&&h;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:a<t+this.helperProportions.width/2&&n-this.helperProportions.width/2<o&&s<i+this.helperProportions.height/2&&r-this.helperProportions.height/2<l},_intersectsWithPointer:function(e){var t,n,i="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),r="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width);return!(!i||!r)&&(t=this.dragDirection.vertical,n=this.dragDirection.horizontal,this.floating?"right"===n||"down"===t?2:1:t&&("down"===t?2:1))},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),n=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),i=this.dragDirection.vertical,r=this.dragDirection.horizontal;return this.floating&&r?"right"===r&&n||"left"===r&&!n:i&&("down"===i&&t||"up"===i&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){var n,i,r,a,o=[],s=[],l=this._connectWith();if(l&&t)for(n=l.length-1;n>=0;n--)for(i=(r=e(l[n],this.document[0])).length-1;i>=0;i--)(a=e.data(r[i],this.widgetFullName))&&a!==this&&!a.options.disabled&&s.push(["function"==typeof a.options.items?a.options.items.call(a.element):e(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);function u(){o.push(this)}for(s.push(["function"==typeof this.options.items?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),n=s.length-1;n>=0;n--)s[n][0].each(u);return e(o)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,(function(e){for(var n=0;n<t.length;n++)if(t[n]===e.item[0])return!1;return!0}))},_refreshItems:function(t){this.items=[],this.containers=[this];var n,i,r,a,o,s,l,u,c=this.items,d=[["function"==typeof this.options.items?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],h=this._connectWith();if(h&&this.ready)for(n=h.length-1;n>=0;n--)for(i=(r=e(h[n],this.document[0])).length-1;i>=0;i--)(a=e.data(r[i],this.widgetFullName))&&a!==this&&!a.options.disabled&&(d.push(["function"==typeof a.options.items?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a));for(n=d.length-1;n>=0;n--)for(o=d[n][1],i=0,u=(s=d[n][0]).length;i<u;i++)(l=e(s[i])).data(this.widgetName+"-item",o),c.push({item:l,instance:o,width:0,height:0,left:0,top:0})},_refreshItemPositions:function(t){var n,i,r,a;for(n=this.items.length-1;n>=0;n--)i=this.items[n],this.currentContainer&&i.instance!==this.currentContainer&&i.item[0]!==this.currentItem[0]||(r=this.options.toleranceElement?e(this.options.toleranceElement,i.item):i.item,t||(i.width=r.outerWidth(),i.height=r.outerHeight()),a=r.offset(),i.left=a.left,i.top=a.top)},refreshPositions:function(e){var t,n;if(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),this._refreshItemPositions(e),this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(t=this.containers.length-1;t>=0;t--)n=this.containers[t].element.offset(),this.containers[t].containerCache.left=n.left,this.containers[t].containerCache.top=n.top,this.containers[t].containerCache.width=this.containers[t].element.outerWidth(),this.containers[t].containerCache.height=this.containers[t].element.outerHeight();return this},_createPlaceholder:function(t){var n,i,r=(t=t||this).options;r.placeholder&&r.placeholder.constructor!==String||(n=r.placeholder,i=t.currentItem[0].nodeName.toLowerCase(),r.placeholder={element:function(){var r=e("<"+i+">",t.document[0]);return t._addClass(r,"ui-sortable-placeholder",n||t.currentItem[0].className)._removeClass(r,"ui-sortable-helper"),"tbody"===i?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(r)):"tr"===i?t._createTrPlaceholder(t.currentItem,r):"img"===i&&r.attr("src",t.currentItem.attr("src")),n||r.css("visibility","hidden"),r},update:function(e,a){n&&!r.forcePlaceholderSize||(a.height()&&(!r.forcePlaceholderSize||"tbody"!==i&&"tr"!==i)||a.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),a.width()||a.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(r.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),r.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,n){var i=this;t.children().each((function(){e("<td>&#160;</td>",i.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(n)}))},_contactContainers:function(t){var n,i,r,a,o,s,l,u,c,d,h=null,p=null;for(n=this.containers.length-1;n>=0;n--)if(!e.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(h&&e.contains(this.containers[n].element[0],h.element[0]))continue;h=this.containers[n],p=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",t,this._uiHash(this)),this.containers[n].containerCache.over=0);if(h)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(r=1e4,a=null,o=(c=h.floating||this._isFloating(this.currentItem))?"left":"top",s=c?"width":"height",d=c?"pageX":"pageY",i=this.items.length-1;i>=0;i--)e.contains(this.containers[p].element[0],this.items[i].item[0])&&this.items[i].item[0]!==this.currentItem[0]&&(l=this.items[i].item.offset()[o],u=!1,t[d]-l>this.items[i][s]/2&&(u=!0),Math.abs(t[d]-l)<r&&(r=Math.abs(t[d]-l),a=this.items[i],this.direction=u?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return void(this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1));a?this._rearrange(t,a,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.scrollParent=this.placeholder.scrollParent(),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var n=this.options,i="function"==typeof n.helper?e(n.helper.apply(this.element[0],[t,this.currentItem])):"clone"===n.helper?this.currentItem.clone():this.currentItem;return i.parents("body").length||this.appendTo[0].appendChild(i[0]),i[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),i[0].style.width&&!n.forceHelperSize||i.width(this.currentItem.width()),i[0].style.height&&!n.forceHelperSize||i.height(this.currentItem.height()),i},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),Array.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,n,i,r=this.options;"parent"===r.containment&&(r.containment=this.helper[0].parentNode),"document"!==r.containment&&"window"!==r.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===r.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===r.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(r.containment)||(t=e(r.containment)[0],n=e(r.containment).offset(),i="hidden"!==e(t).css("overflow"),this.containment=[n.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,n.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,n.left+(i?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,n.top+(i?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(t,n){n||(n=this.position);var i="absolute"===t?1:-1,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(r[0].tagName);return{top:n.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:r.scrollTop())*i,left:n.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:r.scrollLeft())*i}},_generatePosition:function(t){var n,i,r=this.options,a=t.pageX,o=t.pageY,s="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(s[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),r.grid&&(n=this.originalPageY+Math.round((o-this.originalPageY)/r.grid[1])*r.grid[1],o=this.containment?n-this.offset.click.top>=this.containment[1]&&n-this.offset.click.top<=this.containment[3]?n:n-this.offset.click.top>=this.containment[1]?n-r.grid[1]:n+r.grid[1]:n,i=this.originalPageX+Math.round((a-this.originalPageX)/r.grid[0])*r.grid[0],a=this.containment?i-this.offset.click.left>=this.containment[0]&&i-this.offset.click.left<=this.containment[2]?i:i-this.offset.click.left>=this.containment[0]?i-r.grid[0]:i+r.grid[0]:i)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:s.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:s.scrollLeft())}},_rearrange:function(e,t,n,i){n?n[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var r=this.counter;this._delay((function(){r===this.counter&&this.refreshPositions(!i)}))},_clear:function(e,t){this.reverting=!1;var n,i=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(n in this._storedCSS)"auto"!==this._storedCSS[n]&&"static"!==this._storedCSS[n]||(this._storedCSS[n]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function r(e,t,n){return function(i){n._trigger(e,i,t._uiHash(t))}}for(this.fromOutside&&!t&&i.push((function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))})),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||i.push((function(e){this._trigger("update",e,this._uiHash())})),this!==this.currentContainer&&(t||(i.push((function(e){this._trigger("remove",e,this._uiHash())})),i.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),i.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),n=this.containers.length-1;n>=0;n--)t||i.push(r("deactivate",this,this.containers[n])),this.containers[n].containerCache.over&&(i.push(r("out",this,this.containers[n])),this.containers[n].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(n=0;n<i.length;n++)i[n].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===e.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(t){var n=t||this;return{helper:n.helper,placeholder:n.placeholder||e([]),position:n.position,originalPosition:n.originalPosition,offset:n.positionAbs,item:n.currentItem,sender:t?t.element:null}}}),e.widget("ui.spinner",{version:"1.13.2",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var t=this._super(),n=this.element;return e.each(["min","max","step"],(function(e,i){var r=n.attr(i);null!=r&&r.length&&(t[i]=r)})),t},_events:{keydown:function(e){this._start(e)&&this._keydown(e)&&e.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(e){this.cancelBlur?delete this.cancelBlur:(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",e))},mousewheel:function(t,n){var i=e.ui.safeActiveElement(this.document[0]);if(this.element[0]===i&&n){if(!this.spinning&&!this._start(t))return!1;this._spin((n>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay((function(){this.spinning&&this._stop(t)}),100),t.preventDefault()}},"mousedown .ui-spinner-button":function(t){var n;function i(){this.element[0]===e.ui.safeActiveElement(this.document[0])||(this.element.trigger("focus"),this.previous=n,this._delay((function(){this.previous=n})))}n=this.element[0]===e.ui.safeActiveElement(this.document[0])?this.previous:this.element.val(),t.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay((function(){delete this.cancelBlur,i.call(this)})),!1!==this._start(t)&&this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(t){if(e(t.currentTarget).hasClass("ui-state-active"))return!1!==this._start(t)&&void this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseleave .ui-spinner-button":"_stop"},_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent().append("<a></a><a></a>")},_draw:function(){this._enhance(),this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content"),this._addClass("ui-spinner-input"),this.element.attr("role","spinbutton"),this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",!0).button({classes:{"ui-button":""}}),this._removeClass(this.buttons,"ui-corner-all"),this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up"),this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down"),this.buttons.first().button({icon:this.options.icons.up,showLabel:!1}),this.buttons.last().button({icon:this.options.icons.down,showLabel:!1}),this.buttons.height()>Math.ceil(.5*this.uiSpinner.height())&&this.uiSpinner.height()>0&&this.uiSpinner.height(this.uiSpinner.height())},_keydown:function(t){var n=this.options,i=e.ui.keyCode;switch(t.keyCode){case i.UP:return this._repeat(null,1,t),!0;case i.DOWN:return this._repeat(null,-1,t),!0;case i.PAGE_UP:return this._repeat(null,n.page,t),!0;case i.PAGE_DOWN:return this._repeat(null,-n.page,t),!0}return!1},_start:function(e){return!(!this.spinning&&!1===this._trigger("start",e)||(this.counter||(this.counter=1),this.spinning=!0,0))},_repeat:function(e,t,n){e=e||500,clearTimeout(this.timer),this.timer=this._delay((function(){this._repeat(40,t,n)}),e),this._spin(t*this.options.step,n)},_spin:function(e,t){var n=this.value()||0;this.counter||(this.counter=1),n=this._adjustValue(n+e*this._increment(this.counter)),this.spinning&&!1===this._trigger("spin",t,{value:n})||(this._value(n),this.counter++)},_increment:function(e){var t=this.options.incremental;return t?"function"==typeof t?t(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var e=this._precisionOf(this.options.step);return null!==this.options.min&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=e.toString(),n=t.indexOf(".");return-1===n?0:t.length-n-1},_adjustValue:function(e){var t,n,i=this.options;return n=e-(t=null!==i.min?i.min:0),e=t+(n=Math.round(n/i.step)*i.step),e=parseFloat(e.toFixed(this._precision())),null!==i.max&&e>i.max?i.max:null!==i.min&&e<i.min?i.min:e},_stop:function(e){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",e))},_setOption:function(e,t){var n,i,r;if("culture"===e||"numberFormat"===e)return n=this._parse(this.element.val()),this.options[e]=t,void this.element.val(this._format(n));"max"!==e&&"min"!==e&&"step"!==e||"string"==typeof t&&(t=this._parse(t)),"icons"===e&&(i=this.buttons.first().find(".ui-icon"),this._removeClass(i,null,this.options.icons.up),this._addClass(i,null,t.up),r=this.buttons.last().find(".ui-icon"),this._removeClass(r,null,this.options.icons.down),this._addClass(r,null,t.down)),this._super(e,t)},_setOptionDisabled:function(e){this._super(e),this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!e),this.element.prop("disabled",!!e),this.buttons.button(e?"disable":"enable")},_setOptions:j((function(e){this._super(e)})),_parse:function(e){return"string"==typeof e&&""!==e&&(e=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(e,10,this.options.culture):+e),""===e||isNaN(e)?null:e},_format:function(e){return""===e?"":window.Globalize&&this.options.numberFormat?Globalize.format(e,this.options.numberFormat,this.options.culture):e},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var e=this.value();return null!==e&&e===this._adjustValue(e)},_value:function(e,t){var n;""!==e&&null!==(n=this._parse(e))&&(t||(n=this._adjustValue(n)),e=this._format(n)),this.element.val(e),this._refresh()},_destroy:function(){this.element.prop("disabled",!1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:j((function(e){this._stepUp(e)})),_stepUp:function(e){this._start()&&(this._spin((e||1)*this.options.step),this._stop())},stepDown:j((function(e){this._stepDown(e)})),_stepDown:function(e){this._start()&&(this._spin((e||1)*-this.options.step),this._stop())},pageUp:j((function(e){this._stepUp((e||1)*this.options.page)})),pageDown:j((function(e){this._stepDown((e||1)*this.options.page)})),value:function(e){if(!arguments.length)return this._parse(this.element.val());j(this._value).call(this,e)},widget:function(){return this.uiSpinner}}),!1!==e.uiBackCompat&&e.widget("ui.spinner",e.ui.spinner,{_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())},_uiSpinnerHtml:function(){return"<span>"},_buttonHtml:function(){return"<a></a><a></a>"}}),e.ui.spinner,e.widget("ui.tabs",{version:"1.13.2",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:(B=/#.*$/,function(e){var t,n;t=e.href.replace(B,""),n=location.href.replace(B,"");try{t=decodeURIComponent(t)}catch(e){}try{n=decodeURIComponent(n)}catch(e){}return e.hash.length>1&&t===n}),_create:function(){var t=this,n=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,n.collapsible),this._processTabs(),n.active=this._initialActive(),Array.isArray(n.disabled)&&(n.disabled=e.uniqueSort(n.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"),(function(e){return t.tabs.index(e)})))).sort()),!1!==this.options.active&&this.anchors.length?this.active=this._findActive(n.active):this.active=e(),this._refresh(),this.active.length&&this.load(n.active)},_initialActive:function(){var t=this.options.active,n=this.options.collapsible,i=location.hash.substring(1);return null===t&&(i&&this.tabs.each((function(n,r){if(e(r).attr("aria-controls")===i)return t=n,!1})),null===t&&(t=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),null!==t&&-1!==t||(t=!!this.tabs.length&&0)),!1!==t&&-1===(t=this.tabs.index(this.tabs.eq(t)))&&(t=!n&&0),!n&&!1===t&&this.anchors.length&&(t=0),t},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):e()}},_tabKeydown:function(t){var n=e(e.ui.safeActiveElement(this.document[0])).closest("li"),i=this.tabs.index(n),r=!0;if(!this._handlePageNav(t)){switch(t.keyCode){case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:i++;break;case e.ui.keyCode.UP:case e.ui.keyCode.LEFT:r=!1,i--;break;case e.ui.keyCode.END:i=this.anchors.length-1;break;case e.ui.keyCode.HOME:i=0;break;case e.ui.keyCode.SPACE:return t.preventDefault(),clearTimeout(this.activating),void this._activate(i);case e.ui.keyCode.ENTER:return t.preventDefault(),clearTimeout(this.activating),void this._activate(i!==this.options.active&&i);default:return}t.preventDefault(),clearTimeout(this.activating),i=this._focusNextTab(i,r),t.ctrlKey||t.metaKey||(n.attr("aria-selected","false"),this.tabs.eq(i).attr("aria-selected","true"),this.activating=this._delay((function(){this.option("active",i)}),this.delay))}},_panelKeydown:function(t){this._handlePageNav(t)||t.ctrlKey&&t.keyCode===e.ui.keyCode.UP&&(t.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(t){return t.altKey&&t.keyCode===e.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):t.altKey&&t.keyCode===e.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(t,n){var i=this.tabs.length-1;for(;-1!==e.inArray((t>i&&(t=0),t<0&&(t=i),t),this.options.disabled);)t=n?t+1:t-1;return t},_focusNextTab:function(e,t){return e=this._findNextTab(e,t),this.tabs.eq(e).trigger("focus"),e},_setOption:function(e,t){"active"!==e?(this._super(e,t),"collapsible"===e&&(this._toggleClass("ui-tabs-collapsible",null,t),t||!1!==this.options.active||this._activate(0)),"event"===e&&this._setupEvents(t),"heightStyle"===e&&this._setupHeightStyle(t)):this._activate(t)},_sanitizeSelector:function(e){return e?e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var t=this.options,n=this.tablist.children(":has(a[href])");t.disabled=e.map(n.filter(".ui-state-disabled"),(function(e){return n.index(e)})),this._processTabs(),!1!==t.active&&this.anchors.length?this.active.length&&!e.contains(this.tablist[0],this.active[0])?this.tabs.length===t.disabled.length?(t.active=!1,this.active=e()):this._activate(this._findNextTab(Math.max(0,t.active-1),!1)):t.active=this.tabs.index(this.active):(t.active=!1,this.active=e()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var t=this,n=this.tabs,i=this.anchors,r=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",(function(t){e(this).is(".ui-state-disabled")&&t.preventDefault()})).on("focus"+this.eventNamespace,".ui-tabs-anchor",(function(){e(this).closest("li").is(".ui-state-disabled")&&this.blur()})),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map((function(){return e("a",this)[0]})).attr({tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=e(),this.anchors.each((function(n,i){var r,a,o,s=e(i).uniqueId().attr("id"),l=e(i).closest("li"),u=l.attr("aria-controls");t._isLocal(i)?(o=(r=i.hash).substring(1),a=t.element.find(t._sanitizeSelector(r))):(r="#"+(o=l.attr("aria-controls")||e({}).uniqueId()[0].id),(a=t.element.find(r)).length||(a=t._createPanel(o)).insertAfter(t.panels[n-1]||t.tablist),a.attr("aria-live","polite")),a.length&&(t.panels=t.panels.add(a)),u&&l.data("ui-tabs-aria-controls",u),l.attr({"aria-controls":o,"aria-labelledby":s}),a.attr("aria-labelledby",s)})),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),n&&(this._off(n.not(this.tabs)),this._off(i.not(this.anchors)),this._off(r.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(t){return e("<div>").attr("id",t).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(t){var n,i,r;for(Array.isArray(t)&&(t.length?t.length===this.anchors.length&&(t=!0):t=!1),r=0;i=this.tabs[r];r++)n=e(i),!0===t||-1!==e.inArray(r,t)?(n.attr("aria-disabled","true"),this._addClass(n,null,"ui-state-disabled")):(n.removeAttr("aria-disabled"),this._removeClass(n,null,"ui-state-disabled"));this.options.disabled=t,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!0===t)},_setupEvents:function(t){var n={};t&&e.each(t.split(" "),(function(e,t){n[t]="_eventHandler"})),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(e){e.preventDefault()}}),this._on(this.anchors,n),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(t){var n,i=this.element.parent();"fill"===t?(n=i.height(),n-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each((function(){var t=e(this),i=t.css("position");"absolute"!==i&&"fixed"!==i&&(n-=t.outerHeight(!0))})),this.element.children().not(this.panels).each((function(){n-=e(this).outerHeight(!0)})),this.panels.each((function(){e(this).height(Math.max(0,n-e(this).innerHeight()+e(this).height()))})).css("overflow","auto")):"auto"===t&&(n=0,this.panels.each((function(){n=Math.max(n,e(this).height("").height())})).height(n))},_eventHandler:function(t){var n=this.options,i=this.active,r=e(t.currentTarget).closest("li"),a=r[0]===i[0],o=a&&n.collapsible,s=o?e():this._getPanelForTab(r),l=i.length?this._getPanelForTab(i):e(),u={oldTab:i,oldPanel:l,newTab:o?e():r,newPanel:s};t.preventDefault(),r.hasClass("ui-state-disabled")||r.hasClass("ui-tabs-loading")||this.running||a&&!n.collapsible||!1===this._trigger("beforeActivate",t,u)||(n.active=!o&&this.tabs.index(r),this.active=a?e():r,this.xhr&&this.xhr.abort(),l.length||s.length||e.error("jQuery UI Tabs: Mismatching fragment identifier."),s.length&&this.load(this.tabs.index(r),t),this._toggle(t,u))},_toggle:function(t,n){var i=this,r=n.newPanel,a=n.oldPanel;function o(){i.running=!1,i._trigger("activate",t,n)}function s(){i._addClass(n.newTab.closest("li"),"ui-tabs-active","ui-state-active"),r.length&&i.options.show?i._show(r,i.options.show,o):(r.show(),o())}this.running=!0,a.length&&this.options.hide?this._hide(a,this.options.hide,(function(){i._removeClass(n.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),s()})):(this._removeClass(n.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),a.hide(),s()),a.attr("aria-hidden","true"),n.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),r.length&&a.length?n.oldTab.attr("tabIndex",-1):r.length&&this.tabs.filter((function(){return 0===e(this).attr("tabIndex")})).attr("tabIndex",-1),r.attr("aria-hidden","false"),n.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(t){var n,i=this._findActive(t);i[0]!==this.active[0]&&(i.length||(i=this.active),n=i.find(".ui-tabs-anchor")[0],this._eventHandler({target:n,currentTarget:n,preventDefault:e.noop}))},_findActive:function(t){return!1===t?e():this.tabs.eq(t)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+e.escapeSelector(t)+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each((function(){e.data(this,"ui-tabs-destroy")?e(this).remove():e(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")})),this.tabs.each((function(){var t=e(this),n=t.data("ui-tabs-aria-controls");n?t.attr("aria-controls",n).removeData("ui-tabs-aria-controls"):t.removeAttr("aria-controls")})),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(t){var n=this.options.disabled;!1!==n&&(void 0===t?n=!1:(t=this._getIndex(t),n=Array.isArray(n)?e.map(n,(function(e){return e!==t?e:null})):e.map(this.tabs,(function(e,n){return n!==t?n:null}))),this._setOptionDisabled(n))},disable:function(t){var n=this.options.disabled;if(!0!==n){if(void 0===t)n=!0;else{if(t=this._getIndex(t),-1!==e.inArray(t,n))return;n=Array.isArray(n)?e.merge([t],n).sort():[t]}this._setOptionDisabled(n)}},load:function(t,n){t=this._getIndex(t);var i=this,r=this.tabs.eq(t),a=r.find(".ui-tabs-anchor"),o=this._getPanelForTab(r),s={tab:r,panel:o},l=function(e,t){"abort"===t&&i.panels.stop(!1,!0),i._removeClass(r,"ui-tabs-loading"),o.removeAttr("aria-busy"),e===i.xhr&&delete i.xhr};this._isLocal(a[0])||(this.xhr=e.ajax(this._ajaxSettings(a,n,s)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(r,"ui-tabs-loading"),o.attr("aria-busy","true"),this.xhr.done((function(e,t,r){setTimeout((function(){o.html(e),i._trigger("load",n,s),l(r,t)}),1)})).fail((function(e,t){setTimeout((function(){l(e,t)}),1)}))))},_ajaxSettings:function(t,n,i){var r=this;return{url:t.attr("href").replace(/#.*$/,""),beforeSend:function(t,a){return r._trigger("beforeLoad",n,e.extend({jqXHR:t,ajaxSettings:a},i))}}},_getPanelForTab:function(t){var n=e(t).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+n))}}),!1!==e.uiBackCompat&&e.widget("ui.tabs",e.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),e.ui.tabs,e.widget("ui.tooltip",{version:"1.13.2",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var t=e(this).attr("title");return e("<a>").text(t).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,t){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(t),e.data("ui-tooltip-id",t).attr("aria-describedby",String.prototype.trim.call(n.join(" ")))},_removeDescribedBy:function(t){var n=t.data("ui-tooltip-id"),i=(t.attr("aria-describedby")||"").split(/\s+/),r=e.inArray(n,i);-1!==r&&i.splice(r,1),t.removeData("ui-tooltip-id"),(i=String.prototype.trim.call(i.join(" ")))?t.attr("aria-describedby",i):t.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=e("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=e([])},_setOption:function(t,n){var i=this;this._super(t,n),"content"===t&&e.each(this.tooltips,(function(e,t){i._updateContent(t.element)}))},_setOptionDisabled:function(e){this[e?"_disable":"_enable"]()},_disable:function(){var t=this;e.each(this.tooltips,(function(n,i){var r=e.Event("blur");r.target=r.currentTarget=i.element[0],t.close(r,!0)})),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter((function(){var t=e(this);if(t.is("[title]"))return t.data("ui-tooltip-title",t.attr("title")).removeAttr("title")})))},_enable:function(){this.disabledTitles.each((function(){var t=e(this);t.data("ui-tooltip-title")&&t.attr("title",t.data("ui-tooltip-title"))})),this.disabledTitles=e([])},open:function(t){var n=this,i=e(t?t.target:this.element).closest(this.options.items);i.length&&!i.data("ui-tooltip-id")&&(i.attr("title")&&i.data("ui-tooltip-title",i.attr("title")),i.data("ui-tooltip-open",!0),t&&"mouseover"===t.type&&i.parents().each((function(){var t,i=e(this);i.data("ui-tooltip-open")&&((t=e.Event("blur")).target=t.currentTarget=this,n.close(t,!0)),i.attr("title")&&(i.uniqueId(),n.parents[this.id]={element:this,title:i.attr("title")},i.attr("title",""))})),this._registerCloseHandlers(t,i),this._updateContent(i,t))},_updateContent:function(e,t){var n,i=this.options.content,r=this,a=t?t.type:null;if("string"==typeof i||i.nodeType||i.jquery)return this._open(t,e,i);(n=i.call(e[0],(function(n){r._delay((function(){e.data("ui-tooltip-open")&&(t&&(t.type=a),this._open(t,e,n))}))})))&&this._open(t,e,n)},_open:function(t,n,i){var r,a,o,s,l=e.extend({},this.options.position);function u(e){l.of=e,a.is(":hidden")||a.position(l)}i&&((r=this._find(n))?r.tooltip.find(".ui-tooltip-content").html(i):(n.is("[title]")&&(t&&"mouseover"===t.type?n.attr("title",""):n.removeAttr("title")),r=this._tooltip(n),a=r.tooltip,this._addDescribedBy(n,a.attr("id")),a.find(".ui-tooltip-content").html(i),this.liveRegion.children().hide(),(s=e("<div>").html(a.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"),s.removeAttr("id").find("[id]").removeAttr("id"),s.appendTo(this.liveRegion),this.options.track&&t&&/^mouse/.test(t.type)?(this._on(this.document,{mousemove:u}),u(t)):a.position(e.extend({of:n},this.options.position)),a.hide(),this._show(a,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(o=this.delayedShow=setInterval((function(){a.is(":visible")&&(u(l.of),clearInterval(o))}),13)),this._trigger("open",t,{tooltip:a})))},_registerCloseHandlers:function(t,n){var i={keyup:function(t){if(t.keyCode===e.ui.keyCode.ESCAPE){var i=e.Event(t);i.currentTarget=n[0],this.close(i,!0)}}};n[0]!==this.element[0]&&(i.remove=function(){var e=this._find(n);e&&this._removeTooltip(e.tooltip)}),t&&"mouseover"!==t.type||(i.mouseleave="close"),t&&"focusin"!==t.type||(i.focusout="close"),this._on(!0,n,i)},close:function(t){var n,i=this,r=e(t?t.currentTarget:this.element),a=this._find(r);a?(n=a.tooltip,a.closing||(clearInterval(this.delayedShow),r.data("ui-tooltip-title")&&!r.attr("title")&&r.attr("title",r.data("ui-tooltip-title")),this._removeDescribedBy(r),a.hiding=!0,n.stop(!0),this._hide(n,this.options.hide,(function(){i._removeTooltip(e(this))})),r.removeData("ui-tooltip-open"),this._off(r,"mouseleave focusout keyup"),r[0]!==this.element[0]&&this._off(r,"remove"),this._off(this.document,"mousemove"),t&&"mouseleave"===t.type&&e.each(this.parents,(function(t,n){e(n.element).attr("title",n.title),delete i.parents[t]})),a.closing=!0,this._trigger("close",t,{tooltip:n}),a.hiding||(a.closing=!1))):r.removeData("ui-tooltip-open")},_tooltip:function(t){var n=e("<div>").attr("role","tooltip"),i=e("<div>").appendTo(n),r=n.uniqueId().attr("id");return this._addClass(i,"ui-tooltip-content"),this._addClass(n,"ui-tooltip","ui-widget ui-widget-content"),n.appendTo(this._appendTo(t)),this.tooltips[r]={element:t,tooltip:n}},_find:function(e){var t=e.data("ui-tooltip-id");return t?this.tooltips[t]:null},_removeTooltip:function(e){clearInterval(this.delayedShow),e.remove(),delete this.tooltips[e.attr("id")]},_appendTo:function(e){var t=e.closest(".ui-front, dialog");return t.length||(t=this.document[0].body),t},_destroy:function(){var t=this;e.each(this.tooltips,(function(n,i){var r=e.Event("blur"),a=i.element;r.target=r.currentTarget=a[0],t.close(r,!0),e("#"+n).remove(),a.data("ui-tooltip-title")&&(a.attr("title")||a.attr("title",a.data("ui-tooltip-title")),a.removeData("ui-tooltip-title"))})),this.liveRegion.remove()}}),!1!==e.uiBackCompat&&e.widget("ui.tooltip",e.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var e=this._superApply(arguments);return this.options.tooltipClass&&e.tooltip.addClass(this.options.tooltipClass),e}}),e.ui.tooltip},void 0===(a=i.apply(t,r))||(e.exports=a)}()},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var a=[],o=Object.getPrototypeOf,s=a.slice,l=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},u=a.push,c=a.indexOf,d={},h=d.toString,p=d.hasOwnProperty,f=p.toString,g=f.call(Object),m={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},y=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,a=(n=n||y).createElement("script");if(a.text=e,t)for(i in _)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,r);n.head.appendChild(a).parentNode.removeChild(a)}function A(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var x="3.7.1",C=/HTML$/i,k=function(e,t){return new k.fn.init(e,t)};function T(e){var t=!!e&&"length"in e&&e.length,n=A(e);return!b(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}k.fn=k.prototype={jquery:x,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:a.sort,splice:a.splice},k.extend=k.fn.extend=function(){var e,t,n,i,r,a,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||b(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&o!==i&&(u&&i&&(k.isPlainObject(i)||(r=Array.isArray(i)))?(n=o[t],a=r&&!Array.isArray(n)?[]:r||k.isPlainObject(n)?n:{},r=!1,o[t]=k.extend(u,a,i)):void 0!==i&&(o[t]=i));return o},k.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e)||(t=o(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||f.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(T(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},text:function(e){var t,n="",i=0,r=e.nodeType;if(!r)for(;t=e[i++];)n+=k.text(t);return 1===r||11===r?e.textContent:9===r?e.documentElement.textContent:3===r||4===r?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(T(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!C.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,a=e.length,o=!n;r<a;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,a=0,o=[];if(T(e))for(i=e.length;a<i;a++)null!=(r=t(e[a],a,n))&&o.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&o.push(r);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=a[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=a.pop,D=a.sort,P=a.splice,I="[\\x20\\t\\r\\n\\f]",N=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g");k.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var O=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function M(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}k.escapeSelector=function(e){return(e+"").replace(O,M)};var B=y,z=u;!function(){var e,t,n,r,o,l,u,d,h,f,g=z,b=k.expando,v=0,y=0,_=ee(),w=ee(),A=ee(),x=ee(),C=function(e,t){return e===t&&(o=!0),0},T="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\["+I+"*("+O+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+I+"*\\]",j=":("+O+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",L=new RegExp(I+"+","g"),R=new RegExp("^"+I+"*,"+I+"*"),H=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),F=new RegExp(I+"|>"),W=new RegExp(j),U=new RegExp("^"+O+"$"),q={ID:new RegExp("^#("+O+")"),CLASS:new RegExp("^\\.("+O+")"),TAG:new RegExp("^("+O+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+T+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,$=/^h\d$/i,V=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),Q=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},X=function(){le()},J=he((function(e){return!0===e.disabled&&S(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{g.apply(a=s.call(B.childNodes),B.childNodes),a[B.childNodes.length].nodeType}catch(e){g={apply:function(e,t){z.apply(e,s.call(t))},call:function(e){z.apply(e,s.call(arguments,1))}}}function Z(e,t,n,i){var r,a,o,s,u,c,p,f=t&&t.ownerDocument,v=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return n;if(!i&&(le(t),t=t||l,d)){if(11!==v&&(u=V.exec(e)))if(r=u[1]){if(9===v){if(!(o=t.getElementById(r)))return n;if(o.id===r)return g.call(n,o),n}else if(f&&(o=f.getElementById(r))&&Z.contains(t,o)&&o.id===r)return g.call(n,o),n}else{if(u[2])return g.apply(n,t.getElementsByTagName(e)),n;if((r=u[3])&&t.getElementsByClassName)return g.apply(n,t.getElementsByClassName(r)),n}if(!(x[e+" "]||h&&h.test(e))){if(p=e,f=t,1===v&&(F.test(e)||H.test(e))){for((f=K.test(e)&&se(t.parentNode)||t)==t&&m.scope||((s=t.getAttribute("id"))?s=k.escapeSelector(s):t.setAttribute("id",s=b)),a=(c=ce(e)).length;a--;)c[a]=(s?"#"+s:":scope")+" "+de(c[a]);p=c.join(",")}try{return g.apply(n,f.querySelectorAll(p)),n}catch(t){x(e,!0)}finally{s===b&&t.removeAttribute("id")}}}return ve(e.replace(N,"$1"),t,n,i)}function ee(){var e=[];return function n(i,r){return e.push(i+" ")>t.cacheLength&&delete n[e.shift()],n[i+" "]=r}}function te(e){return e[b]=!0,e}function ne(e){var t=l.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ie(e){return function(t){return S(t,"input")&&t.type===e}}function re(e){return function(t){return(S(t,"input")||S(t,"button"))&&t.type===e}}function ae(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&J(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function oe(e){return te((function(t){return t=+t,te((function(n,i){for(var r,a=e([],n.length,t),o=a.length;o--;)n[r=a[o]]&&(n[r]=!(i[r]=n[r]))}))}))}function se(e){return e&&void 0!==e.getElementsByTagName&&e}function le(e){var n,i=e?e.ownerDocument||e:B;return i!=l&&9===i.nodeType&&i.documentElement?(u=(l=i).documentElement,d=!k.isXMLDoc(l),f=u.matches||u.webkitMatchesSelector||u.msMatchesSelector,u.msMatchesSelector&&B!=l&&(n=l.defaultView)&&n.top!==n&&n.addEventListener("unload",X),m.getById=ne((function(e){return u.appendChild(e).id=k.expando,!l.getElementsByName||!l.getElementsByName(k.expando).length})),m.disconnectedMatch=ne((function(e){return f.call(e,"*")})),m.scope=ne((function(){return l.querySelectorAll(":scope")})),m.cssHas=ne((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),m.getById?(t.filter.ID=function(e){var t=e.replace(G,Q);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(G,Q);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n,i,r,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(r=t.getElementsByName(e),i=0;a=r[i++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&d)return t.getElementsByClassName(e)},h=[],ne((function(e){var t;u.appendChild(e).innerHTML="<a id='"+b+"' href='' disabled='disabled'></a><select id='"+b+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||h.push("\\["+I+"*(?:value|"+T+")"),e.querySelectorAll("[id~="+b+"-]").length||h.push("~="),e.querySelectorAll("a#"+b+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll(":checked").length||h.push(":checked"),(t=l.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),u.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),(t=l.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")")})),m.cssHas||h.push(":has"),h=h.length&&new RegExp(h.join("|")),C=function(e,t){if(e===t)return o=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!m.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument==B&&Z.contains(B,e)?-1:t===l||t.ownerDocument==B&&Z.contains(B,t)?1:r?c.call(r,e)-c.call(r,t):0:4&n?-1:1)},l):l}for(e in Z.matches=function(e,t){return Z(e,null,null,t)},Z.matchesSelector=function(e,t){if(le(e),d&&!x[t+" "]&&(!h||!h.test(t)))try{var n=f.call(e,t);if(n||m.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){x(t,!0)}return Z(t,l,null,[e]).length>0},Z.contains=function(e,t){return(e.ownerDocument||e)!=l&&le(e),k.contains(e,t)},Z.attr=function(e,n){(e.ownerDocument||e)!=l&&le(e);var i=t.attrHandle[n.toLowerCase()],r=i&&p.call(t.attrHandle,n.toLowerCase())?i(e,n,!d):void 0;return void 0!==r?r:e.getAttribute(n)},Z.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},k.uniqueSort=function(e){var t,n=[],i=0,a=0;if(o=!m.sortStable,r=!m.sortStable&&s.call(e,0),D.call(e,C),o){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)P.call(e,n[i],1)}return r=null,e},k.fn.uniqueSort=function(){return this.pushStack(k.uniqueSort(s.apply(this)))},t=k.expr={cacheLength:50,createPseudo:te,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(G,Q),e[3]=(e[3]||e[4]||e[5]||"").replace(G,Q),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||Z.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&Z.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=ce(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(G,Q).toLowerCase();return"*"===e?function(){return!0}:function(e){return S(e,t)}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=Z.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(L," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,p,f=a!==o?"nextSibling":"previousSibling",g=t.parentNode,m=s&&t.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(g){if(a){for(;f;){for(d=t;d=d[f];)if(s?S(d,m):1===d.nodeType)return!1;p=f="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?g.firstChild:g.lastChild],o&&y){for(_=(h=(u=(c=g[b]||(g[b]={}))[e]||[])[0]===v&&u[1])&&u[2],d=h&&g.childNodes[h];d=++h&&d&&d[f]||(_=h=0)||p.pop();)if(1===d.nodeType&&++_&&d===t){c[e]=[v,h,_];break}}else if(y&&(_=h=(u=(c=t[b]||(t[b]={}))[e]||[])[0]===v&&u[1]),!1===_)for(;(d=++h&&d&&d[f]||(_=h=0)||p.pop())&&(!(s?S(d,m):1===d.nodeType)||!++_||(y&&((c=d[b]||(d[b]={}))[e]=[v,_]),d!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,n){var i,r=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Z.error("unsupported pseudo: "+e);return r[b]?r(n):r.length>1?(i=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var i,a=r(e,n),o=a.length;o--;)e[i=c.call(e,a[o])]=!(t[i]=a[o])})):function(e){return r(e,0,i)}):r}},pseudos:{not:te((function(e){var t=[],n=[],i=be(e.replace(N,"$1"));return i[b]?te((function(e,t,n,r){for(var a,o=i(e,null,r,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))})):function(e,r,a){return t[0]=e,i(t,null,a,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Z(e,t).length>0}})),contains:te((function(e){return e=e.replace(G,Q),function(t){return(t.textContent||k.text(t)).indexOf(e)>-1}})),lang:te((function(e){return U.test(e||"")||Z.error("unsupported lang: "+e),e=e.replace(G,Q).toLowerCase(),function(t){var n;do{if(n=d?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===u},focus:function(e){return e===function(){try{return l.activeElement}catch(e){}}()&&l.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:ae(!1),disabled:ae(!0),checked:function(e){return S(e,"input")&&!!e.checked||S(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return $.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){return S(e,"input")&&"button"===e.type||S(e,"button")},text:function(e){var t;return S(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:oe((function(){return[0]})),last:oe((function(e,t){return[t-1]})),eq:oe((function(e,t,n){return[n<0?n+t:n]})),even:oe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:oe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:oe((function(e,t,n){var i;for(i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:oe((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=ie(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=re(e);function ue(){}function ce(e,n){var i,r,a,o,s,l,u,c=w[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=t.preFilter;s;){for(o in i&&!(r=R.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(a=[])),i=!1,(r=H.exec(s))&&(i=r.shift(),a.push({value:i,type:r[0].replace(N," ")}),s=s.slice(i.length)),t.filter)!(r=q[o].exec(s))||u[o]&&!(r=u[o](r))||(i=r.shift(),a.push({value:i,type:o,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?Z.error(e):w(e,l).slice(0)}function de(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function he(e,t,n){var i=t.dir,r=t.next,a=r||i,o=n&&"parentNode"===a,s=y++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var u,c,d=[v,s];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(c=t[b]||(t[b]={}),r&&S(t,r))t=t[i]||t;else{if((u=c[a])&&u[0]===v&&u[1]===s)return d[2]=u[2];if(c[a]=d,d[2]=e(t,n,l))return!0}return!1}}function pe(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function fe(e,t,n,i,r){for(var a,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(a=e[s])&&(n&&!n(a,i,r)||(o.push(a),u&&t.push(s)));return o}function ge(e,t,n,i,r,a){return i&&!i[b]&&(i=ge(i)),r&&!r[b]&&(r=ge(r,a)),te((function(a,o,s,l){var u,d,h,p,f=[],m=[],b=o.length,v=a||function(e,t,n){for(var i=0,r=t.length;i<r;i++)Z(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),y=!e||!a&&t?v:fe(v,f,e,s,l);if(n?n(y,p=r||(a?e:b||i)?[]:o,s,l):p=y,i)for(u=fe(p,m),i(u,[],s,l),d=u.length;d--;)(h=u[d])&&(p[m[d]]=!(y[m[d]]=h));if(a){if(r||e){if(r){for(u=[],d=p.length;d--;)(h=p[d])&&u.push(y[d]=h);r(null,p=[],u,l)}for(d=p.length;d--;)(h=p[d])&&(u=r?c.call(a,h):f[d])>-1&&(a[u]=!(o[u]=h))}}else p=fe(p===o?p.splice(b,p.length):p),r?r(null,o,p,l):g.apply(o,p)}))}function me(e){for(var i,r,a,o=e.length,s=t.relative[e[0].type],l=s||t.relative[" "],u=s?1:0,d=he((function(e){return e===i}),l,!0),h=he((function(e){return c.call(i,e)>-1}),l,!0),p=[function(e,t,r){var a=!s&&(r||t!=n)||((i=t).nodeType?d(e,t,r):h(e,t,r));return i=null,a}];u<o;u++)if(r=t.relative[e[u].type])p=[he(pe(p),r)];else{if((r=t.filter[e[u].type].apply(null,e[u].matches))[b]){for(a=++u;a<o&&!t.relative[e[a].type];a++);return ge(u>1&&pe(p),u>1&&de(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(N,"$1"),r,u<a&&me(e.slice(u,a)),a<o&&me(e=e.slice(a)),a<o&&de(e))}p.push(r)}return pe(p)}function be(e,i){var r,a=[],o=[],s=A[e+" "];if(!s){for(i||(i=ce(e)),r=i.length;r--;)(s=me(i[r]))[b]?a.push(s):o.push(s);s=A(e,function(e,i){var r=i.length>0,a=e.length>0,o=function(o,s,u,c,h){var p,f,m,b=0,y="0",_=o&&[],w=[],A=n,x=o||a&&t.find.TAG("*",h),C=v+=null==A?1:Math.random()||.1,T=x.length;for(h&&(n=s==l||s||h);y!==T&&null!=(p=x[y]);y++){if(a&&p){for(f=0,s||p.ownerDocument==l||(le(p),u=!d);m=e[f++];)if(m(p,s||l,u)){g.call(c,p);break}h&&(v=C)}r&&((p=!m&&p)&&b--,o&&_.push(p))}if(b+=y,r&&y!==b){for(f=0;m=i[f++];)m(_,w,s,u);if(o){if(b>0)for(;y--;)_[y]||w[y]||(w[y]=E.call(c));w=fe(w)}g.apply(c,w),h&&!o&&w.length>0&&b+i.length>1&&k.uniqueSort(c)}return h&&(v=C,n=A),_};return r?te(o):o}(o,a)),s.selector=e}return s}function ve(e,n,i,r){var a,o,s,l,u,c="function"==typeof e&&e,h=!r&&ce(e=c.selector||e);if(i=i||[],1===h.length){if((o=h[0]=h[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===n.nodeType&&d&&t.relative[o[1].type]){if(!(n=(t.find.ID(s.matches[0].replace(G,Q),n)||[])[0]))return i;c&&(n=n.parentNode),e=e.slice(o.shift().value.length)}for(a=q.needsContext.test(e)?0:o.length;a--&&(s=o[a],!t.relative[l=s.type]);)if((u=t.find[l])&&(r=u(s.matches[0].replace(G,Q),K.test(o[0].type)&&se(n.parentNode)||n))){if(o.splice(a,1),!(e=r.length&&de(o)))return g.apply(i,r),i;break}}return(c||be(e,h))(r,n,!d,i,!n||K.test(e)&&se(n.parentNode)||n),i}ue.prototype=t.filters=t.pseudos,t.setFilters=new ue,m.sortStable=b.split("").sort(C).join("")===b,le(),m.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(l.createElement("fieldset"))})),k.find=Z,k.expr[":"]=k.expr.pseudos,k.unique=k.uniqueSort,Z.compile=be,Z.select=ve,Z.setDocument=le,Z.tokenize=ce,Z.escape=k.escapeSelector,Z.getText=k.text,Z.isXML=k.isXMLDoc,Z.selectors=k.expr,Z.support=k.support,Z.uniqueSort=k.uniqueSort}();var j=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&k(e).is(n))break;i.push(e)}return i},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},R=k.expr.match.needsContext,H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function F(e,t,n){return b(t)?k.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?k.grep(e,(function(e){return c.call(t,e)>-1!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?k.find.matchesSelector(i,e)?[i]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<i;t++)if(k.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)k.find(e,r[t],n);return i>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(F(this,e||[],!1))},not:function(e){return this.pushStack(F(this,e||[],!0))},is:function(e){return!!F(this,"string"==typeof e&&R.test(e)?k(e):e||[],!1).length}});var W,U=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||W,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:U.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:y,!0)),H.test(i[1])&&k.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=y.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,W=k(y);var q=/^(?:parents|prev(?:Until|All))/,Y={children:!0,contents:!0,next:!0,prev:!0};function $(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,a=[],o="string"!=typeof e&&k(e);if(!R.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?k.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?c.call(k(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return j(e,"parentNode")},parentsUntil:function(e,t,n){return j(e,"parentNode",n)},next:function(e){return $(e,"nextSibling")},prev:function(e){return $(e,"previousSibling")},nextAll:function(e){return j(e,"nextSibling")},prevAll:function(e){return j(e,"previousSibling")},nextUntil:function(e,t,n){return j(e,"nextSibling",n)},prevUntil:function(e,t,n){return j(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,i){var r=k.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=k.filter(i,r)),this.length>1&&(Y[e]||k.uniqueSort(r),q.test(e)&&r.reverse()),this.pushStack(r)}}));var V=/[^\x20\t\r\n\f]+/g;function K(e){return e}function G(e){throw e}function Q(e,t,n,i){var r;try{e&&b(r=e.promise)?r.call(e).done(t).fail(n):e&&b(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(V)||[],(function(e,n){t[n]=!0})),t}(e):k.extend({},e);var t,n,i,r,a=[],o=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;o.length;s=-1)for(n=o.shift();++s<a.length;)!1===a[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=a.length,n=!1);e.memory||(n=!1),t=!1,r&&(a=n?[]:"")},u={add:function(){return a&&(n&&!t&&(s=a.length-1,o.push(n)),function t(n){k.each(n,(function(n,i){b(i)?e.unique&&u.has(i)||a.push(i):i&&i.length&&"string"!==A(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;(n=k.inArray(t,a,n))>-1;)a.splice(n,1),n<=s&&s--})),this},has:function(e){return e?k.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return r=o=[],a=n="",this},disabled:function(){return!a},lock:function(){return r=o=[],n||t||(a=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(n){k.each(t,(function(t,i){var r=b(e[i[4]])&&e[i[4]];a[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var a=0;function o(e,t,n,r){return function(){var s=this,l=arguments,u=function(){var i,u;if(!(e<a)){if((i=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=i&&("object"==typeof i||"function"==typeof i)&&i.then,b(u)?r?u.call(i,o(a,t,K,r),o(a,t,G,r)):(a++,u.call(i,o(a,t,K,r),o(a,t,G,r),o(a,t,K,t.notifyWith))):(n!==K&&(s=void 0,l=[i]),(r||t.resolveWith)(s,l))}},c=r?u:function(){try{u()}catch(i){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(i,c.error),e+1>=a&&(n!==G&&(s=void 0,l=[i]),t.rejectWith(s,l))}};e?c():(k.Deferred.getErrorHook?c.error=k.Deferred.getErrorHook():k.Deferred.getStackHook&&(c.error=k.Deferred.getStackHook()),i.setTimeout(c))}}return k.Deferred((function(i){t[0][3].add(o(0,i,b(r)?r:K,i.notifyWith)),t[1][3].add(o(0,i,b(e)?e:K)),t[2][3].add(o(0,i,b(n)?n:G))})).promise()},promise:function(e){return null!=e?k.extend(e,r):r}},a={};return k.each(t,(function(e,i){var o=i[2],s=i[5];r[i[1]]=o.add,s&&o.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(i[3].fire),a[i[0]]=function(){return a[i[0]+"With"](this===a?void 0:this,arguments),this},a[i[0]+"With"]=o.fireWith})),r.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),a=k.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||a.resolveWith(i,r)}};if(t<=1&&(Q(e,a.done(o(n)).resolve,a.reject,!t),"pending"===a.state()||b(r[n]&&r[n].then)))return a.then();for(;n--;)Q(r[n],o(n),a.reject);return a.promise()}});var X=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&X.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){i.setTimeout((function(){throw e}))};var J=k.Deferred();function Z(){y.removeEventListener("DOMContentLoaded",Z),i.removeEventListener("load",Z),k.ready()}k.fn.ready=function(e){return J.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||J.resolveWith(y,[k]))}}),k.ready.then=J.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(k.ready):(y.addEventListener("DOMContentLoaded",Z),i.addEventListener("load",Z));var ee=function(e,t,n,i,r,a,o){var s=0,l=e.length,u=null==n;if("object"===A(n))for(s in r=!0,n)ee(e,t,s,n[s],!0,a,o);else if(void 0!==i&&(r=!0,b(i)||(o=!0),u&&(o?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(k(e),n)})),t))for(;s<l;s++)t(e[s],n,o?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):a},te=/^-ms-/,ne=/-([a-z])/g;function ie(e,t){return t.toUpperCase()}function re(e){return e.replace(te,"ms-").replace(ne,ie)}var ae=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function oe(){this.expando=k.expando+oe.uid++}oe.uid=1,oe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},ae(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[re(t)]=n;else for(i in t)r[re(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][re(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(re):(t=re(t))in i?[t]:t.match(V)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||k.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var se=new oe,le=new oe,ue=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ce=/[A-Z]/g;function de(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ce,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ue.test(e)?JSON.parse(e):e)}(n)}catch(e){}le.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return le.hasData(e)||se.hasData(e)},data:function(e,t,n){return le.access(e,t,n)},removeData:function(e,t){le.remove(e,t)},_data:function(e,t,n){return se.access(e,t,n)},_removeData:function(e,t){se.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,i,r,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(r=le.get(a),1===a.nodeType&&!se.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=re(i.slice(5)),de(a,i,r[i]));se.set(a,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){le.set(this,e)})):ee(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=le.get(a,e))||void 0!==(n=de(a,e))?n:void 0;this.each((function(){le.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){le.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=se.get(e,t),n&&(!i||Array.isArray(n)?i=se.access(e,t,k.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),i=n.length,r=n.shift(),a=k._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete a.stop,r.call(e,(function(){k.dequeue(e,t)}),a)),!i&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return se.get(e,n)||se.access(e,n,{empty:k.Callbacks("once memory").add((function(){se.remove(e,[t+"queue",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=k.Deferred(),a=this,o=this.length,s=function(){--i||r.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=se.get(a[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var he=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,pe=new RegExp("^(?:([+-])=|)("+he+")([a-z%]*)$","i"),fe=["Top","Right","Bottom","Left"],ge=y.documentElement,me=function(e){return k.contains(e.ownerDocument,e)},be={composed:!0};ge.getRootNode&&(me=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(be)===e.ownerDocument});var ve=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&me(e)&&"none"===k.css(e,"display")};function ye(e,t,n,i){var r,a,o=20,s=i?function(){return i.cur()}:function(){return k.css(e,t,"")},l=s(),u=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==u&&+l)&&pe.exec(k.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)k.style(e,t,c+u),(1-a)*(1-(a=s()/l||.5))<=0&&(o=0),c/=a;c*=2,k.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var _e={};function we(e){var t,n=e.ownerDocument,i=e.nodeName,r=_e[i];return r||(t=n.body.appendChild(n.createElement(i)),r=k.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),_e[i]=r,r)}function Ae(e,t){for(var n,i,r=[],a=0,o=e.length;a<o;a++)(i=e[a]).style&&(n=i.style.display,t?("none"===n&&(r[a]=se.get(i,"display")||null,r[a]||(i.style.display="")),""===i.style.display&&ve(i)&&(r[a]=we(i))):"none"!==n&&(r[a]="none",se.set(i,"display",n)));for(a=0;a<o;a++)null!=r[a]&&(e[a].style.display=r[a]);return e}k.fn.extend({show:function(){return Ae(this,!0)},hide:function(){return Ae(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ve(this)?k(this).show():k(this).hide()}))}});var xe,Ce,ke=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Se=/^$|^module$|\/(?:java|ecma)script/i;xe=y.createDocumentFragment().appendChild(y.createElement("div")),(Ce=y.createElement("input")).setAttribute("type","radio"),Ce.setAttribute("checked","checked"),Ce.setAttribute("name","t"),xe.appendChild(Ce),m.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML="<option></option>",m.option=!!xe.lastChild;var Ee={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function De(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?k.merge([e],n):n}function Pe(e,t){for(var n=0,i=e.length;n<i;n++)se.set(e[n],"globalEval",!t||se.get(t[n],"globalEval"))}Ee.tbody=Ee.tfoot=Ee.colgroup=Ee.caption=Ee.thead,Ee.th=Ee.td,m.option||(Ee.optgroup=Ee.option=[1,"<select multiple='multiple'>","</select>"]);var Ie=/<|&#?\w+;/;function Ne(e,t,n,i,r){for(var a,o,s,l,u,c,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((a=e[p])||0===a)if("object"===A(a))k.merge(h,a.nodeType?[a]:a);else if(Ie.test(a)){for(o=o||d.appendChild(t.createElement("div")),s=(Te.exec(a)||["",""])[1].toLowerCase(),l=Ee[s]||Ee._default,o.innerHTML=l[1]+k.htmlPrefilter(a)+l[2],c=l[0];c--;)o=o.lastChild;k.merge(h,o.childNodes),(o=d.firstChild).textContent=""}else h.push(t.createTextNode(a));for(d.textContent="",p=0;a=h[p++];)if(i&&k.inArray(a,i)>-1)r&&r.push(a);else if(u=me(a),o=De(d.appendChild(a),"script"),u&&Pe(o),n)for(c=0;a=o[c++];)Se.test(a.type||"")&&n.push(a);return d}var Oe=/^([^.]*)(?:\.(.+)|)/;function Me(){return!0}function Be(){return!1}function ze(e,t,n,i,r,a){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)ze(e,s,n,i,t[s],a);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Be;else if(!r)return e;return 1===a&&(o=r,r=function(e){return k().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=k.guid++)),e.each((function(){k.event.add(this,t,r,i,n)}))}function je(e,t,n){n?(se.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var n,i=se.get(this,t);if(1&e.isTrigger&&this[t]){if(i)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),se.set(this,t,i),this[t](),n=se.get(this,t),se.set(this,t,!1),i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else i&&(se.set(this,t,k.event.trigger(i[0],i.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Me)}})):void 0===se.get(e,t)&&k.event.add(e,t,Me)}k.event={global:{},add:function(e,t,n,i,r){var a,o,s,l,u,c,d,h,p,f,g,m=se.get(e);if(ae(e))for(n.handler&&(n=(a=n).handler,r=a.selector),r&&k.find.matchesSelector(ge,r),n.guid||(n.guid=k.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(V)||[""]).length;u--;)p=g=(s=Oe.exec(t[u])||[])[1],f=(s[2]||"").split(".").sort(),p&&(d=k.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=k.event.special[p]||{},c=k.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&k.expr.match.needsContext.test(r),namespace:f.join(".")},a),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,o)||e.addEventListener&&e.addEventListener(p,o)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),k.event.global[p]=!0)},remove:function(e,t,n,i,r){var a,o,s,l,u,c,d,h,p,f,g,m=se.hasData(e)&&se.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(V)||[""]).length;u--;)if(p=g=(s=Oe.exec(t[u])||[])[1],f=(s[2]||"").split(".").sort(),p){for(d=k.event.special[p]||{},h=l[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=h.length;a--;)c=h[a],!r&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(a,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));o&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,m.handle)||k.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)k.event.remove(e,p+t[u],n,i,!0);k.isEmptyObject(l)&&se.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,a,o,s=new Array(arguments.length),l=k.event.fix(e),u=(se.get(this,"events")||Object.create(null))[l.type]||[],c=k.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=k.event.handlers.call(this,l,u),t=0;(r=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(i=((k.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,a,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(a=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?k(r,this).index(u)>-1:k.find(r,this,null,[u]).length),o[r]&&a.push(i);a.length&&s.push({elem:u,handlers:a})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ke.test(t.type)&&t.click&&S(t,"input")&&je(t,"click",!0),!1},trigger:function(e){var t=this||e;return ke.test(t.type)&&t.click&&S(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return ke.test(t.type)&&t.click&&S(t,"input")&&se.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Me:Be,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Be,isPropagationStopped:Be,isImmediatePropagationStopped:Be,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Me,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Me,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Me,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(y.documentMode){var n=se.get(this,"handle"),i=k.event.fix(e);i.type="focusin"===e.type?"focus":"blur",i.isSimulated=!0,n(e),i.target===i.currentTarget&&n(i)}else k.event.simulate(t,e.target,k.event.fix(e))}k.event.special[e]={setup:function(){var i;if(je(this,e,!0),!y.documentMode)return!1;(i=se.get(this,t))||this.addEventListener(t,n),se.set(this,t,(i||0)+1)},trigger:function(){return je(this,e),!0},teardown:function(){var e;if(!y.documentMode)return!1;(e=se.get(this,t)-1)?se.set(this,t,e):(this.removeEventListener(t,n),se.remove(this,t))},_default:function(t){return se.get(t.target,e)},delegateType:t},k.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=y.documentMode?this:i,a=se.get(r,t);a||(y.documentMode?this.addEventListener(t,n):i.addEventListener(e,n,!0)),se.set(r,t,(a||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=y.documentMode?this:i,a=se.get(r,t)-1;a?se.set(r,t,a):(y.documentMode?this.removeEventListener(t,n):i.removeEventListener(e,n,!0),se.remove(r,t))}}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||k.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,i){return ze(this,e,t,n,i)},one:function(e,t,n,i){return ze(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,k(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Be),this.each((function(){k.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Fe(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function We(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ue(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function qe(e,t){var n,i,r,a,o,s;if(1===t.nodeType){if(se.hasData(e)&&(s=se.get(e).events))for(r in se.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)k.event.add(t,r,s[r][n]);le.hasData(e)&&(a=le.access(e),o=k.extend({},a),le.set(t,o))}}function Ye(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ke.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function $e(e,t,n,i){t=l(t);var r,a,o,s,u,c,d=0,h=e.length,p=h-1,f=t[0],g=b(f);if(g||h>1&&"string"==typeof f&&!m.checkClone&&Re.test(f))return e.each((function(r){var a=e.eq(r);g&&(t[0]=f.call(this,r,a.html())),$e(a,t,n,i)}));if(h&&(a=(r=Ne(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=a),a||i)){for(s=(o=k.map(De(r,"script"),We)).length;d<h;d++)u=r,d!==p&&(u=k.clone(u,!0,!0),s&&k.merge(o,De(u,"script"))),n.call(e[d],u,d);if(s)for(c=o[o.length-1].ownerDocument,k.map(o,Ue),d=0;d<s;d++)u=o[d],Se.test(u.type||"")&&!se.access(u,"globalEval")&&k.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):w(u.textContent.replace(He,""),u,c))}return e}function Ve(e,t,n){for(var i,r=t?k.filter(t,e):e,a=0;null!=(i=r[a]);a++)n||1!==i.nodeType||k.cleanData(De(i)),i.parentNode&&(n&&me(i)&&Pe(De(i,"script")),i.parentNode.removeChild(i));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,a,o,s=e.cloneNode(!0),l=me(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(o=De(s),i=0,r=(a=De(e)).length;i<r;i++)Ye(a[i],o[i]);if(t)if(n)for(a=a||De(e),o=o||De(s),i=0,r=a.length;i<r;i++)qe(a[i],o[i]);else qe(e,s);return(o=De(s,"script")).length>0&&Pe(o,!l&&De(e,"script")),s},cleanData:function(e){for(var t,n,i,r=k.event.special,a=0;void 0!==(n=e[a]);a++)if(ae(n)){if(t=n[se.expando]){if(t.events)for(i in t.events)r[i]?k.event.remove(n,i):k.removeEvent(n,i,t.handle);n[se.expando]=void 0}n[le.expando]&&(n[le.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return $e(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Fe(this,e).appendChild(e)}))},prepend:function(){return $e(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Fe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(De(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!Ee[(Te.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(De(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return $e(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(De(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){k.fn[e]=function(e){for(var n,i=[],r=k(e),a=r.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),k(r[o])[t](n),u.apply(i,n.get());return this.pushStack(i)}}));var Ke=new RegExp("^("+he+")(?!px)[a-z%]+$","i"),Ge=/^--/,Qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Xe=function(e,t,n){var i,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=a[r];return i},Je=new RegExp(fe.join("|"),"i");function Ze(e,t,n){var i,r,a,o,s=Ge.test(t),l=e.style;return(n=n||Qe(e))&&(o=n.getPropertyValue(t)||n[t],s&&o&&(o=o.replace(N,"$1")||void 0),""!==o||me(e)||(o=k.style(e,t)),!m.pixelBoxStyles()&&Ke.test(o)&&Je.test(t)&&(i=l.width,r=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=o,o=n.width,l.width=i,l.minWidth=r,l.maxWidth=a)),void 0!==o?o+"":o}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ge.appendChild(u).appendChild(c);var e=i.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",o=36===t(e.right),r=36===t(e.width),c.style.position="absolute",a=12===t(c.offsetWidth/3),ge.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,r,a,o,s,l,u=y.createElement("div"),c=y.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,n,r;return null==s&&(e=y.createElement("table"),t=y.createElement("tr"),n=y.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ge.appendChild(e).appendChild(t).appendChild(n),r=i.getComputedStyle(t),s=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,ge.removeChild(e)),s}}))}();var tt=["Webkit","Moz","ms"],nt=y.createElement("div").style,it={};function rt(e){return k.cssProps[e]||it[e]||(e in nt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var at=/^(none|table(?!-c[ea]).+)/,ot={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=pe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ut(e,t,n,i,r,a){var o="width"===t?1:0,s=0,l=0,u=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(u+=k.css(e,n+fe[o],!0,r)),i?("content"===n&&(l-=k.css(e,"padding"+fe[o],!0,r)),"margin"!==n&&(l-=k.css(e,"border"+fe[o]+"Width",!0,r))):(l+=k.css(e,"padding"+fe[o],!0,r),"padding"!==n?l+=k.css(e,"border"+fe[o]+"Width",!0,r):s+=k.css(e,"border"+fe[o]+"Width",!0,r));return!i&&a>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-s-.5))||0),l+u}function ct(e,t,n){var i=Qe(e),r=(!m.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,i),a=r,o=Ze(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ke.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&r||!m.reliableTrDimensions()&&S(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===k.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===k.css(e,"boxSizing",!1,i),(a=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+ut(e,t,n||(r?"border":"content"),a,i,o)+"px"}function dt(e,t,n,i,r){return new dt.prototype.init(e,t,n,i,r)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,a,o,s=re(t),l=Ge.test(t),u=e.style;if(l||(t=rt(s)),o=k.cssHooks[t]||k.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:u[t];"string"==(a=typeof n)&&(r=pe.exec(n))&&r[1]&&(n=ye(e,t,r),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=r&&r[3]||(k.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,a,o,s=re(t);return Ge.test(t)||(t=rt(s)),(o=k.cssHooks[t]||k.cssHooks[s])&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=Ze(e,t,i)),"normal"===r&&t in st&&(r=st[t]),""===n||n?(a=parseFloat(r),!0===n||isFinite(a)?a||0:r):r}}),k.each(["height","width"],(function(e,t){k.cssHooks[t]={get:function(e,n,i){if(n)return!at.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,t,i):Xe(e,ot,(function(){return ct(e,t,i)}))},set:function(e,n,i){var r,a=Qe(e),o=!m.scrollboxSize()&&"absolute"===a.position,s=(o||i)&&"border-box"===k.css(e,"boxSizing",!1,a),l=i?ut(e,t,i,s,a):0;return s&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-ut(e,t,"border",!1,a)-.5)),l&&(r=pe.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),lt(0,n,l)}}})),k.cssHooks.marginLeft=et(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Xe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var i=0,r={},a="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+fe[i]+t]=a[i]||a[i-2]||a[0];return r}},"margin"!==e&&(k.cssHooks[e+t].set=lt)})),k.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var i,r,a={},o=0;if(Array.isArray(t)){for(i=Qe(e),r=t.length;o<r;o++)a[t[o]]=k.css(e,t[o],!1,i);return a}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,arguments.length>1)}}),k.Tween=dt,dt.prototype={constructor:dt,init:function(e,t,n,i,r,a){this.elem=e,this.prop=n,this.easing=r||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=a||(k.cssNumber[n]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,n=dt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):dt.propHooks._default.set(this),this}},dt.prototype.init.prototype=dt.prototype,dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},dt.propHooks.scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=dt.prototype.init,k.fx.step={};var ht,pt,ft=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function mt(){pt&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(mt):i.setTimeout(mt,k.fx.interval),k.fx.tick())}function bt(){return i.setTimeout((function(){ht=void 0})),ht=Date.now()}function vt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=fe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function yt(e,t,n){for(var i,r=(_t.tweeners[t]||[]).concat(_t.tweeners["*"]),a=0,o=r.length;a<o;a++)if(i=r[a].call(n,t,e))return i}function _t(e,t,n){var i,r,a=0,o=_t.prefilters.length,s=k.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=ht||bt(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),a=0,o=u.tweens.length;a<o;a++)u.tweens[a].run(i);return s.notifyWith(e,[u,i,n]),i<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||bt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=k.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,i,r,a,o;for(n in e)if(r=t[i=re(n)],a=e[n],Array.isArray(a)&&(r=a[1],a=e[n]=a[0]),n!==i&&(e[i]=a,delete e[n]),(o=k.cssHooks[i])&&"expand"in o)for(n in a=o.expand(a),delete e[i],a)n in e||(e[n]=a[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);a<o;a++)if(i=_t.prefilters[a].call(u,e,c,u.opts))return b(i.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return k.map(c,yt,u),b(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(_t,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ye(n.elem,e,pe.exec(t),n),n}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(V);for(var n,i=0,r=e.length;i<r;i++)n=e[i],_t.tweeners[n]=_t.tweeners[n]||[],_t.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,a,o,s,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,g=e.nodeType&&ve(e),m=se.get(e,"fxshow");for(i in n.queue||(null==(o=k._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,h.always((function(){h.always((function(){o.unqueued--,k.queue(e,"fx").length||o.empty.fire()}))}))),t)if(r=t[i],ft.test(r)){if(delete t[i],a=a||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||k.style(e,i)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=se.get(e,"display")),"none"===(c=k.css(e,"display"))&&(u?c=u:(Ae([e],!0),u=e.style.display||u,c=k.css(e,"display"),Ae([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===k.css(e,"float")&&(l||(h.done((function(){f.display=u})),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=se.access(e,"fxshow",{display:u}),a&&(m.hidden=!g),g&&Ae([e],!0),h.done((function(){for(i in g||Ae([e]),se.remove(e,"fxshow"),p)k.style(e,i,p[i])}))),l=yt(g?m[i]:0,i,h),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?_t.prefilters.unshift(e):_t.prefilters.push(e)}}),k.speed=function(e,t,n){var i=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return k.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in k.fx.speeds?i.duration=k.fx.speeds[i.duration]:i.duration=k.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&k.dequeue(this,i.queue)},i},k.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ve).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=k.isEmptyObject(e),a=k.speed(t,n,i),o=function(){var t=_t(this,k.extend({},e),a);(r||se.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",a=k.timers,o=se.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&gt.test(r)&&i(o[r]);for(r=a.length;r--;)a[r].elem!==this||null!=e&&a[r].queue!==e||(a[r].anim.stop(n),t=!1,a.splice(r,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=se.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],a=k.timers,o=i?i.length:0;for(n.finish=!0,k.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),k.each(["toggle","show","hide"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(vt(t,!0),e,i,r)}})),k.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){k.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ht=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ht=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){pt||(pt=!0,mt())},k.fx.stop=function(){pt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(r)}}))},function(){var e=y.createElement("input"),t=y.createElement("select").appendChild(y.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=y.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var wt,At=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return ee(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?k.prop(e,t,n):(1===a&&k.isXMLDoc(e)||(r=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=k.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(V);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=At[t]||k.find.attr;At[t]=function(e,t,i){var r,a,o=t.toLowerCase();return i||(a=At[o],At[o]=r,r=null!=n(e,t,i)?o:null,At[o]=a),r}}));var xt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function kt(e){return(e.match(V)||[]).join(" ")}function Tt(e){return e.getAttribute&&e.getAttribute("class")||""}function St(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(V)||[]}k.fn.extend({prop:function(e,t){return ee(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&k.isXMLDoc(e)||(t=k.propFix[t]||t,r=k.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):xt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,i,r,a,o;return b(e)?this.each((function(t){k(this).addClass(e.call(this,t,Tt(this)))})):(t=St(e)).length?this.each((function(){if(i=Tt(this),n=1===this.nodeType&&" "+kt(i)+" "){for(a=0;a<t.length;a++)r=t[a],n.indexOf(" "+r+" ")<0&&(n+=r+" ");o=kt(n),i!==o&&this.setAttribute("class",o)}})):this},removeClass:function(e){var t,n,i,r,a,o;return b(e)?this.each((function(t){k(this).removeClass(e.call(this,t,Tt(this)))})):arguments.length?(t=St(e)).length?this.each((function(){if(i=Tt(this),n=1===this.nodeType&&" "+kt(i)+" "){for(a=0;a<t.length;a++)for(r=t[a];n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");o=kt(n),i!==o&&this.setAttribute("class",o)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,i,r,a,o=typeof e,s="string"===o||Array.isArray(e);return b(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,Tt(this),t),t)})):"boolean"==typeof t&&s?t?this.addClass(e):this.removeClass(e):(n=St(e),this.each((function(){if(s)for(a=k(this),r=0;r<n.length;r++)i=n[r],a.hasClass(i)?a.removeClass(i):a.addClass(i);else void 0!==e&&"boolean"!==o||((i=Tt(this))&&se.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||!1===e?"":se.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+kt(Tt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;k.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=b(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,k(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=k.map(r,(function(e){return null==e?"":e+""}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=k.valHooks[r.type]||k.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Et,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:kt(k.text(e))}},select:{get:function(e){var t,n,i,r=e.options,a=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?a+1:r.length;for(i=a<0?l:o?a:0;i<l;i++)if(((n=r[i]).selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=k(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,a=k.makeArray(t),o=r.length;o--;)((i=r[o]).selected=k.inArray(k.valHooks.option.get(i),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},m.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var Dt=i.location,Pt={guid:Date.now()},It=/\?/;k.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||k.error("Invalid XML: "+(n?k.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Nt=/^(?:focusinfocus|focusoutblur)$/,Ot=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var a,o,s,l,u,c,d,h,f=[n||y],g=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(o=h=s=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!Nt.test(g+k.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[k.expando]?e:new k.Event(g,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),d=k.event.special[g]||{},r||!d.trigger||!1!==d.trigger.apply(n,t))){if(!r&&!d.noBubble&&!v(n)){for(l=d.delegateType||g,Nt.test(l+g)||(o=o.parentNode);o;o=o.parentNode)f.push(o),s=o;s===(n.ownerDocument||y)&&f.push(s.defaultView||s.parentWindow||i)}for(a=0;(o=f[a++])&&!e.isPropagationStopped();)h=o,e.type=a>1?l:d.bindType||g,(c=(se.get(o,"events")||Object.create(null))[e.type]&&se.get(o,"handle"))&&c.apply(o,t),(c=u&&o[u])&&c.apply&&ae(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),t)||!ae(n)||u&&b(n[g])&&!v(n)&&((s=n[u])&&(n[u]=null),k.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,Ot),n[g](),e.isPropagationStopped()&&h.removeEventListener(g,Ot),k.event.triggered=void 0,s&&(n[u]=s)),e.result}},simulate:function(e,t,n){var i=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(i,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}});var Mt=/\[\]$/,Bt=/\r?\n/g,zt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,i){var r;if(Array.isArray(t))k.each(t,(function(t,r){n||Mt.test(e)?i(e,r):Lt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==A(t))i(e,t);else for(r in t)Lt(e+"["+r+"]",t[r],n,i)}k.param=function(e,t){var n,i=[],r=function(e,t){var n=b(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){r(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,r);return i.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!zt.test(e)&&(this.checked||!ke.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(Bt,"\r\n")}})):{name:t.name,value:n.replace(Bt,"\r\n")}})).get()}});var Rt=/%20/g,Ht=/#.*$/,Ft=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ut=/^(?:GET|HEAD)$/,qt=/^\/\//,Yt={},$t={},Vt="*/".concat("*"),Kt=y.createElement("a");function Gt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,a=t.toLowerCase().match(V)||[];if(b(n))for(;i=a[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Qt(e,t,n,i){var r={},a=e===$t;function o(s){var l;return r[s]=!0,k.each(e[s]||[],(function(e,s){var u=s(t,n,i);return"string"!=typeof u||a||r[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!r["*"]&&o("*")}function Xt(e,t){var n,i,r=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&k.extend(!0,e,i),e}Kt.href=Dt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Xt(Xt(e,k.ajaxSettings),t):Xt(k.ajaxSettings,e)},ajaxPrefilter:Gt(Yt),ajaxTransport:Gt($t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,a,o,s,l,u,c,d,h,p=k.ajaxSetup({},t),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?k(f):k.event,m=k.Deferred(),b=k.Callbacks("once memory"),v=p.statusCode||{},_={},w={},A="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Wt.exec(a);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)x.always(e[x.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||A;return n&&n.abort(t),C(0,t),this}};if(m.promise(x),p.url=((e||p.url||Dt.href)+"").replace(qt,Dt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(V)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Kt.protocol+"//"+Kt.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=k.param(p.data,p.traditional)),Qt(Yt,p,t,x),u)return x;for(d in(c=k.event&&p.global)&&0==k.active++&&k.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ut.test(p.type),r=p.url.replace(Ht,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Rt,"+")):(h=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(It.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Ft,"$1"),h=(It.test(r)?"&":"?")+"_="+Pt.guid+++h),p.url=r+h),p.ifModified&&(k.lastModified[r]&&x.setRequestHeader("If-Modified-Since",k.lastModified[r]),k.etag[r]&&x.setRequestHeader("If-None-Match",k.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Vt+"; q=0.01":""):p.accepts["*"]),p.headers)x.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(f,x,p)||u))return x.abort();if(A="abort",b.add(p.complete),x.done(p.success),x.fail(p.error),n=Qt($t,p,t,x)){if(x.readyState=1,c&&g.trigger("ajaxSend",[x,p]),u)return x;p.async&&p.timeout>0&&(s=i.setTimeout((function(){x.abort("timeout")}),p.timeout));try{u=!1,n.send(_,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,o,l){var d,h,y,_,w,A=t;u||(u=!0,s&&i.clearTimeout(s),n=void 0,a=l||"",x.readyState=e>0?4:0,d=e>=200&&e<300||304===e,o&&(_=function(e,t,n){for(var i,r,a,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)a=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){a=r;break}o||(o=r)}a=a||o}if(a)return a!==l[0]&&l.unshift(a),n[a]}(p,x,o)),!d&&k.inArray("script",p.dataTypes)>-1&&k.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=function(e,t,n,i){var r,a,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(a=c.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=u[l+" "+a]||u["* "+a]))for(r in u)if((s=r.split(" "))[1]===a&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[r]:!0!==u[r]&&(a=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(p,_,x,d),d?(p.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(k.lastModified[r]=w),(w=x.getResponseHeader("etag"))&&(k.etag[r]=w)),204===e||"HEAD"===p.type?A="nocontent":304===e?A="notmodified":(A=_.state,h=_.data,d=!(y=_.error))):(y=A,!e&&A||(A="error",e<0&&(e=0))),x.status=e,x.statusText=(t||A)+"",d?m.resolveWith(f,[h,A,x]):m.rejectWith(f,[x,A,y]),x.statusCode(v),v=void 0,c&&g.trigger(d?"ajaxSuccess":"ajaxError",[x,p,d?h:y]),b.fireWith(f,[x,A]),c&&(g.trigger("ajaxComplete",[x,p]),--k.active||k.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],(function(e,t){k[t]=function(e,n,i,r){return b(n)&&(r=r||i,i=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:r,data:n,success:i},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return b(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=b(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},Zt=k.ajaxSettings.xhr();m.cors=!!Zt&&"withCredentials"in Zt,m.ajax=Zt=!!Zt,k.ajaxTransport((function(e){var t,n;if(m.cors||Zt&&!e.crossDomain)return{send:function(r,a){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?a(0,"error"):a(s.status,s.statusText):a(Jt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),k.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=k("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),y.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||k.expando+"_"+Pt.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",(function(e,t,n){var r,a,o,s=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(nn,"$1"+r):!1!==e.jsonp&&(e.url+=(It.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",a=i[r],i[r]=function(){o=arguments},n.always((function(){void 0===a?k(i).removeProp(r):i[r]=a,e[r]&&(e.jsonpCallback=t.jsonpCallback,tn.push(r)),o&&b(a)&&a(o[0]),o=a=void 0})),"script"})),m.createHTMLDocument=((en=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,t.head.appendChild(i)):t=y),a=!n&&[],(r=H.exec(e))?[t.createElement(r[1])]:(r=Ne([e],t,a),a&&a.length&&k(a).remove(),k.merge([],r.childNodes)));var i,r,a},k.fn.load=function(e,t,n){var i,r,a,o=this,s=e.indexOf(" ");return s>-1&&(i=kt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&k.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){a=arguments,o.html(i?k("<div>").append(k.parseHTML(e)).find(i):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var i,r,a,o,s,l,u=k.css(e,"position"),c=k(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),a=k.css(e,"top"),l=k.css(e,"left"),("absolute"===u||"fixed"===u)&&(a+l).indexOf("auto")>-1?(o=(i=c.position()).top,r=i.left):(o=parseFloat(a)||0,r=parseFloat(l)||0),b(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(d.top=t.top-s.top+o),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):c.css(d)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===k.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),r.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-k.css(i,"marginTop",!0),left:t.left-r.left-k.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||ge}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;k.fn[e]=function(i){return ee(this,(function(e,i,r){var a;if(v(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===r)return a?a[t]:e[i];a?a.scrollTo(n?a.pageXOffset:r,n?r:a.pageYOffset):e[i]=r}),e,i,arguments.length)}})),k.each(["top","left"],(function(e,t){k.cssHooks[t]=et(m.pixelPosition,(function(e,n){if(n)return n=Ze(e,t),Ke.test(n)?k(e).position()[t]+"px":n}))})),k.each({Height:"height",Width:"width"},(function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){k.fn[i]=function(r,a){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===a?"margin":"border");return ee(this,(function(t,n,r){var a;return v(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===r?k.css(t,n,s):k.style(t,n,r,s)}),t,o?r:void 0,o)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var rn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=s.call(arguments,2),r=function(){return e.apply(t||this,i.concat(s.call(arguments)))},r.guid=e.guid=e.guid||k.guid++,r},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=S,k.isFunction=b,k.isWindow=v,k.camelCase=re,k.type=A,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(rn,"$1")},void 0===(n=function(){return k}.apply(t,[]))||(e.exports=n);var an=i.jQuery,on=i.$;return k.noConflict=function(e){return i.$===k&&(i.$=on),e&&i.jQuery===k&&(i.jQuery=an),k},void 0===r&&(i.jQuery=i.$=k),k}))},448:function(e,t,n){"use strict";var i=n(294),r=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},f={};function g(e,t,n,i,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,t,n,i){var r=m.hasOwnProperty(t)?m[t]:null;(null!==r?0!==r.type:i||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,i)&&(n=null),i||null===r?function(e){return!!d.call(f,e)||!d.call(p,e)&&(h.test(e)?f[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,i=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),A=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),T=Symbol.for("react.provider"),S=Symbol.for("react.context"),E=Symbol.for("react.forward_ref"),D=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var z,j=Object.assign;function L(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var R=!1;function H(e,t){if(!e||R)return"";R=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var i=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){i=e}e.call(t.prototype)}else{try{throw Error()}catch(e){i=e}e()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),a=i.stack.split("\n"),o=r.length-1,s=a.length-1;1<=o&&0<=s&&r[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(r[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||r[o]!==a[s]){var l="\n"+r[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=o&&0<=s);break}}}finally{R=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function F(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 1:return H(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case A:return"Portal";case k:return"Profiler";case C:return"StrictMode";case D:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case E:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){i=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=Y(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){X(e,t);var n=q(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,i){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&i&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(i&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ae(e,t){var n=q(t.value),i=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,i){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function he(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=ge(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,r):e[n]=r}}Object.keys(pe).forEach((function(e){fe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var be=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,xe=null,Ce=null;function ke(e){if(e=yr(e)){if("function"!=typeof Ae)throw Error(a(280));var t=e.stateNode;t&&(t=wr(t),Ae(e.stateNode,e.type,t))}}function Te(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function Se(){if(xe){var e=xe,t=Ce;if(Ce=xe=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Ee(e,t){return e(t)}function De(){}var Pe=!1;function Ie(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Ee(e,t,n)}finally{Pe=!1,(null!==xe||null!==Ce)&&(De(),Se())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var i=wr(n);if(null===i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Oe=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Oe=!1}function Be(e,t,n,i,r,a,o,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var ze=!1,je=null,Le=!1,Re=null,He={onError:function(e){ze=!0,je=e}};function Fe(e,t,n,i,r,a,o,s,l){ze=!1,je=null,Be.apply(He,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function qe(e){if(We(e)!==e)throw Error(a(188))}function Ye(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,i=t;;){var r=n.return;if(null===r)break;var o=r.alternate;if(null===o){if(null!==(i=r.return)){n=i;continue}break}if(r.child===o.child){for(o=r.child;o;){if(o===n)return qe(r),e;if(o===i)return qe(r),t;o=o.sibling}throw Error(a(188))}if(n.return!==i.return)n=r,i=o;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,i=o;break}if(l===i){s=!0,i=r,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,i=r;break}if(l===i){s=!0,i=o,n=r;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==i)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var Ve=r.unstable_scheduleCallback,Ke=r.unstable_cancelCallback,Ge=r.unstable_shouldYield,Qe=r.unstable_requestPaint,Xe=r.unstable_now,Je=r.unstable_getCurrentPriorityLevel,Ze=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,nt=r.unstable_LowPriority,it=r.unstable_IdlePriority,rt=null,at=null,ot=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var n=e.pendingLanes;if(0===n)return 0;var i=0,r=e.suspendedLanes,a=e.pingedLanes,o=268435455&n;if(0!==o){var s=o&~r;0!==s?i=dt(s):0!=(a&=o)&&(i=dt(a))}else 0!=(o=n&~r)?i=dt(o):0!==a&&(i=dt(a));if(0===i)return 0;if(0!==t&&t!==i&&0==(t&r)&&((r=i&-i)>=(a=t&-t)||16===r&&0!=(4194240&a)))return t;if(0!=(4&i)&&(i|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=i;0<t;)r=1<<(n=31-ot(t)),i|=e[n],t&=~r;return i}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var i=31-ot(n),r=1<<i;r&t|e[i]&t&&(e[i]|=t),n&=~r}}var yt=0;function _t(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,At,xt,Ct,kt,Tt=!1,St=[],Et=null,Dt=null,Pt=null,It=new Map,Nt=new Map,Ot=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Bt(e,t){switch(e){case"focusin":case"focusout":Et=null;break;case"dragenter":case"dragleave":Dt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function zt(e,t,n,i,r,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:i,nativeEvent:a,targetContainers:[r]},null!==t&&null!==(t=yr(t))&&At(t),e):(e.eventSystemFlags|=i,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function jt(e){var t=vr(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=yr(n))&&At(t),e.blockedOn=n,!1;var i=new(n=e.nativeEvent).constructor(n.type,n);_e=i,n.target.dispatchEvent(i),_e=null,t.shift()}return!0}function Rt(e,t,n){Lt(e)&&n.delete(t)}function Ht(){Tt=!1,null!==Et&&Lt(Et)&&(Et=null),null!==Dt&&Lt(Dt)&&(Dt=null),null!==Pt&&Lt(Pt)&&(Pt=null),It.forEach(Rt),Nt.forEach(Rt)}function Ft(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ht)))}function Wt(e){function t(t){return Ft(t,e)}if(0<St.length){Ft(St[0],e);for(var n=1;n<St.length;n++){var i=St[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==Et&&Ft(Et,e),null!==Dt&&Ft(Dt,e),null!==Pt&&Ft(Pt,e),It.forEach(t),Nt.forEach(t),n=0;n<Ot.length;n++)(i=Ot[n]).blockedOn===e&&(i.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)jt(n),null===n.blockedOn&&Ot.shift()}var Ut=_.ReactCurrentBatchConfig,qt=!0;function Yt(e,t,n,i){var r=yt,a=Ut.transition;Ut.transition=null;try{yt=1,Vt(e,t,n,i)}finally{yt=r,Ut.transition=a}}function $t(e,t,n,i){var r=yt,a=Ut.transition;Ut.transition=null;try{yt=4,Vt(e,t,n,i)}finally{yt=r,Ut.transition=a}}function Vt(e,t,n,i){if(qt){var r=Gt(e,t,n,i);if(null===r)qi(e,t,i,Kt,n),Bt(e,i);else if(function(e,t,n,i,r){switch(t){case"focusin":return Et=zt(Et,e,t,n,i,r),!0;case"dragenter":return Dt=zt(Dt,e,t,n,i,r),!0;case"mouseover":return Pt=zt(Pt,e,t,n,i,r),!0;case"pointerover":var a=r.pointerId;return It.set(a,zt(It.get(a)||null,e,t,n,i,r)),!0;case"gotpointercapture":return a=r.pointerId,Nt.set(a,zt(Nt.get(a)||null,e,t,n,i,r)),!0}return!1}(r,e,t,n,i))i.stopPropagation();else if(Bt(e,i),4&t&&-1<Mt.indexOf(e)){for(;null!==r;){var a=yr(r);if(null!==a&&wt(a),null===(a=Gt(e,t,n,i))&&qi(e,t,i,Kt,n),a===r)break;r=a}null!==r&&i.stopPropagation()}else qi(e,t,i,null,n)}}var Kt=null;function Gt(e,t,n,i){if(Kt=null,null!==(e=vr(e=we(i))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case it:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,i=n.length,r="value"in Xt?Xt.value:Xt.textContent,a=r.length;for(e=0;e<i&&n[e]===r[e];e++);var o=i-e;for(t=1;t<=o&&n[i-t]===r[a-t];t++);return Zt=r.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,i,r,a){for(var o in this._reactName=t,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(r):r[o]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=j({},un,{view:0,detail:0}),hn=an(dn),pn=j({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),fn=an(pn),gn=an(j({},pn,{dataTransfer:0})),mn=an(j({},dn,{relatedTarget:0})),bn=an(j({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=j({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(vn),_n=an(j({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function kn(){return Cn}var Tn=j({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Sn=an(Tn),En=an(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=an(j({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Pn=an(j({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(In),On=[9,13,27,32],Mn=c&&"CompositionEvent"in window,Bn=null;c&&"documentMode"in document&&(Bn=document.documentMode);var zn=c&&"TextEvent"in window&&!Bn,jn=c&&(!Mn||Bn&&8<Bn&&11>=Bn),Ln=String.fromCharCode(32),Rn=!1;function Hn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Yn(e,t,n,i){Te(i),0<(t=$i(t,"onChange")).length&&(n=new cn("onChange","change",null,n,i),e.push({event:n,listeners:t}))}var $n=null,Vn=null;function Kn(e){Li(e,0)}function Gn(e){if(V(_r(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var ei=document.createElement("div");ei.setAttribute("oninput","return;"),Zn="function"==typeof ei.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function ti(){$n&&($n.detachEvent("onpropertychange",ni),Vn=$n=null)}function ni(e){if("value"===e.propertyName&&Gn(Vn)){var t=[];Yn(t,Vn,e,we(e)),Ie(Kn,t)}}function ii(e,t,n){"focusin"===e?(ti(),Vn=n,($n=t).attachEvent("onpropertychange",ni)):"focusout"===e&&ti()}function ri(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Vn)}function ai(e,t){if("click"===e)return Gn(t)}function oi(e,t){if("input"===e||"change"===e)return Gn(t)}var si="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function li(e,t){if(si(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++){var r=n[i];if(!d.call(t,r)||!si(e[r],t[r]))return!1}return!0}function ui(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ci(e,t){var n,i=ui(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=ui(i)}}function di(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?di(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hi(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pi(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function fi(e){var t=hi(),n=e.focusedElem,i=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&di(n.ownerDocument.documentElement,n)){if(null!==i&&pi(n))if(t=i.start,void 0===(e=i.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=n.textContent.length,a=Math.min(i.start,r);i=void 0===i.end?a:Math.min(i.end,r),!e.extend&&a>i&&(r=i,i=a,a=r),r=ci(n,a);var o=ci(n,i);r&&o&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),a>i?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gi=c&&"documentMode"in document&&11>=document.documentMode,mi=null,bi=null,vi=null,yi=!1;function _i(e,t,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yi||null==mi||mi!==K(i)||(i="selectionStart"in(i=mi)&&pi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},vi&&li(vi,i)||(vi=i,0<(i=$i(bi,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:i}),t.target=mi)))}function wi(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ai={animationend:wi("Animation","AnimationEnd"),animationiteration:wi("Animation","AnimationIteration"),animationstart:wi("Animation","AnimationStart"),transitionend:wi("Transition","TransitionEnd")},xi={},Ci={};function ki(e){if(xi[e])return xi[e];if(!Ai[e])return e;var t,n=Ai[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ci)return xi[e]=n[t];return e}c&&(Ci=document.createElement("div").style,"AnimationEvent"in window||(delete Ai.animationend.animation,delete Ai.animationiteration.animation,delete Ai.animationstart.animation),"TransitionEvent"in window||delete Ai.transitionend.transition);var Ti=ki("animationend"),Si=ki("animationiteration"),Ei=ki("animationstart"),Di=ki("transitionend"),Pi=new Map,Ii="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ni(e,t){Pi.set(e,t),l(t,[e])}for(var Oi=0;Oi<Ii.length;Oi++){var Mi=Ii[Oi];Ni(Mi.toLowerCase(),"on"+(Mi[0].toUpperCase()+Mi.slice(1)))}Ni(Ti,"onAnimationEnd"),Ni(Si,"onAnimationIteration"),Ni(Ei,"onAnimationStart"),Ni("dblclick","onDoubleClick"),Ni("focusin","onFocus"),Ni("focusout","onBlur"),Ni(Di,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Bi="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zi=new Set("cancel close invalid load scroll toggle".split(" ").concat(Bi));function ji(e,t,n){var i=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,i,r,o,s,l,u){if(Fe.apply(this,arguments),ze){if(!ze)throw Error(a(198));var c=je;ze=!1,je=null,Le||(Le=!0,Re=c)}}(i,t,void 0,e),e.currentTarget=null}function Li(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var i=e[n],r=i.event;i=i.listeners;e:{var a=void 0;if(t)for(var o=i.length-1;0<=o;o--){var s=i[o],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&r.isPropagationStopped())break e;ji(r,s,u),a=l}else for(o=0;o<i.length;o++){if(l=(s=i[o]).instance,u=s.currentTarget,s=s.listener,l!==a&&r.isPropagationStopped())break e;ji(r,s,u),a=l}}}if(Le)throw e=Re,Le=!1,Re=null,e}function Ri(e,t){var n=t[gr];void 0===n&&(n=t[gr]=new Set);var i=e+"__bubble";n.has(i)||(Ui(t,e,2,!1),n.add(i))}function Hi(e,t,n){var i=0;t&&(i|=4),Ui(n,e,i,t)}var Fi="_reactListening"+Math.random().toString(36).slice(2);function Wi(e){if(!e[Fi]){e[Fi]=!0,o.forEach((function(t){"selectionchange"!==t&&(zi.has(t)||Hi(t,!1,e),Hi(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fi]||(t[Fi]=!0,Hi("selectionchange",!1,t))}}function Ui(e,t,n,i){switch(Qt(t)){case 1:var r=Yt;break;case 4:r=$t;break;default:r=Vt}n=r.bind(null,t,n,e),r=void 0,!Oe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),i?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function qi(e,t,n,i,r){var a=i;if(0==(1&t)&&0==(2&t)&&null!==i)e:for(;;){if(null===i)return;var o=i.tag;if(3===o||4===o){var s=i.stateNode.containerInfo;if(s===r||8===s.nodeType&&s.parentNode===r)break;if(4===o)for(o=i.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;o=o.return}for(;null!==s;){if(null===(o=vr(s)))return;if(5===(l=o.tag)||6===l){i=a=o;continue e}s=s.parentNode}}i=i.return}Ie((function(){var i=a,r=we(n),o=[];e:{var s=Pi.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Sn;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=fn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Ti:case Si:case Ei:l=bn;break;case Di:l=Pn;break;case"scroll":l=hn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=En}var c=0!=(4&t),d=!c&&"scroll"===e,h=c?null!==s?s+"Capture":null:s;c=[];for(var p,f=i;null!==f;){var g=(p=f).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==h&&null!=(g=Ne(f,h))&&c.push(Yi(f,g,p))),d)break;f=f.return}0<c.length&&(s=new l(s,u,null,n,r),o.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===_e||!(u=n.relatedTarget||n.fromElement)||!vr(u)&&!u[fr])&&(l||s)&&(s=r.window===r?r:(s=r.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(u=(u=n.relatedTarget||n.toElement)?vr(u):null)&&(u!==(d=We(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=i),l!==u)){if(c=fn,g="onMouseLeave",h="onMouseEnter",f="mouse","pointerout"!==e&&"pointerover"!==e||(c=En,g="onPointerLeave",h="onPointerEnter",f="pointer"),d=null==l?s:_r(l),p=null==u?s:_r(u),(s=new c(g,f+"leave",l,n,r)).target=d,s.relatedTarget=p,g=null,vr(r)===i&&((c=new c(h,f+"enter",u,n,r)).target=p,c.relatedTarget=d,g=c),d=g,l&&u)e:{for(h=u,f=0,p=c=l;p;p=Vi(p))f++;for(p=0,g=h;g;g=Vi(g))p++;for(;0<f-p;)c=Vi(c),f--;for(;0<p-f;)h=Vi(h),p--;for(;f--;){if(c===h||null!==h&&c===h.alternate)break e;c=Vi(c),h=Vi(h)}c=null}else c=null;null!==l&&Ki(o,s,l,c,!1),null!==u&&null!==d&&Ki(o,d,u,c,!0)}if("select"===(l=(s=i?_r(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Qn;else if(qn(s))if(Xn)m=oi;else{m=ri;var b=ii}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ai);switch(m&&(m=m(e,i))?Yn(o,m,n,r):(b&&b(e,s,i),"focusout"===e&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&ee(s,"number",s.value)),b=i?_r(i):window,e){case"focusin":(qn(b)||"true"===b.contentEditable)&&(mi=b,bi=i,vi=null);break;case"focusout":vi=bi=mi=null;break;case"mousedown":yi=!0;break;case"contextmenu":case"mouseup":case"dragend":yi=!1,_i(o,n,r);break;case"selectionchange":if(gi)break;case"keydown":case"keyup":_i(o,n,r)}var v;if(Mn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Wn?Hn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(jn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Wn&&(v=en()):(Jt="value"in(Xt=r)?Xt.value:Xt.textContent,Wn=!0)),0<(b=$i(i,y)).length&&(y=new _n(y,e,null,n,r),o.push({event:y,listeners:b}),(v||null!==(v=Fn(n)))&&(y.data=v))),(v=zn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(Rn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Rn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Mn&&Hn(e,t)?(e=en(),Zt=Jt=Xt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(i=$i(i,"onBeforeInput")).length&&(r=new _n("onBeforeInput","beforeinput",null,n,r),o.push({event:r,listeners:i}),r.data=v)}Li(o,t)}))}function Yi(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $i(e,t){for(var n=t+"Capture",i=[];null!==e;){var r=e,a=r.stateNode;5===r.tag&&null!==a&&(r=a,null!=(a=Ne(e,n))&&i.unshift(Yi(e,a,r)),null!=(a=Ne(e,t))&&i.push(Yi(e,a,r))),e=e.return}return i}function Vi(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ki(e,t,n,i,r){for(var a=t._reactName,o=[];null!==n&&n!==i;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==u&&(s=u,r?null!=(l=Ne(n,a))&&o.unshift(Yi(n,l,s)):r||null!=(l=Ne(n,a))&&o.push(Yi(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Gi=/\r\n?/g,Qi=/\u0000|\uFFFD/g;function Xi(e){return("string"==typeof e?e:""+e).replace(Gi,"\n").replace(Qi,"")}function Ji(e,t,n){if(t=Xi(t),Xi(e)!==t&&n)throw Error(a(425))}function Zi(){}var er=null,tr=null;function nr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ir="function"==typeof setTimeout?setTimeout:void 0,rr="function"==typeof clearTimeout?clearTimeout:void 0,ar="function"==typeof Promise?Promise:void 0,or="function"==typeof queueMicrotask?queueMicrotask:void 0!==ar?function(e){return ar.resolve(null).then(e).catch(sr)}:ir;function sr(e){setTimeout((function(){throw e}))}function lr(e,t){var n=t,i=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&8===r.nodeType)if("/$"===(n=r.data)){if(0===i)return e.removeChild(r),void Wt(t);i--}else"$"!==n&&"$?"!==n&&"$!"!==n||i++;n=r}while(n);Wt(t)}function ur(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function cr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var dr=Math.random().toString(36).slice(2),hr="__reactFiber$"+dr,pr="__reactProps$"+dr,fr="__reactContainer$"+dr,gr="__reactEvents$"+dr,mr="__reactListeners$"+dr,br="__reactHandles$"+dr;function vr(e){var t=e[hr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[hr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=cr(e);null!==e;){if(n=e[hr])return n;e=cr(e)}return t}n=(e=n).parentNode}return null}function yr(e){return!(e=e[hr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _r(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wr(e){return e[pr]||null}var Ar=[],xr=-1;function Cr(e){return{current:e}}function kr(e){0>xr||(e.current=Ar[xr],Ar[xr]=null,xr--)}function Tr(e,t){xr++,Ar[xr]=e.current,e.current=t}var Sr={},Er=Cr(Sr),Dr=Cr(!1),Pr=Sr;function Ir(e,t){var n=e.type.contextTypes;if(!n)return Sr;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var r,a={};for(r in n)a[r]=t[r];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Nr(e){return null!=e.childContextTypes}function Or(){kr(Dr),kr(Er)}function Mr(e,t,n){if(Er.current!==Sr)throw Error(a(168));Tr(Er,t),Tr(Dr,n)}function Br(e,t,n){var i=e.stateNode;if(t=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var r in i=i.getChildContext())if(!(r in t))throw Error(a(108,U(e)||"Unknown",r));return j({},n,i)}function zr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Sr,Pr=Er.current,Tr(Er,e),Tr(Dr,Dr.current),!0}function jr(e,t,n){var i=e.stateNode;if(!i)throw Error(a(169));n?(e=Br(e,t,Pr),i.__reactInternalMemoizedMergedChildContext=e,kr(Dr),kr(Er),Tr(Er,e)):kr(Dr),Tr(Dr,n)}var Lr=null,Rr=!1,Hr=!1;function Fr(e){null===Lr?Lr=[e]:Lr.push(e)}function Wr(){if(!Hr&&null!==Lr){Hr=!0;var e=0,t=yt;try{var n=Lr;for(yt=1;e<n.length;e++){var i=n[e];do{i=i(!0)}while(null!==i)}Lr=null,Rr=!1}catch(t){throw null!==Lr&&(Lr=Lr.slice(e+1)),Ve(Ze,Wr),t}finally{yt=t,Hr=!1}}return null}var Ur=[],qr=0,Yr=null,$r=0,Vr=[],Kr=0,Gr=null,Qr=1,Xr="";function Jr(e,t){Ur[qr++]=$r,Ur[qr++]=Yr,Yr=e,$r=t}function Zr(e,t,n){Vr[Kr++]=Qr,Vr[Kr++]=Xr,Vr[Kr++]=Gr,Gr=e;var i=Qr;e=Xr;var r=32-ot(i)-1;i&=~(1<<r),n+=1;var a=32-ot(t)+r;if(30<a){var o=r-r%5;a=(i&(1<<o)-1).toString(32),i>>=o,r-=o,Qr=1<<32-ot(t)+r|n<<r|i,Xr=a+e}else Qr=1<<a|n<<r|i,Xr=e}function ea(e){null!==e.return&&(Jr(e,1),Zr(e,1,0))}function ta(e){for(;e===Yr;)Yr=Ur[--qr],Ur[qr]=null,$r=Ur[--qr],Ur[qr]=null;for(;e===Gr;)Gr=Vr[--Kr],Vr[Kr]=null,Xr=Vr[--Kr],Vr[Kr]=null,Qr=Vr[--Kr],Vr[Kr]=null}var na=null,ia=null,ra=!1,aa=null;function oa(e,t){var n=Nu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,ia=ur(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,ia=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Gr?{id:Qr,overflow:Xr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Nu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,na=e,ia=null,!0);default:return!1}}function la(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ua(e){if(ra){var t=ia;if(t){var n=t;if(!sa(e,t)){if(la(e))throw Error(a(418));t=ur(n.nextSibling);var i=na;t&&sa(e,t)?oa(i,n):(e.flags=-4097&e.flags|2,ra=!1,na=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,ra=!1,na=e}}}function ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function da(e){if(e!==na)return!1;if(!ra)return ca(e),ra=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nr(e.type,e.memoizedProps)),t&&(t=ia)){if(la(e))throw ha(),Error(a(418));for(;t;)oa(e,t),t=ur(t.nextSibling)}if(ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ia=ur(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ia=null}}else ia=na?ur(e.stateNode.nextSibling):null;return!0}function ha(){for(var e=ia;e;)e=ur(e.nextSibling)}function pa(){ia=na=null,ra=!1}function fa(e){null===aa?aa=[e]:aa.push(e)}var ga=_.ReactCurrentBatchConfig;function ma(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ba=Cr(null),va=null,ya=null,_a=null;function wa(){_a=ya=va=null}function Aa(e){var t=ba.current;kr(ba),e._currentValue=t}function xa(e,t,n){for(;null!==e;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==i&&(i.childLanes|=t)):null!==i&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===n)break;e=e.return}}function Ca(e,t){va=e,_a=ya=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(_s=!0),e.firstContext=null)}function ka(e){var t=e._currentValue;if(_a!==e)if(e={context:e,memoizedValue:t,next:null},null===ya){if(null===va)throw Error(a(308));ya=e,va.dependencies={lanes:0,firstContext:e}}else ya=ya.next=e;return t}var Ta=null;function Sa(e){null===Ta?Ta=[e]:Ta.push(e)}function Ea(e,t,n,i){var r=t.interleaved;return null===r?(n.next=n,Sa(t)):(n.next=r.next,r.next=n),t.interleaved=n,Da(e,i)}function Da(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pa=!1;function Ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Oa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ma(e,t,n){var i=e.updateQueue;if(null===i)return null;if(i=i.shared,0!=(2&Dl)){var r=i.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),i.pending=t,Da(e,n)}return null===(r=i.interleaved)?(t.next=t,Sa(i)):(t.next=r.next,r.next=t),i.interleaved=t,Da(e,n)}function Ba(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,vt(e,n)}}function za(e,t){var n=e.updateQueue,i=e.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?r=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?r=a=t:a=a.next=t}else r=a=t;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:a,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ja(e,t,n,i){var r=e.updateQueue;Pa=!1;var a=r.firstBaseUpdate,o=r.lastBaseUpdate,s=r.shared.pending;if(null!==s){r.shared.pending=null;var l=s,u=l.next;l.next=null,null===o?a=u:o.next=u,o=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==a){var d=r.baseState;for(o=0,c=u=l=null,s=a;;){var h=s.lane,p=s.eventTime;if((i&h)===h){null!==c&&(c=c.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var f=e,g=s;switch(h=t,p=n,g.tag){case 1:if("function"==typeof(f=g.payload)){d=f.call(p,d,h);break e}d=f;break e;case 3:f.flags=-65537&f.flags|128;case 0:if(null==(h="function"==typeof(f=g.payload)?f.call(p,d,h):f))break e;d=j({},d,h);break e;case 2:Pa=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=r.effects)?r.effects=[s]:h.push(s))}else p={eventTime:p,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=p,l=d):c=c.next=p,o|=h;if(null===(s=s.next)){if(null===(s=r.shared.pending))break;s=(h=s).next,h.next=null,r.lastBaseUpdate=h,r.shared.pending=null}}if(null===c&&(l=d),r.baseState=l,r.firstBaseUpdate=u,r.lastBaseUpdate=c,null!==(t=r.shared.interleaved)){r=t;do{o|=r.lane,r=r.next}while(r!==t)}else null===a&&(r.shared.lanes=0);jl|=o,e.lanes=o,e.memoizedState=d}}function La(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var Ra=(new i.Component).refs;function Ha(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Fa={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var i=tu(),r=nu(e),a=Oa(i,r);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ma(e,a,r))&&(iu(t,e,r,i),Ba(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var i=tu(),r=nu(e),a=Oa(i,r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ma(e,a,r))&&(iu(t,e,r,i),Ba(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),i=nu(e),r=Oa(n,i);r.tag=2,null!=t&&(r.callback=t),null!==(t=Ma(e,r,i))&&(iu(t,e,i,n),Ba(t,e,i))}};function Wa(e,t,n,i,r,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&li(n,i)&&li(r,a))}function Ua(e,t,n){var i=!1,r=Sr,a=t.contextType;return"object"==typeof a&&null!==a?a=ka(a):(r=Nr(t)?Pr:Er.current,a=(i=null!=(i=t.contextTypes))?Ir(e,r):Sr),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Fa,e.stateNode=t,t._reactInternals=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t}function qa(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&Fa.enqueueReplaceState(t,t.state,null)}function Ya(e,t,n,i){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=Ra,Ia(e);var a=t.contextType;"object"==typeof a&&null!==a?r.context=ka(a):(a=Nr(t)?Pr:Er.current,r.context=Ir(e,a)),r.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ha(e,t,a,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&Fa.enqueueReplaceState(r,r.state,null),ja(e,n,r,i),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function $a(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var i=n.stateNode}if(!i)throw Error(a(147,e));var r=i,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===Ra&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Va(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Ga(e){function t(t,n){if(e){var i=t.deletions;null===i?(t.deletions=[n],t.flags|=16):i.push(n)}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Mu(e,t)).index=0,e.sibling=null,e}function o(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.flags|=2,n):i:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,i){return null===t||6!==t.tag?((t=Lu(n,e.mode,i)).return=e,t):((t=r(t,n)).return=e,t)}function u(e,t,n,i){var a=n.type;return a===x?d(e,t,n.props.children,i,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===N&&Ka(a)===t.type)?((i=r(t,n.props)).ref=$a(e,t,n),i.return=e,i):((i=Bu(n.type,n.key,n.props,null,e.mode,i)).ref=$a(e,t,n),i.return=e,i)}function c(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ru(n,e.mode,i)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,i,a){return null===t||7!==t.tag?((t=zu(n,e.mode,i,a)).return=e,t):((t=r(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Bu(t.type,t.key,t.props,null,e.mode,n)).ref=$a(e,null,t),n.return=e,n;case A:return(t=Ru(t,e.mode,n)).return=e,t;case N:return h(e,(0,t._init)(t._payload),n)}if(te(t)||B(t))return(t=zu(t,e.mode,n,null)).return=e,t;Va(e,t)}return null}function p(e,t,n,i){var r=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==r?null:l(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===r?u(e,t,n,i):null;case A:return n.key===r?c(e,t,n,i):null;case N:return p(e,t,(r=n._init)(n._payload),i)}if(te(n)||B(n))return null!==r?null:d(e,t,n,i,null);Va(e,n)}return null}function f(e,t,n,i,r){if("string"==typeof i&&""!==i||"number"==typeof i)return l(t,e=e.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case w:return u(t,e=e.get(null===i.key?n:i.key)||null,i,r);case A:return c(t,e=e.get(null===i.key?n:i.key)||null,i,r);case N:return f(e,t,n,(0,i._init)(i._payload),r)}if(te(i)||B(i))return d(t,e=e.get(n)||null,i,r,null);Va(t,i)}return null}function g(r,a,s,l){for(var u=null,c=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=p(r,d,s[g],l);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(r,d),a=o(b,a,g),null===c?u=b:c.sibling=b,c=b,d=m}if(g===s.length)return n(r,d),ra&&Jr(r,g),u;if(null===d){for(;g<s.length;g++)null!==(d=h(r,s[g],l))&&(a=o(d,a,g),null===c?u=d:c.sibling=d,c=d);return ra&&Jr(r,g),u}for(d=i(r,d);g<s.length;g++)null!==(m=f(d,r,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(r,e)})),ra&&Jr(r,g),u}function m(r,s,l,u){var c=B(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,g=s,m=s=0,b=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var y=p(r,g,v.value,u);if(null===y){null===g&&(g=b);break}e&&g&&null===y.alternate&&t(r,g),s=o(y,s,m),null===d?c=y:d.sibling=y,d=y,g=b}if(v.done)return n(r,g),ra&&Jr(r,m),c;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=h(r,v.value,u))&&(s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return ra&&Jr(r,m),c}for(g=i(r,g);!v.done;m++,v=l.next())null!==(v=f(g,r,m,v.value,u))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return e&&g.forEach((function(e){return t(r,e)})),ra&&Jr(r,m),c}return function e(i,a,o,l){if("object"==typeof o&&null!==o&&o.type===x&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var u=o.key,c=a;null!==c;){if(c.key===u){if((u=o.type)===x){if(7===c.tag){n(i,c.sibling),(a=r(c,o.props.children)).return=i,i=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===N&&Ka(u)===c.type){n(i,c.sibling),(a=r(c,o.props)).ref=$a(i,c,o),a.return=i,i=a;break e}n(i,c);break}t(i,c),c=c.sibling}o.type===x?((a=zu(o.props.children,i.mode,l,o.key)).return=i,i=a):((l=Bu(o.type,o.key,o.props,null,i.mode,l)).ref=$a(i,a,o),l.return=i,i=l)}return s(i);case A:e:{for(c=o.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===o.containerInfo&&a.stateNode.implementation===o.implementation){n(i,a.sibling),(a=r(a,o.children||[])).return=i,i=a;break e}n(i,a);break}t(i,a),a=a.sibling}(a=Ru(o,i.mode,l)).return=i,i=a}return s(i);case N:return e(i,a,(c=o._init)(o._payload),l)}if(te(o))return g(i,a,o,l);if(B(o))return m(i,a,o,l);Va(i,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==a&&6===a.tag?(n(i,a.sibling),(a=r(a,o)).return=i,i=a):(n(i,a),(a=Lu(o,i.mode,l)).return=i,i=a),s(i)):n(i,a)}}var Qa=Ga(!0),Xa=Ga(!1),Ja={},Za=Cr(Ja),eo=Cr(Ja),to=Cr(Ja);function no(e){if(e===Ja)throw Error(a(174));return e}function io(e,t){switch(Tr(to,t),Tr(eo,e),Tr(Za,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}kr(Za),Tr(Za,t)}function ro(){kr(Za),kr(eo),kr(to)}function ao(e){no(to.current);var t=no(Za.current),n=le(t,e.type);t!==n&&(Tr(eo,e),Tr(Za,n))}function oo(e){eo.current===e&&(kr(Za),kr(eo))}var so=Cr(0);function lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var uo=[];function co(){for(var e=0;e<uo.length;e++)uo[e]._workInProgressVersionPrimary=null;uo.length=0}var ho=_.ReactCurrentDispatcher,po=_.ReactCurrentBatchConfig,fo=0,go=null,mo=null,bo=null,vo=!1,yo=!1,_o=0,wo=0;function Ao(){throw Error(a(321))}function xo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!si(e[n],t[n]))return!1;return!0}function Co(e,t,n,i,r,o){if(fo=o,go=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ho.current=null===e||null===e.memoizedState?ss:ls,e=n(i,r),yo){o=0;do{if(yo=!1,_o=0,25<=o)throw Error(a(301));o+=1,bo=mo=null,t.updateQueue=null,ho.current=us,e=n(i,r)}while(yo)}if(ho.current=os,t=null!==mo&&null!==mo.next,fo=0,bo=mo=go=null,vo=!1,t)throw Error(a(300));return e}function ko(){var e=0!==_o;return _o=0,e}function To(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===bo?go.memoizedState=bo=e:bo=bo.next=e,bo}function So(){if(null===mo){var e=go.alternate;e=null!==e?e.memoizedState:null}else e=mo.next;var t=null===bo?go.memoizedState:bo.next;if(null!==t)bo=t,mo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(mo=e).memoizedState,baseState:mo.baseState,baseQueue:mo.baseQueue,queue:mo.queue,next:null},null===bo?go.memoizedState=bo=e:bo=bo.next=e}return bo}function Eo(e,t){return"function"==typeof t?t(e):t}function Do(e){var t=So(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=mo,r=i.baseQueue,o=n.pending;if(null!==o){if(null!==r){var s=r.next;r.next=o.next,o.next=s}i.baseQueue=r=o,n.pending=null}if(null!==r){o=r.next,i=i.baseState;var l=s=null,u=null,c=o;do{var d=c.lane;if((fo&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),i=c.hasEagerState?c.eagerState:e(i,c.action);else{var h={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=h,s=i):u=u.next=h,go.lanes|=d,jl|=d}c=c.next}while(null!==c&&c!==o);null===u?s=i:u.next=l,si(i,t.memoizedState)||(_s=!0),t.memoizedState=i,t.baseState=s,t.baseQueue=u,n.lastRenderedState=i}if(null!==(e=n.interleaved)){r=e;do{o=r.lane,go.lanes|=o,jl|=o,r=r.next}while(r!==e)}else null===r&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Po(e){var t=So(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=n.dispatch,r=n.pending,o=t.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{o=e(o,s.action),s=s.next}while(s!==r);si(o,t.memoizedState)||(_s=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,i]}function Io(){}function No(e,t){var n=go,i=So(),r=t(),o=!si(i.memoizedState,r);if(o&&(i.memoizedState=r,_s=!0),i=i.queue,qo(Bo.bind(null,n,i,e),[e]),i.getSnapshot!==t||o||null!==bo&&1&bo.memoizedState.tag){if(n.flags|=2048,Ro(9,Mo.bind(null,n,i,r,t),void 0,null),null===Pl)throw Error(a(349));0!=(30&fo)||Oo(n,t,r)}return r}function Oo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=go.updateQueue)?(t={lastEffect:null,stores:null},go.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Mo(e,t,n,i){t.value=n,t.getSnapshot=i,zo(t)&&jo(e)}function Bo(e,t,n){return n((function(){zo(t)&&jo(e)}))}function zo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!si(e,n)}catch(e){return!0}}function jo(e){var t=Da(e,1);null!==t&&iu(t,e,1,-1)}function Lo(e){var t=To();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Eo,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,go,e),[t.memoizedState,e]}function Ro(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=go.updateQueue)?(t={lastEffect:null,stores:null},go.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function Ho(){return So().memoizedState}function Fo(e,t,n,i){var r=To();go.flags|=e,r.memoizedState=Ro(1|t,n,void 0,void 0===i?null:i)}function Wo(e,t,n,i){var r=So();i=void 0===i?null:i;var a=void 0;if(null!==mo){var o=mo.memoizedState;if(a=o.destroy,null!==i&&xo(i,o.deps))return void(r.memoizedState=Ro(t,n,a,i))}go.flags|=e,r.memoizedState=Ro(1|t,n,a,i)}function Uo(e,t){return Fo(8390656,8,e,t)}function qo(e,t){return Wo(2048,8,e,t)}function Yo(e,t){return Wo(4,2,e,t)}function $o(e,t){return Wo(4,4,e,t)}function Vo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ko(e,t,n){return n=null!=n?n.concat([e]):null,Wo(4,4,Vo.bind(null,t,e),n)}function Go(){}function Qo(e,t){var n=So();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&xo(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function Xo(e,t){var n=So();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&xo(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function Jo(e,t,n){return 0==(21&fo)?(e.baseState&&(e.baseState=!1,_s=!0),e.memoizedState=n):(si(n,t)||(n=gt(),go.lanes|=n,jl|=n,e.baseState=!0),t)}function Zo(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var i=po.transition;po.transition={};try{e(!1),t()}finally{yt=n,po.transition=i}}function es(){return So().memoizedState}function ts(e,t,n){var i=nu(e);n={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null},is(e)?rs(t,n):null!==(n=Ea(e,t,n,i))&&(iu(n,e,i,tu()),as(n,t,i))}function ns(e,t,n){var i=nu(e),r={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null};if(is(e))rs(t,r);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=a(o,n);if(r.hasEagerState=!0,r.eagerState=s,si(s,o)){var l=t.interleaved;return null===l?(r.next=r,Sa(t)):(r.next=l.next,l.next=r),void(t.interleaved=r)}}catch(e){}null!==(n=Ea(e,t,r,i))&&(iu(n,e,i,r=tu()),as(n,t,i))}}function is(e){var t=e.alternate;return e===go||null!==t&&t===go}function rs(e,t){yo=vo=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function as(e,t,n){if(0!=(4194240&n)){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,vt(e,n)}}var os={readContext:ka,useCallback:Ao,useContext:Ao,useEffect:Ao,useImperativeHandle:Ao,useInsertionEffect:Ao,useLayoutEffect:Ao,useMemo:Ao,useReducer:Ao,useRef:Ao,useState:Ao,useDebugValue:Ao,useDeferredValue:Ao,useTransition:Ao,useMutableSource:Ao,useSyncExternalStore:Ao,useId:Ao,unstable_isNewReconciler:!1},ss={readContext:ka,useCallback:function(e,t){return To().memoizedState=[e,void 0===t?null:t],e},useContext:ka,useEffect:Uo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Fo(4194308,4,Vo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Fo(4194308,4,e,t)},useInsertionEffect:function(e,t){return Fo(4,2,e,t)},useMemo:function(e,t){var n=To();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=To();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=ts.bind(null,go,e),[i.memoizedState,e]},useRef:function(e){return e={current:e},To().memoizedState=e},useState:Lo,useDebugValue:Go,useDeferredValue:function(e){return To().memoizedState=e},useTransition:function(){var e=Lo(!1),t=e[0];return e=Zo.bind(null,e[1]),To().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var i=go,r=To();if(ra){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Pl)throw Error(a(349));0!=(30&fo)||Oo(i,t,n)}r.memoizedState=n;var o={value:n,getSnapshot:t};return r.queue=o,Uo(Bo.bind(null,i,o,e),[e]),i.flags|=2048,Ro(9,Mo.bind(null,i,o,n,t),void 0,null),n},useId:function(){var e=To(),t=Pl.identifierPrefix;if(ra){var n=Xr;t=":"+t+"R"+(n=(Qr&~(1<<32-ot(Qr)-1)).toString(32)+n),0<(n=_o++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wo++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:ka,useCallback:Qo,useContext:ka,useEffect:qo,useImperativeHandle:Ko,useInsertionEffect:Yo,useLayoutEffect:$o,useMemo:Xo,useReducer:Do,useRef:Ho,useState:function(){return Do(Eo)},useDebugValue:Go,useDeferredValue:function(e){return Jo(So(),mo.memoizedState,e)},useTransition:function(){return[Do(Eo)[0],So().memoizedState]},useMutableSource:Io,useSyncExternalStore:No,useId:es,unstable_isNewReconciler:!1},us={readContext:ka,useCallback:Qo,useContext:ka,useEffect:qo,useImperativeHandle:Ko,useInsertionEffect:Yo,useLayoutEffect:$o,useMemo:Xo,useReducer:Po,useRef:Ho,useState:function(){return Po(Eo)},useDebugValue:Go,useDeferredValue:function(e){var t=So();return null===mo?t.memoizedState=e:Jo(t,mo.memoizedState,e)},useTransition:function(){return[Po(Eo)[0],So().memoizedState]},useMutableSource:Io,useSyncExternalStore:No,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",i=t;do{n+=F(i),i=i.return}while(i);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function hs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function fs(e,t,n){(n=Oa(-1,n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Yl||(Yl=!0,$l=i),hs(0,t)},n}function gs(e,t,n){(n=Oa(-1,n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var r=t.value;n.payload=function(){return i(r)},n.callback=function(){hs(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){hs(0,t),"function"!=typeof i&&(null===Vl?Vl=new Set([this]):Vl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var i=e.pingCache;if(null===i){i=e.pingCache=new ps;var r=new Set;i.set(t,r)}else void 0===(r=i.get(t))&&(r=new Set,i.set(t,r));r.has(n)||(r.add(n),e=Tu.bind(null,e,t,n),t.then(e,e))}function bs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vs(e,t,n,i,r){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Oa(-1,1)).tag=2,Ma(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=r,e)}var ys=_.ReactCurrentOwner,_s=!1;function ws(e,t,n,i){t.child=null===e?Xa(t,null,n,i):Qa(t,e.child,n,i)}function As(e,t,n,i,r){n=n.render;var a=t.ref;return Ca(t,r),i=Co(e,t,n,i,a,r),n=ko(),null===e||_s?(ra&&n&&ea(t),t.flags|=1,ws(e,t,i,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ys(e,t,r))}function xs(e,t,n,i,r){if(null===e){var a=n.type;return"function"!=typeof a||Ou(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bu(n.type,null,i,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cs(e,t,a,i,r))}if(a=e.child,0==(e.lanes&r)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:li)(o,i)&&e.ref===t.ref)return Ys(e,t,r)}return t.flags|=1,(e=Mu(a,i)).ref=t.ref,e.return=t,t.child=e}function Cs(e,t,n,i,r){if(null!==e){var a=e.memoizedProps;if(li(a,i)&&e.ref===t.ref){if(_s=!1,t.pendingProps=i=a,0==(e.lanes&r))return t.lanes=e.lanes,Ys(e,t,r);0!=(131072&e.flags)&&(_s=!0)}}return Ss(e,t,n,i,r)}function ks(e,t,n){var i=t.pendingProps,r=i.children,a=null!==e?e.memoizedState:null;if("hidden"===i.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Tr(Ml,Ol),Ol|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Tr(Ml,Ol),Ol|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=null!==a?a.baseLanes:n,Tr(Ml,Ol),Ol|=i}else null!==a?(i=a.baseLanes|n,t.memoizedState=null):i=n,Tr(Ml,Ol),Ol|=i;return ws(e,t,r,n),t.child}function Ts(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ss(e,t,n,i,r){var a=Nr(n)?Pr:Er.current;return a=Ir(t,a),Ca(t,r),n=Co(e,t,n,i,a,r),i=ko(),null===e||_s?(ra&&i&&ea(t),t.flags|=1,ws(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ys(e,t,r))}function Es(e,t,n,i,r){if(Nr(n)){var a=!0;zr(t)}else a=!1;if(Ca(t,r),null===t.stateNode)qs(e,t),Ua(t,n,i),Ya(t,n,i,r),i=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?ka(u):Ir(t,u=Nr(n)?Pr:Er.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==i||l!==u)&&qa(t,o,i,u),Pa=!1;var h=t.memoizedState;o.state=h,ja(t,i,o,r),l=t.memoizedState,s!==i||h!==l||Dr.current||Pa?("function"==typeof c&&(Ha(t,n,c,i),l=t.memoizedState),(s=Pa||Wa(t,n,s,i,h,l,u))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),o.props=i,o.state=l,o.context=u,i=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),i=!1)}else{o=t.stateNode,Na(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:ma(t.type,s),o.props=u,d=t.pendingProps,h=o.context,l="object"==typeof(l=n.contextType)&&null!==l?ka(l):Ir(t,l=Nr(n)?Pr:Er.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||h!==l)&&qa(t,o,i,l),Pa=!1,h=t.memoizedState,o.state=h,ja(t,i,o,r);var f=t.memoizedState;s!==d||h!==f||Dr.current||Pa?("function"==typeof p&&(Ha(t,n,p,i),f=t.memoizedState),(u=Pa||Wa(t,n,u,i,h,f,l)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(i,f,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(i,f,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=f),o.props=i,o.state=f,o.context=l,i=u):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),i=!1)}return Ds(e,t,n,i,a,r)}function Ds(e,t,n,i,r,a){Ts(e,t);var o=0!=(128&t.flags);if(!i&&!o)return r&&jr(t,n,!1),Ys(e,t,a);i=t.stateNode,ys.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.flags|=1,null!==e&&o?(t.child=Qa(t,e.child,null,a),t.child=Qa(t,null,s,a)):ws(e,t,s,a),t.memoizedState=i.state,r&&jr(t,n,!0),t.child}function Ps(e){var t=e.stateNode;t.pendingContext?Mr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mr(0,t.context,!1),io(e,t.containerInfo)}function Is(e,t,n,i,r){return pa(),fa(r),t.flags|=256,ws(e,t,n,i),t.child}var Ns,Os,Ms,Bs,zs={dehydrated:null,treeContext:null,retryLane:0};function js(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,t,n){var i,r=t.pendingProps,o=so.current,s=!1,l=0!=(128&t.flags);if((i=l)||(i=(null===e||null!==e.memoizedState)&&0!=(2&o)),i?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),Tr(so,1&o),null===e)return ua(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=r.children,e=r.fallback,s?(r=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&r)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=ju(l,r,0,null),e=zu(e,r,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=js(n),t.memoizedState=zs,e):Rs(t,l));if(null!==(o=e.memoizedState)&&null!==(i=o.dehydrated))return function(e,t,n,i,r,o,s){if(n)return 256&t.flags?(t.flags&=-257,Hs(e,t,s,i=ds(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=i.fallback,r=t.mode,i=ju({mode:"visible",children:i.children},r,0,null),(o=zu(o,r,s,null)).flags|=2,i.return=t,o.return=t,i.sibling=o,t.child=i,0!=(1&t.mode)&&Qa(t,e.child,null,s),t.child.memoizedState=js(s),t.memoizedState=zs,o);if(0==(1&t.mode))return Hs(e,t,s,null);if("$!"===r.data){if(i=r.nextSibling&&r.nextSibling.dataset)var l=i.dgst;return i=l,Hs(e,t,s,i=ds(o=Error(a(419)),i,void 0))}if(l=0!=(s&e.childLanes),_s||l){if(null!==(i=Pl)){switch(s&-s){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=0!=(r&(i.suspendedLanes|s))?0:r)&&r!==o.retryLane&&(o.retryLane=r,Da(e,r),iu(i,e,r,-1))}return mu(),Hs(e,t,s,i=ds(Error(a(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=Eu.bind(null,e),r._reactRetry=t,null):(e=o.treeContext,ia=ur(r.nextSibling),na=t,ra=!0,aa=null,null!==e&&(Vr[Kr++]=Qr,Vr[Kr++]=Xr,Vr[Kr++]=Gr,Qr=e.id,Xr=e.overflow,Gr=t),(t=Rs(t,i.children)).flags|=4096,t)}(e,t,l,r,i,o,n);if(s){s=r.fallback,l=t.mode,i=(o=e.child).sibling;var u={mode:"hidden",children:r.children};return 0==(1&l)&&t.child!==o?((r=t.child).childLanes=0,r.pendingProps=u,t.deletions=null):(r=Mu(o,u)).subtreeFlags=14680064&o.subtreeFlags,null!==i?s=Mu(i,s):(s=zu(s,l,n,null)).flags|=2,s.return=t,r.return=t,r.sibling=s,t.child=r,r=s,s=t.child,l=null===(l=e.child.memoizedState)?js(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=zs,r}return e=(s=e.child).sibling,r=Mu(s,{mode:"visible",children:r.children}),0==(1&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Rs(e,t){return(t=ju({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Hs(e,t,n,i){return null!==i&&fa(i),Qa(t,e.child,null,n),(e=Rs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fs(e,t,n){e.lanes|=t;var i=e.alternate;null!==i&&(i.lanes|=t),xa(e.return,t,n)}function Ws(e,t,n,i,r){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=i,a.tail=n,a.tailMode=r)}function Us(e,t,n){var i=t.pendingProps,r=i.revealOrder,a=i.tail;if(ws(e,t,i.children,n),0!=(2&(i=so.current)))i=1&i|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,n,t);else if(19===e.tag)Fs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(Tr(so,i),0==(1&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===lo(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ws(t,!1,r,n,a);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===lo(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ws(t,!0,n,null,a);break;case"together":Ws(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function qs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ys(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Mu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Mu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $s(e,t){if(!ra)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function Vs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,i=0;if(t)for(var r=e.child;null!==r;)n|=r.lanes|r.childLanes,i|=14680064&r.subtreeFlags,i|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags,i|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=i,e.childLanes=n,t}function Ks(e,t,n){var i=t.pendingProps;switch(ta(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vs(t),null;case 1:case 17:return Nr(t.type)&&Or(),Vs(t),null;case 3:return i=t.stateNode,ro(),kr(Dr),kr(Er),co(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==aa&&(su(aa),aa=null))),Os(e,t),Vs(t),null;case 5:oo(t);var r=no(to.current);if(n=t.type,null!==e&&null!=t.stateNode)Ms(e,t,n,i,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(null===t.stateNode)throw Error(a(166));return Vs(t),null}if(e=no(Za.current),da(t)){i=t.stateNode,n=t.type;var o=t.memoizedProps;switch(i[hr]=t,i[pr]=o,e=0!=(1&t.mode),n){case"dialog":Ri("cancel",i),Ri("close",i);break;case"iframe":case"object":case"embed":Ri("load",i);break;case"video":case"audio":for(r=0;r<Bi.length;r++)Ri(Bi[r],i);break;case"source":Ri("error",i);break;case"img":case"image":case"link":Ri("error",i),Ri("load",i);break;case"details":Ri("toggle",i);break;case"input":Q(i,o),Ri("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!o.multiple},Ri("invalid",i);break;case"textarea":re(i,o),Ri("invalid",i)}for(var l in ve(n,o),r=null,o)if(o.hasOwnProperty(l)){var u=o[l];"children"===l?"string"==typeof u?i.textContent!==u&&(!0!==o.suppressHydrationWarning&&Ji(i.textContent,u,e),r=["children",u]):"number"==typeof u&&i.textContent!==""+u&&(!0!==o.suppressHydrationWarning&&Ji(i.textContent,u,e),r=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Ri("scroll",i)}switch(n){case"input":$(i),Z(i,o,!0);break;case"textarea":$(i),oe(i);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(i.onclick=Zi)}i=r,t.updateQueue=i,null!==i&&(t.flags|=4)}else{l=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=l.createElement(n,{is:i.is}):(e=l.createElement(n),"select"===n&&(l=e,i.multiple?l.multiple=!0:i.size&&(l.size=i.size))):e=l.createElementNS(e,n),e[hr]=t,e[pr]=i,Ns(e,t,!1,!1),t.stateNode=e;e:{switch(l=ye(n,i),n){case"dialog":Ri("cancel",e),Ri("close",e),r=i;break;case"iframe":case"object":case"embed":Ri("load",e),r=i;break;case"video":case"audio":for(r=0;r<Bi.length;r++)Ri(Bi[r],e);r=i;break;case"source":Ri("error",e),r=i;break;case"img":case"image":case"link":Ri("error",e),Ri("load",e),r=i;break;case"details":Ri("toggle",e),r=i;break;case"input":Q(e,i),r=G(e,i),Ri("invalid",e);break;case"option":default:r=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},r=j({},i,{value:void 0}),Ri("invalid",e);break;case"textarea":re(e,i),r=ie(e,i),Ri("invalid",e)}for(o in ve(n,r),u=r)if(u.hasOwnProperty(o)){var c=u[o];"style"===o?me(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&he(e,c):"number"==typeof c&&he(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(s.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Ri("scroll",e):null!=c&&y(e,o,c,l))}switch(n){case"input":$(e),Z(e,i,!1);break;case"textarea":$(e),oe(e);break;case"option":null!=i.value&&e.setAttribute("value",""+q(i.value));break;case"select":e.multiple=!!i.multiple,null!=(o=i.value)?ne(e,!!i.multiple,o,!1):null!=i.defaultValue&&ne(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=Zi)}switch(n){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vs(t),null;case 6:if(e&&null!=t.stateNode)Bs(e,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));if(n=no(to.current),no(Za.current),da(t)){if(i=t.stateNode,n=t.memoizedProps,i[hr]=t,(o=i.nodeValue!==n)&&null!==(e=na))switch(e.tag){case 3:Ji(i.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Ji(i.nodeValue,n,0!=(1&e.mode))}o&&(t.flags|=4)}else(i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[hr]=t,t.stateNode=i}return Vs(t),null;case 13:if(kr(so),i=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ra&&null!==ia&&0!=(1&t.mode)&&0==(128&t.flags))ha(),pa(),t.flags|=98560,o=!1;else if(o=da(t),null!==i&&null!==i.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[hr]=t}else pa(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vs(t),o=!1}else null!==aa&&(su(aa),aa=null),o=!0;if(!o)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((i=null!==i)!=(null!==e&&null!==e.memoizedState)&&i&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&so.current)?0===Bl&&(Bl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Vs(t),null);case 4:return ro(),Os(e,t),null===e&&Wi(t.stateNode.containerInfo),Vs(t),null;case 10:return Aa(t.type._context),Vs(t),null;case 19:if(kr(so),null===(o=t.memoizedState))return Vs(t),null;if(i=0!=(128&t.flags),null===(l=o.rendering))if(i)$s(o,!1);else{if(0!==Bl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=lo(e))){for(t.flags|=128,$s(o,!1),null!==(i=l.updateQueue)&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=n,n=t.child;null!==n;)e=i,(o=n).flags&=14680066,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Tr(so,1&so.current|2),t.child}e=e.sibling}null!==o.tail&&Xe()>Ul&&(t.flags|=128,i=!0,$s(o,!1),t.lanes=4194304)}else{if(!i)if(null!==(e=lo(l))){if(t.flags|=128,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$s(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!ra)return Vs(t),null}else 2*Xe()-o.renderingStartTime>Ul&&1073741824!==n&&(t.flags|=128,i=!0,$s(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=o.last)?n.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Xe(),t.sibling=null,n=so.current,Tr(so,i?1&n|2:1&n),t):(Vs(t),null);case 22:case 23:return hu(),i=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==i&&(t.flags|=8192),i&&0!=(1&t.mode)?0!=(1073741824&Ol)&&(Vs(t),6&t.subtreeFlags&&(t.flags|=8192)):Vs(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Gs(e,t){switch(ta(t),t.tag){case 1:return Nr(t.type)&&Or(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ro(),kr(Dr),kr(Er),co(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return oo(t),null;case 13:if(kr(so),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return kr(so),null;case 4:return ro(),null;case 10:return Aa(t.type._context),null;case 22:case 23:return hu(),null;default:return null}}Ns=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Os=function(){},Ms=function(e,t,n,i){var r=e.memoizedProps;if(r!==i){e=t.stateNode,no(Za.current);var a,o=null;switch(n){case"input":r=G(e,r),i=G(e,i),o=[];break;case"select":r=j({},r,{value:void 0}),i=j({},i,{value:void 0}),o=[];break;case"textarea":r=ie(e,r),i=ie(e,i),o=[];break;default:"function"!=typeof r.onClick&&"function"==typeof i.onClick&&(e.onclick=Zi)}for(c in ve(n,i),n=null,r)if(!i.hasOwnProperty(c)&&r.hasOwnProperty(c)&&null!=r[c])if("style"===c){var l=r[c];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in i){var u=i[c];if(l=null!=r?r[c]:void 0,i.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(a in l)!l.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&l[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(o||(o=[]),o.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(o=o||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(o=o||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Ri("scroll",e),o||l===u||(o=[])):(o=o||[]).push(c,u))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},Bs=function(e,t,n,i){n!==i&&(t.flags|=4)};var Qs=!1,Xs=!1,Js="function"==typeof WeakSet?WeakSet:Set,Zs=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){ku(e,t,n)}}var nl=!1;function il(e,t,n){var i=t.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var r=i=i.next;do{if((r.tag&e)===e){var a=r.destroy;r.destroy=void 0,void 0!==a&&tl(t,n,a)}r=r.next}while(r!==i)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var i=n.create;n.destroy=i()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[hr],delete t[pr],delete t[gr],delete t[mr],delete t[br]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ul(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zi));else if(4!==i&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}function cl(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==i&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var dl=null,hl=!1;function pl(e,t,n){for(n=n.child;null!==n;)fl(e,t,n),n=n.sibling}function fl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(rt,n)}catch(e){}switch(n.tag){case 5:Xs||el(n,t);case 6:var i=dl,r=hl;dl=null,pl(e,t,n),hl=r,null!==(dl=i)&&(hl?(e=dl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):dl.removeChild(n.stateNode));break;case 18:null!==dl&&(hl?(e=dl,n=n.stateNode,8===e.nodeType?lr(e.parentNode,n):1===e.nodeType&&lr(e,n),Wt(e)):lr(dl,n.stateNode));break;case 4:i=dl,r=hl,dl=n.stateNode.containerInfo,hl=!0,pl(e,t,n),dl=i,hl=r;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(i=n.updateQueue)&&null!==(i=i.lastEffect)){r=i=i.next;do{var a=r,o=a.destroy;a=a.tag,void 0!==o&&(0!=(2&a)||0!=(4&a))&&tl(n,t,o),r=r.next}while(r!==i)}pl(e,t,n);break;case 1:if(!Xs&&(el(n,t),"function"==typeof(i=n.stateNode).componentWillUnmount))try{i.props=n.memoizedProps,i.state=n.memoizedState,i.componentWillUnmount()}catch(e){ku(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Xs=(i=Xs)||null!==n.memoizedState,pl(e,t,n),Xs=i):pl(e,t,n);break;default:pl(e,t,n)}}function gl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Js),t.forEach((function(t){var i=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var i=0;i<n.length;i++){var r=n[i];try{var o=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:dl=l.stateNode,hl=!1;break e;case 3:case 4:dl=l.stateNode.containerInfo,hl=!0;break e}l=l.return}if(null===dl)throw Error(a(160));fl(o,s,r),dl=null,hl=!1;var u=r.alternate;null!==u&&(u.return=null),r.return=null}catch(e){ku(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)bl(t,e),t=t.sibling}function bl(e,t){var n=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),vl(e),4&i){try{il(3,e,e.return),rl(3,e)}catch(t){ku(e,e.return,t)}try{il(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:ml(t,e),vl(e),512&i&&null!==n&&el(n,n.return);break;case 5:if(ml(t,e),vl(e),512&i&&null!==n&&el(n,n.return),32&e.flags){var r=e.stateNode;try{he(r,"")}catch(t){ku(e,e.return,t)}}if(4&i&&null!=(r=e.stateNode)){var o=e.memoizedProps,s=null!==n?n.memoizedProps:o,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===o.type&&null!=o.name&&X(r,o),ye(l,s);var c=ye(l,o);for(s=0;s<u.length;s+=2){var d=u[s],h=u[s+1];"style"===d?me(r,h):"dangerouslySetInnerHTML"===d?de(r,h):"children"===d?he(r,h):y(r,d,h,c)}switch(l){case"input":J(r,o);break;case"textarea":ae(r,o);break;case"select":var p=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!o.multiple;var f=o.value;null!=f?ne(r,!!o.multiple,f,!1):p!==!!o.multiple&&(null!=o.defaultValue?ne(r,!!o.multiple,o.defaultValue,!0):ne(r,!!o.multiple,o.multiple?[]:"",!1))}r[pr]=o}catch(t){ku(e,e.return,t)}}break;case 6:if(ml(t,e),vl(e),4&i){if(null===e.stateNode)throw Error(a(162));r=e.stateNode,o=e.memoizedProps;try{r.nodeValue=o}catch(t){ku(e,e.return,t)}}break;case 3:if(ml(t,e),vl(e),4&i&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:ml(t,e),vl(e);break;case 13:ml(t,e),vl(e),8192&(r=e.child).flags&&(o=null!==r.memoizedState,r.stateNode.isHidden=o,!o||null!==r.alternate&&null!==r.alternate.memoizedState||(Wl=Xe())),4&i&&gl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xs=(c=Xs)||d,ml(t,e),Xs=c):ml(t,e),vl(e),8192&i){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Zs=e,d=e.child;null!==d;){for(h=Zs=d;null!==Zs;){switch(f=(p=Zs).child,p.tag){case 0:case 11:case 14:case 15:il(4,p,p.return);break;case 1:el(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){i=p,n=p.return;try{t=i,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){ku(i,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){Al(h);continue}}null!==f?(f.return=p,Zs=f):Al(h)}d=d.sibling}e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{r=h.stateNode,c?"function"==typeof(o=r.style).setProperty?o.setProperty("display","none","important"):o.display="none":(l=h.stateNode,s=null!=(u=h.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=ge("display",s))}catch(t){ku(e,e.return,t)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=c?"":h.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:ml(t,e),vl(e),4&i&&gl(e);case 21:}}function vl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sl(n)){var i=n;break e}n=n.return}throw Error(a(160))}switch(i.tag){case 5:var r=i.stateNode;32&i.flags&&(he(r,""),i.flags&=-33),cl(e,ll(e),r);break;case 3:case 4:var o=i.stateNode.containerInfo;ul(e,ll(e),o);break;default:throw Error(a(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Zs=e,_l(e,t,n)}function _l(e,t,n){for(var i=0!=(1&e.mode);null!==Zs;){var r=Zs,a=r.child;if(22===r.tag&&i){var o=null!==r.memoizedState||Qs;if(!o){var s=r.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Qs;var u=Xs;if(Qs=o,(Xs=l)&&!u)for(Zs=r;null!==Zs;)l=(o=Zs).child,22===o.tag&&null!==o.memoizedState?xl(r):null!==l?(l.return=o,Zs=l):xl(r);for(;null!==a;)Zs=a,_l(a,t,n),a=a.sibling;Zs=r,Qs=s,Xs=u}wl(e)}else 0!=(8772&r.subtreeFlags)&&null!==a?(a.return=r,Zs=a):wl(e)}}function wl(e){for(;null!==Zs;){var t=Zs;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xs||rl(5,t);break;case 1:var i=t.stateNode;if(4&t.flags&&!Xs)if(null===n)i.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:ma(t.type,n.memoizedProps);i.componentDidUpdate(r,n.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&La(t,o,i);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}La(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var h=d.dehydrated;null!==h&&Wt(h)}}}break;default:throw Error(a(163))}Xs||512&t.flags&&al(t)}catch(e){ku(t,t.return,e)}}if(t===e){Zs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zs=n;break}Zs=t.return}}function Al(e){for(;null!==Zs;){var t=Zs;if(t===e){Zs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zs=n;break}Zs=t.return}}function xl(e){for(;null!==Zs;){var t=Zs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){ku(t,n,e)}break;case 1:var i=t.stateNode;if("function"==typeof i.componentDidMount){var r=t.return;try{i.componentDidMount()}catch(e){ku(t,r,e)}}var a=t.return;try{al(t)}catch(e){ku(t,a,e)}break;case 5:var o=t.return;try{al(t)}catch(e){ku(t,o,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Zs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Zs=s;break}Zs=t.return}}var Cl,kl=Math.ceil,Tl=_.ReactCurrentDispatcher,Sl=_.ReactCurrentOwner,El=_.ReactCurrentBatchConfig,Dl=0,Pl=null,Il=null,Nl=0,Ol=0,Ml=Cr(0),Bl=0,zl=null,jl=0,Ll=0,Rl=0,Hl=null,Fl=null,Wl=0,Ul=1/0,ql=null,Yl=!1,$l=null,Vl=null,Kl=!1,Gl=null,Ql=0,Xl=0,Jl=null,Zl=-1,eu=0;function tu(){return 0!=(6&Dl)?Xe():-1!==Zl?Zl:Zl=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Dl)&&0!==Nl?Nl&-Nl:null!==ga.transition?(0===eu&&(eu=gt()),eu):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function iu(e,t,n,i){if(50<Xl)throw Xl=0,Jl=null,Error(a(185));bt(e,n,i),0!=(2&Dl)&&e===Pl||(e===Pl&&(0==(2&Dl)&&(Ll|=n),4===Bl&&lu(e,Nl)),ru(e,i),1===n&&0===Dl&&0==(1&t.mode)&&(Ul=Xe()+500,Rr&&Wr()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,i=e.pingedLanes,r=e.expirationTimes,a=e.pendingLanes;0<a;){var o=31-ot(a),s=1<<o,l=r[o];-1===l?0!=(s&n)&&0==(s&i)||(r[o]=pt(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var i=ht(e,e===Pl?Nl:0);if(0===i)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Rr=!0,Fr(e)}(uu.bind(null,e)):Fr(uu.bind(null,e)),or((function(){0==(6&Dl)&&Wr()})),n=null;else{switch(_t(i)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=it}n=Pu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Zl=-1,eu=0,0!=(6&Dl))throw Error(a(327));var n=e.callbackNode;if(xu()&&e.callbackNode!==n)return null;var i=ht(e,e===Pl?Nl:0);if(0===i)return null;if(0!=(30&i)||0!=(i&e.expiredLanes)||t)t=bu(e,i);else{t=i;var r=Dl;Dl|=2;var o=gu();for(Pl===e&&Nl===t||(ql=null,Ul=Xe()+500,pu(e,t));;)try{yu();break}catch(t){fu(e,t)}wa(),Tl.current=o,Dl=r,null!==Il?t=0:(Pl=null,Nl=0,t=Bl)}if(0!==t){if(2===t&&0!==(r=ft(e))&&(i=r,t=ou(e,r)),1===t)throw n=zl,pu(e,0),lu(e,i),ru(e,Xe()),n;if(6===t)lu(e,i);else{if(r=e.current.alternate,0==(30&i)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var i=0;i<n.length;i++){var r=n[i],a=r.getSnapshot;r=r.value;try{if(!si(a(),r))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)&&(2===(t=bu(e,i))&&0!==(o=ft(e))&&(i=o,t=ou(e,o)),1===t))throw n=zl,pu(e,0),lu(e,i),ru(e,Xe()),n;switch(e.finishedWork=r,e.finishedLanes=i,t){case 0:case 1:throw Error(a(345));case 2:case 5:Au(e,Fl,ql);break;case 3:if(lu(e,i),(130023424&i)===i&&10<(t=Wl+500-Xe())){if(0!==ht(e,0))break;if(((r=e.suspendedLanes)&i)!==i){tu(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=ir(Au.bind(null,e,Fl,ql),t);break}Au(e,Fl,ql);break;case 4:if(lu(e,i),(4194240&i)===i)break;for(t=e.eventTimes,r=-1;0<i;){var s=31-ot(i);o=1<<s,(s=t[s])>r&&(r=s),i&=~o}if(i=r,10<(i=(120>(i=Xe()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*kl(i/1960))-i)){e.timeoutHandle=ir(Au.bind(null,e,Fl,ql),i);break}Au(e,Fl,ql);break;default:throw Error(a(329))}}}return ru(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function ou(e,t){var n=Hl;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=bu(e,t))&&(t=Fl,Fl=n,null!==t&&su(t)),e}function su(e){null===Fl?Fl=e:Fl.push.apply(Fl,e)}function lu(e,t){for(t&=~Rl,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),i=1<<n;e[n]=-1,t&=~i}}function uu(e){if(0!=(6&Dl))throw Error(a(327));xu();var t=ht(e,0);if(0==(1&t))return ru(e,Xe()),null;var n=bu(e,t);if(0!==e.tag&&2===n){var i=ft(e);0!==i&&(t=i,n=ou(e,i))}if(1===n)throw n=zl,pu(e,0),lu(e,t),ru(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Au(e,Fl,ql),ru(e,Xe()),null}function cu(e,t){var n=Dl;Dl|=1;try{return e(t)}finally{0===(Dl=n)&&(Ul=Xe()+500,Rr&&Wr())}}function du(e){null!==Gl&&0===Gl.tag&&0==(6&Dl)&&xu();var t=Dl;Dl|=1;var n=El.transition,i=yt;try{if(El.transition=null,yt=1,e)return e()}finally{yt=i,El.transition=n,0==(6&(Dl=t))&&Wr()}}function hu(){Ol=Ml.current,kr(Ml)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,rr(n)),null!==Il)for(n=Il.return;null!==n;){var i=n;switch(ta(i),i.tag){case 1:null!=(i=i.type.childContextTypes)&&Or();break;case 3:ro(),kr(Dr),kr(Er),co();break;case 5:oo(i);break;case 4:ro();break;case 13:case 19:kr(so);break;case 10:Aa(i.type._context);break;case 22:case 23:hu()}n=n.return}if(Pl=e,Il=e=Mu(e.current,null),Nl=Ol=t,Bl=0,zl=null,Rl=Ll=jl=0,Fl=Hl=null,null!==Ta){for(t=0;t<Ta.length;t++)if(null!==(i=(n=Ta[t]).interleaved)){n.interleaved=null;var r=i.next,a=n.pending;if(null!==a){var o=a.next;a.next=r,i.next=o}n.pending=i}Ta=null}return e}function fu(e,t){for(;;){var n=Il;try{if(wa(),ho.current=os,vo){for(var i=go.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}vo=!1}if(fo=0,bo=mo=go=null,yo=!1,_o=0,Sl.current=null,null===n||null===n.return){Bl=1,zl=t,Il=null;break}e:{var o=e,s=n.return,l=n,u=t;if(t=Nl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=l,h=d.tag;if(0==(1&d.mode)&&(0===h||11===h||15===h)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var f=bs(s);if(null!==f){f.flags&=-257,vs(f,s,l,0,t),1&f.mode&&ms(o,c,t),u=c;var g=(t=f).updateQueue;if(null===g){var m=new Set;m.add(u),t.updateQueue=m}else g.add(u);break e}if(0==(1&t)){ms(o,c,t),mu();break e}u=Error(a(426))}else if(ra&&1&l.mode){var b=bs(s);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),vs(b,s,l,0,t),fa(cs(u,l));break e}}o=u=cs(u,l),4!==Bl&&(Bl=2),null===Hl?Hl=[o]:Hl.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,za(o,fs(0,u,t));break e;case 1:l=u;var v=o.type,y=o.stateNode;if(0==(128&o.flags)&&("function"==typeof v.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Vl||!Vl.has(y)))){o.flags|=65536,t&=-t,o.lanes|=t,za(o,gs(o,l,t));break e}}o=o.return}while(null!==o)}wu(n)}catch(e){t=e,Il===n&&null!==n&&(Il=n=n.return);continue}break}}function gu(){var e=Tl.current;return Tl.current=os,null===e?os:e}function mu(){0!==Bl&&3!==Bl&&2!==Bl||(Bl=4),null===Pl||0==(268435455&jl)&&0==(268435455&Ll)||lu(Pl,Nl)}function bu(e,t){var n=Dl;Dl|=2;var i=gu();for(Pl===e&&Nl===t||(ql=null,pu(e,t));;)try{vu();break}catch(t){fu(e,t)}if(wa(),Dl=n,Tl.current=i,null!==Il)throw Error(a(261));return Pl=null,Nl=0,Bl}function vu(){for(;null!==Il;)_u(Il)}function yu(){for(;null!==Il&&!Ge();)_u(Il)}function _u(e){var t=Cl(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?wu(e):Il=t,Sl.current=null}function wu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ks(n,t,Ol)))return void(Il=n)}else{if(null!==(n=Gs(n,t)))return n.flags&=32767,void(Il=n);if(null===e)return Bl=6,void(Il=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Il=t);Il=t=e}while(null!==t);0===Bl&&(Bl=5)}function Au(e,t,n){var i=yt,r=El.transition;try{El.transition=null,yt=1,function(e,t,n,i){do{xu()}while(null!==Gl);if(0!=(6&Dl))throw Error(a(327));n=e.finishedWork;var r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-ot(n),a=1<<r;t[r]=0,i[r]=-1,e[r]=-1,n&=~a}}(e,o),e===Pl&&(Il=Pl=null,Nl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Kl||(Kl=!0,Pu(tt,(function(){return xu(),null}))),o=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||o){o=El.transition,El.transition=null;var s=yt;yt=1;var l=Dl;Dl|=4,Sl.current=null,function(e,t){if(er=qt,pi(e=hi())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var i=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(i&&0!==i.rangeCount){n=i.anchorNode;var r=i.anchorOffset,o=i.focusNode;i=i.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,d=0,h=e,p=null;t:for(;;){for(var f;h!==n||0!==r&&3!==h.nodeType||(l=s+r),h!==o||0!==i&&3!==h.nodeType||(u=s+i),3===h.nodeType&&(s+=h.nodeValue.length),null!==(f=h.firstChild);)p=h,h=f;for(;;){if(h===e)break t;if(p===n&&++c===r&&(l=s),p===o&&++d===i&&(u=s),null!==(f=h.nextSibling))break;p=(h=p).parentNode}h=f}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(tr={focusedElem:e,selectionRange:n},qt=!1,Zs=t;null!==Zs;)if(e=(t=Zs).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zs=e;else for(;null!==Zs;){t=Zs;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,b=g.memoizedState,v=t.stateNode,y=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:ma(t.type,m),b);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(a(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zs=e;break}Zs=t.return}g=nl,nl=!1}(e,n),bl(n,e),fi(tr),qt=!!er,tr=er=null,e.current=n,yl(n,e,r),Qe(),Dl=l,yt=s,El.transition=o}else e.current=n;if(Kl&&(Kl=!1,Gl=e,Ql=r),0===(o=e.pendingLanes)&&(Vl=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(rt,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(i=e.onRecoverableError,n=0;n<t.length;n++)i((r=t[n]).value,{componentStack:r.stack,digest:r.digest});if(Yl)throw Yl=!1,e=$l,$l=null,e;0!=(1&Ql)&&0!==e.tag&&xu(),0!=(1&(o=e.pendingLanes))?e===Jl?Xl++:(Xl=0,Jl=e):Xl=0,Wr()}(e,t,n,i)}finally{El.transition=r,yt=i}return null}function xu(){if(null!==Gl){var e=_t(Ql),t=El.transition,n=yt;try{if(El.transition=null,yt=16>e?16:e,null===Gl)var i=!1;else{if(e=Gl,Gl=null,Ql=0,0!=(6&Dl))throw Error(a(331));var r=Dl;for(Dl|=4,Zs=e.current;null!==Zs;){var o=Zs,s=o.child;if(0!=(16&Zs.flags)){var l=o.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Zs=c;null!==Zs;){var d=Zs;switch(d.tag){case 0:case 11:case 15:il(8,d,o)}var h=d.child;if(null!==h)h.return=d,Zs=h;else for(;null!==Zs;){var p=(d=Zs).sibling,f=d.return;if(ol(d),d===c){Zs=null;break}if(null!==p){p.return=f,Zs=p;break}Zs=f}}}var g=o.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var b=m.sibling;m.sibling=null,m=b}while(null!==m)}}Zs=o}}if(0!=(2064&o.subtreeFlags)&&null!==s)s.return=o,Zs=s;else e:for(;null!==Zs;){if(0!=(2048&(o=Zs).flags))switch(o.tag){case 0:case 11:case 15:il(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Zs=v;break e}Zs=o.return}}var y=e.current;for(Zs=y;null!==Zs;){var _=(s=Zs).child;if(0!=(2064&s.subtreeFlags)&&null!==_)_.return=s,Zs=_;else e:for(s=y;null!==Zs;){if(0!=(2048&(l=Zs).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){ku(l,l.return,e)}if(l===s){Zs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Zs=w;break e}Zs=l.return}}if(Dl=r,Wr(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(rt,e)}catch(e){}i=!0}return i}finally{yt=n,El.transition=t}}return!1}function Cu(e,t,n){e=Ma(e,t=fs(0,t=cs(n,t),1),1),t=tu(),null!==e&&(bt(e,1,t),ru(e,t))}function ku(e,t,n){if(3===e.tag)Cu(e,e,n);else for(;null!==t;){if(3===t.tag){Cu(t,e,n);break}if(1===t.tag){var i=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===Vl||!Vl.has(i))){t=Ma(t,e=gs(t,e=cs(n,e),1),1),e=tu(),null!==t&&(bt(t,1,e),ru(t,e));break}}t=t.return}}function Tu(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Nl&n)===n&&(4===Bl||3===Bl&&(130023424&Nl)===Nl&&500>Xe()-Wl?pu(e,0):Rl|=n),ru(e,t)}function Su(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Da(e,t))&&(bt(e,t,n),ru(e,n))}function Eu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Su(e,n)}function Du(e,t){var n=0;switch(e.tag){case 13:var i=e.stateNode,r=e.memoizedState;null!==r&&(n=r.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(a(314))}null!==i&&i.delete(t),Su(e,n)}function Pu(e,t){return Ve(e,t)}function Iu(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nu(e,t,n,i){return new Iu(e,t,n,i)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mu(e,t){var n=e.alternate;return null===n?((n=Nu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bu(e,t,n,i,r,o){var s=2;if(i=e,"function"==typeof e)Ou(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return zu(n.children,r,o,t);case C:s=8,r|=8;break;case k:return(e=Nu(12,n,t,2|r)).elementType=k,e.lanes=o,e;case D:return(e=Nu(13,n,t,r)).elementType=D,e.lanes=o,e;case P:return(e=Nu(19,n,t,r)).elementType=P,e.lanes=o,e;case O:return ju(n,r,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case S:s=9;break e;case E:s=11;break e;case I:s=14;break e;case N:s=16,i=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Nu(s,n,t,r)).elementType=e,t.type=i,t.lanes=o,t}function zu(e,t,n,i){return(e=Nu(7,e,i,t)).lanes=n,e}function ju(e,t,n,i){return(e=Nu(22,e,i,t)).elementType=O,e.lanes=n,e.stateNode={isHidden:!1},e}function Lu(e,t,n){return(e=Nu(6,e,null,t)).lanes=n,e}function Ru(e,t,n){return(t=Nu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hu(e,t,n,i,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=i,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Fu(e,t,n,i,r,a,o,s,l){return e=new Hu(e,t,n,s,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Nu(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:i,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ia(a),e}function Wu(e){if(!e)return Sr;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Nr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Nr(n))return Br(e,n,t)}return t}function Uu(e,t,n,i,r,a,o,s,l){return(e=Fu(n,i,!0,e,0,a,0,s,l)).context=Wu(null),n=e.current,(a=Oa(i=tu(),r=nu(n))).callback=null!=t?t:null,Ma(n,a,r),e.current.lanes=r,bt(e,r,i),ru(e,i),e}function qu(e,t,n,i){var r=t.current,a=tu(),o=nu(r);return n=Wu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Oa(a,o)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),null!==(e=Ma(r,t,o))&&(iu(e,r,o,a),Ba(e,r,o)),o}function Yu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $u(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vu(e,t){$u(e,t),(e=e.alternate)&&$u(e,t)}Cl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Dr.current)_s=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return _s=!1,function(e,t,n){switch(t.tag){case 3:Ps(t),pa();break;case 5:ao(t);break;case 1:Nr(t.type)&&zr(t);break;case 4:io(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,r=t.memoizedProps.value;Tr(ba,i._currentValue),i._currentValue=r;break;case 13:if(null!==(i=t.memoizedState))return null!==i.dehydrated?(Tr(so,1&so.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ls(e,t,n):(Tr(so,1&so.current),null!==(e=Ys(e,t,n))?e.sibling:null);Tr(so,1&so.current);break;case 19:if(i=0!=(n&t.childLanes),0!=(128&e.flags)){if(i)return Us(e,t,n);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),Tr(so,so.current),i)break;return null;case 22:case 23:return t.lanes=0,ks(e,t,n)}return Ys(e,t,n)}(e,t,n);_s=0!=(131072&e.flags)}else _s=!1,ra&&0!=(1048576&t.flags)&&Zr(t,$r,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;qs(e,t),e=t.pendingProps;var r=Ir(t,Er.current);Ca(t,n),r=Co(null,t,i,e,r,n);var o=ko();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Nr(i)?(o=!0,zr(t)):o=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Ia(t),r.updater=Fa,t.stateNode=r,r._reactInternals=t,Ya(t,i,e,n),t=Ds(null,t,i,!0,o,n)):(t.tag=0,ra&&o&&ea(t),ws(null,t,r,n),t=t.child),t;case 16:i=t.elementType;e:{switch(qs(e,t),e=t.pendingProps,i=(r=i._init)(i._payload),t.type=i,r=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===E)return 11;if(e===I)return 14}return 2}(i),e=ma(i,e),r){case 0:t=Ss(null,t,i,e,n);break e;case 1:t=Es(null,t,i,e,n);break e;case 11:t=As(null,t,i,e,n);break e;case 14:t=xs(null,t,i,ma(i.type,e),n);break e}throw Error(a(306,i,""))}return t;case 0:return i=t.type,r=t.pendingProps,Ss(e,t,i,r=t.elementType===i?r:ma(i,r),n);case 1:return i=t.type,r=t.pendingProps,Es(e,t,i,r=t.elementType===i?r:ma(i,r),n);case 3:e:{if(Ps(t),null===e)throw Error(a(387));i=t.pendingProps,r=(o=t.memoizedState).element,Na(e,t),ja(t,i,null,n);var s=t.memoizedState;if(i=s.element,o.isDehydrated){if(o={element:i,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Is(e,t,i,n,r=cs(Error(a(423)),t));break e}if(i!==r){t=Is(e,t,i,n,r=cs(Error(a(424)),t));break e}for(ia=ur(t.stateNode.containerInfo.firstChild),na=t,ra=!0,aa=null,n=Xa(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),i===r){t=Ys(e,t,n);break e}ws(e,t,i,n)}t=t.child}return t;case 5:return ao(t),null===e&&ua(t),i=t.type,r=t.pendingProps,o=null!==e?e.memoizedProps:null,s=r.children,nr(i,r)?s=null:null!==o&&nr(i,o)&&(t.flags|=32),Ts(e,t),ws(e,t,s,n),t.child;case 6:return null===e&&ua(t),null;case 13:return Ls(e,t,n);case 4:return io(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Qa(t,null,i,n):ws(e,t,i,n),t.child;case 11:return i=t.type,r=t.pendingProps,As(e,t,i,r=t.elementType===i?r:ma(i,r),n);case 7:return ws(e,t,t.pendingProps,n),t.child;case 8:case 12:return ws(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(i=t.type._context,r=t.pendingProps,o=t.memoizedProps,s=r.value,Tr(ba,i._currentValue),i._currentValue=s,null!==o)if(si(o.value,s)){if(o.children===r.children&&!Dr.current){t=Ys(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var l=o.dependencies;if(null!==l){s=o.child;for(var u=l.firstContext;null!==u;){if(u.context===i){if(1===o.tag){(u=Oa(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),xa(o.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===o.tag)s=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(s=o.return))throw Error(a(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),xa(s,n,t),s=o.sibling}else s=o.child;if(null!==s)s.return=o;else for(s=o;null!==s;){if(s===t){s=null;break}if(null!==(o=s.sibling)){o.return=s.return,s=o;break}s=s.return}o=s}ws(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,i=t.pendingProps.children,Ca(t,n),i=i(r=ka(r)),t.flags|=1,ws(e,t,i,n),t.child;case 14:return r=ma(i=t.type,t.pendingProps),xs(e,t,i,r=ma(i.type,r),n);case 15:return Cs(e,t,t.type,t.pendingProps,n);case 17:return i=t.type,r=t.pendingProps,r=t.elementType===i?r:ma(i,r),qs(e,t),t.tag=1,Nr(i)?(e=!0,zr(t)):e=!1,Ca(t,n),Ua(t,i,r),Ya(t,i,r,n),Ds(null,t,i,!0,e,n);case 19:return Us(e,t,n);case 22:return ks(e,t,n)}throw Error(a(156,t.tag))};var Ku="function"==typeof reportError?reportError:function(e){console.error(e)};function Gu(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function ec(e,t,n,i,r){var a=n._reactRootContainer;if(a){var o=a;if("function"==typeof r){var s=r;r=function(){var e=Yu(o);s.call(e)}}qu(t,o,e,r)}else o=function(e,t,n,i,r){if(r){if("function"==typeof i){var a=i;i=function(){var e=Yu(o);a.call(e)}}var o=Uu(t,i,e,0,null,!1,0,"",Zu);return e._reactRootContainer=o,e[fr]=o.current,Wi(8===e.nodeType?e.parentNode:e),du(),o}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof i){var s=i;i=function(){var e=Yu(l);s.call(e)}}var l=Fu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=l,e[fr]=l.current,Wi(8===e.nodeType?e.parentNode:e),du((function(){qu(t,l,n,i)})),l}(n,t,e,r,i);return Yu(o)}Qu.prototype.render=Gu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));qu(e,t,null,null)},Qu.prototype.unmount=Gu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){qu(null,e,null,null)})),t[fr]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&0!==t&&t<Ot[n].priority;n++);Ot.splice(n,0,e),0===n&&jt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),ru(t,Xe()),0==(6&Dl)&&(Ul=Xe()+500,Wr()))}break;case 13:du((function(){var t=Da(e,1);if(null!==t){var n=tu();iu(t,e,1,n)}})),Vu(e,1)}},At=function(e){if(13===e.tag){var t=Da(e,134217728);null!==t&&iu(t,e,134217728,tu()),Vu(e,134217728)}},xt=function(e){if(13===e.tag){var t=nu(e),n=Da(e,t);null!==n&&iu(n,e,t,tu()),Vu(e,t)}},Ct=function(){return yt},kt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},Ae=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var r=wr(i);if(!r)throw Error(a(90));V(i),J(i,r)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ee=cu,De=du;var tc={usingClientEntryPoint:!1,Events:[yr,_r,wr,Te,Se,cu]},nc={findFiberByHostInstance:vr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ic={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{rt=rc.inject(ic),at=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,i="",r=Ku;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=Fu(e,1,!1,null,0,n,0,i,r),e[fr]=t.current,Wi(8===e.nodeType?e.parentNode:e),new Gu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ye(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var i=null!=n&&n.hydratedSources||null,r=!1,o="",s=Ku;if(null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Uu(t,null,e,1,null!=n?n:null,r,0,o,s),e[fr]=t.current,Wi(e),i)for(e=0;e<i.length;e++)r=(r=(n=i[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new Qu(t)},t.render=function(e,t,n){if(!Ju(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(a(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!Ju(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,i)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var i=n(935);t.createRoot=i.createRoot,t.hydrateRoot=i.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:function(e,t,n){"use strict";var i=n(294),r=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),o=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var i,l={},u=null,c=null;for(i in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,i)&&!s.hasOwnProperty(i)&&(l[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps)void 0===l[i]&&(l[i]=t[i]);return{$$typeof:r,type:e,key:u,ref:c,props:l,_owner:o.current}}t.jsx=l,t.jsxs=l},408:function(e,t){"use strict";var n=Symbol.for("react.element"),i=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),p=Symbol.iterator,f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||f}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||f}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=b.prototype;var _=y.prototype=new v;_.constructor=y,g(_,b.prototype),_.isPureReactComponent=!0;var w=Array.isArray,A=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,i){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)A.call(t,r)&&!C.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=i;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:n,type:e,key:o,ref:s,props:a,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var S=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function D(e,t,r,a,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case i:l=!0}}if(l)return o=o(l=e),e=""===a?"."+E(l,0):a,w(o)?(r="",null!=e&&(r=e.replace(S,"$&/")+"/"),D(o,t,r,"",(function(e){return e}))):null!=o&&(T(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,r+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(S,"$&/")+"/")+e)),t.push(o)),1;if(l=0,a=""===a?".":a+":",w(e))for(var u=0;u<e.length;u++){var c=a+E(s=e[u],u);l+=D(s,t,r,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=D(s=s.value,t,r,c=a+E(s,u++),o);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var i=[],r=0;return D(e,i,"","",(function(e){return t.call(n,e,r++)})),i}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},O={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:O,ReactCurrentOwner:x};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!T(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=r,t.Profiler=o,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,i){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=g({},e.props),a=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)A.call(t,u)&&!C.hasOwnProperty(u)&&(r[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)r.children=i;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];r.children=l}return{$$typeof:n,type:e.type,key:a,ref:o,props:r,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=O.transition;O.transition={};try{e()}finally{O.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},893:function(e,t,n){"use strict";e.exports=n(251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var i=n-1>>>1,r=e[i];if(!(0<a(r,t)))break e;e[i]=t,e[n]=r,n=i}}function i(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,r=e.length,o=r>>>1;i<o;){var s=2*(i+1)-1,l=e[s],u=s+1,c=e[u];if(0>a(l,n))u<r&&0>a(c,l)?(e[i]=c,e[u]=n,i=u):(e[i]=l,e[s]=n,i=s);else{if(!(u<r&&0>a(c,n)))break e;e[i]=c,e[u]=n,i=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],d=1,h=null,p=3,f=!1,g=!1,m=!1,b="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=i(c);null!==t;){if(null===t.callback)r(c);else{if(!(t.startTime<=e))break;r(c),t.sortIndex=t.expirationTime,n(u,t)}t=i(c)}}function w(e){if(m=!1,_(e),!g)if(null!==i(u))g=!0,O(A);else{var t=i(c);null!==t&&M(w,t.startTime-e)}}function A(e,n){g=!1,m&&(m=!1,v(T),T=-1),f=!0;var a=p;try{for(_(n),h=i(u);null!==h&&(!(h.expirationTime>n)||e&&!D());){var o=h.callback;if("function"==typeof o){h.callback=null,p=h.priorityLevel;var s=o(h.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?h.callback=s:h===i(u)&&r(u),_(n)}else r(u);h=i(u)}if(null!==h)var l=!0;else{var d=i(c);null!==d&&M(w,d.startTime-n),l=!1}return l}finally{h=null,p=a,f=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,k=null,T=-1,S=5,E=-1;function D(){return!(t.unstable_now()-E<S)}function P(){if(null!==k){var e=t.unstable_now();E=e;var n=!0;try{n=k(!0,e)}finally{n?x():(C=!1,k=null)}}else C=!1}if("function"==typeof y)x=function(){y(P)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,N=I.port2;I.port1.onmessage=P,x=function(){N.postMessage(null)}}else x=function(){b(P,0)};function O(e){k=e,C||(C=!0,x())}function M(e,n){T=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||f||(g=!0,O(A))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return i(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,r,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:r,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===i(u)&&e===i(c)&&(m?(v(T),T=-1):m=!0,M(w,a-o))):(e.sortIndex=s,n(u,e),g||f||(g=!0,O(A))),e},t.unstable_shouldYield=D,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)},379:function(e){"use strict";var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],u=i.base?l[0]+i.base:l[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var h=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=r(p,i);i.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var l=i(e,r),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:function(e){"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},i={};function r(e){var t=i[e];if(void 0!==t)return t.exports;var a=i[e]={id:e,exports:{}};return n[e].call(a.exports,a,a.exports,r),a.exports}r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},r.t=function(n,i){if(1&i&&(n=this(n)),8&i)return n;if("object"==typeof n&&n){if(4&i&&n.__esModule)return n;if(16&i&&"function"==typeof n.then)return n}var a=Object.create(null);r.r(a);var o={};e=e||[null,t({}),t([]),t(t)];for(var s=2&i&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((function(e){o[e]=function(){return n[e]}}));return o.default=function(){return n},r.d(a,o),a},r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,function(){"use strict";var e,t=r(294),n=r.t(t,2),i=r(745),a=r(379),o=r.n(a),s=r(795),l=r.n(s),u=r(569),c=r.n(u),d=r(565),h=r.n(d),p=r(216),f=r.n(p),g=r(589),m=r.n(g),b=r(424),v={};function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},y.apply(this,arguments)}v.styleTagTransform=m(),v.setAttributes=h(),v.insert=c().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),o()(b.Z,v),b.Z&&b.Z.locals&&b.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const _="popstate";function w(e,t){if(!1===e||null==e)throw new Error(t)}function A(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function x(e,t){return{usr:e.state,key:e.key,idx:t}}function C(e,t,n,i){return void 0===n&&(n=null),y({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?T(t):t,{state:n,key:t&&t.key||i||Math.random().toString(36).substr(2,8)})}function k(e){let{pathname:t="/",search:n="",hash:i=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),i&&"#"!==i&&(t+="#"===i.charAt(0)?i:"#"+i),t}function T(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}var S;function E(e,t,n){void 0===n&&(n="/");let i=W(("string"==typeof t?T(t):t).pathname||"/",n);if(null==i)return null;let r=D(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(r);let a=null;for(let e=0;null==a&&e<r.length;++e)a=R(r[e],F(i));return a}function D(e,t,n,i){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===i&&(i="");let r=(e,r,a)=>{let o={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};o.relativePath.startsWith("/")&&(w(o.relativePath.startsWith(i),'Absolute route path "'+o.relativePath+'" nested under path "'+i+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),o.relativePath=o.relativePath.slice(i.length));let s=q([i,o.relativePath]),l=n.concat(o);e.children&&e.children.length>0&&(w(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+s+'".'),D(e.children,t,l,s)),(null!=e.path||e.index)&&t.push({path:s,score:L(s,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of P(e.path))r(e,t,n);else r(e,t)})),t}function P(e){let t=e.split("/");if(0===t.length)return[];let[n,...i]=t,r=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===i.length)return r?[a,""]:[a];let o=P(i.join("/")),s=[];return s.push(...o.map((e=>""===e?a:[a,e].join("/")))),r&&s.push(...o),s.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(S||(S={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const I=/^:\w+$/,N=3,O=2,M=1,B=10,z=-2,j=e=>"*"===e;function L(e,t){let n=e.split("/"),i=n.length;return n.some(j)&&(i+=z),t&&(i+=O),n.filter((e=>!j(e))).reduce(((e,t)=>e+(I.test(t)?N:""===t?M:B)),i)}function R(e,t){let{routesMeta:n}=e,i={},r="/",a=[];for(let e=0;e<n.length;++e){let o=n[e],s=e===n.length-1,l="/"===r?t:t.slice(r.length)||"/",u=H({path:o.relativePath,caseSensitive:o.caseSensitive,end:s},l);if(!u)return null;Object.assign(i,u.params);let c=o.route;a.push({params:i,pathname:q([r,u.pathname]),pathnameBase:Y(q([r,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(r=q([r,u.pathnameBase]))}return a}function H(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,i]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),A("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let i=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(i.push(t),"/([^\\/]+)")));return e.endsWith("*")?(i.push("*"),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?r+="\\/*$":""!==e&&"/"!==e&&(r+="(?:(?=\\/|$))"),[new RegExp(r,t?void 0:"i"),i]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let a=r[0],o=a.replace(/(.)\/+$/,"$1"),s=r.slice(1);return{params:i.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";o=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return A(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(s[n]||"",t),e}),{}),pathname:a,pathnameBase:o,pattern:e}}function F(e){try{return decodeURI(e)}catch(t){return A(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function W(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,i=e.charAt(n);return i&&"/"!==i?null:e.slice(n)||"/"}function U(e,t,n,i){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(i)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}const q=e=>e.join("/").replace(/\/\/+/g,"/"),Y=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),$=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",V=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const K=["post","put","patch","delete"],G=(new Set(K),["get",...K]);function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},Q.apply(this,arguments)}new Set(G),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const X=t.createContext(null),J=t.createContext(null),Z=t.createContext(null),ee=t.createContext(null),te=t.createContext({outlet:null,matches:[],isDataRoute:!1}),ne=t.createContext(null);function ie(){return null!=t.useContext(ee)}function re(){return ie()||w(!1),t.useContext(ee).location}function ae(e){t.useContext(Z).static||t.useLayoutEffect(e)}function oe(){let{isDataRoute:e}=t.useContext(te);return e?function(){let{router:e}=function(e){let n=t.useContext(X);return n||w(!1),n}(he.UseNavigateStable),n=fe(pe.UseNavigateStable),i=t.useRef(!1);ae((()=>{i.current=!0}));let r=t.useCallback((function(t,r){void 0===r&&(r={}),i.current&&("number"==typeof t?e.navigate(t):e.navigate(t,Q({fromRouteId:n},r)))}),[e,n]);return r}():function(){ie()||w(!1);let e=t.useContext(X),{basename:n,navigator:i}=t.useContext(Z),{matches:r}=t.useContext(te),{pathname:a}=re(),o=JSON.stringify(function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(r).map((e=>e.pathnameBase))),s=t.useRef(!1);ae((()=>{s.current=!0}));let l=t.useCallback((function(t,r){if(void 0===r&&(r={}),!s.current)return;if("number"==typeof t)return void i.go(t);let l=function(e,t,n,i){let r;void 0===i&&(i=!1),"string"==typeof e?r=T(e):(r=y({},e),w(!r.pathname||!r.pathname.includes("?"),U("?","pathname","search",r)),w(!r.pathname||!r.pathname.includes("#"),U("#","pathname","hash",r)),w(!r.search||!r.search.includes("#"),U("#","search","hash",r)));let a,o=""===e||""===r.pathname,s=o?"/":r.pathname;if(i||null==s)a=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}a=e>=0?t[e]:"/"}let l=function(e,t){void 0===t&&(t="/");let{pathname:n,search:i="",hash:r=""}="string"==typeof e?T(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:$(i),hash:V(r)}}(r,a),u=s&&"/"!==s&&s.endsWith("/"),c=(o||"."===s)&&n.endsWith("/");return l.pathname.endsWith("/")||!u&&!c||(l.pathname+="/"),l}(t,JSON.parse(o),a,"path"===r.relative);null==e&&"/"!==n&&(l.pathname="/"===l.pathname?n:q([n,l.pathname])),(r.replace?i.replace:i.push)(l,r.state,r)}),[n,i,o,a,e]);return l}()}function se(n,i,r){ie()||w(!1);let{navigator:a}=t.useContext(Z),{matches:o}=t.useContext(te),s=o[o.length-1],l=s?s.params:{},u=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let c,d=re();if(i){var h;let e="string"==typeof i?T(i):i;"/"===u||(null==(h=e.pathname)?void 0:h.startsWith(u))||w(!1),c=e}else c=d;let p=c.pathname||"/",f=E(n,{pathname:"/"===u?p:p.slice(u.length)||"/"}),g=function(e,n,i){var r;if(void 0===n&&(n=[]),void 0===i&&(i=null),null==e){var a;if(null==(a=i)||!a.errors)return null;e=i.matches}let o=e,s=null==(r=i)?void 0:r.errors;if(null!=s){let e=o.findIndex((e=>e.route.id&&(null==s?void 0:s[e.route.id])));e>=0||w(!1),o=o.slice(0,Math.min(o.length,e+1))}return o.reduceRight(((e,r,a)=>{let l=r.route.id?null==s?void 0:s[r.route.id]:null,u=null;i&&(u=r.route.errorElement||ue);let c=n.concat(o.slice(0,a+1)),d=()=>{let n;return n=l?u:r.route.Component?t.createElement(r.route.Component,null):r.route.element?r.route.element:e,t.createElement(de,{match:r,routeContext:{outlet:e,matches:c,isDataRoute:null!=i},children:n})};return i&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?t.createElement(ce,{location:i.location,revalidation:i.revalidation,component:u,error:l,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:q([u,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:q([u,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,r);return i&&g?t.createElement(ee.Provider,{value:{location:Q({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:e.Pop}},g):g}function le(){let e=function(){var e;let n=t.useContext(ne),i=function(e){let n=t.useContext(J);return n||w(!1),n}(pe.UseRouteError),r=fe(pe.UseRouteError);return n||(null==(e=i.errors)?void 0:e[r])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),i=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),i?t.createElement("pre",{style:r},i):null,null)}const ue=t.createElement(le,null);class ce extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(te.Provider,{value:this.props.routeContext},t.createElement(ne.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function de(e){let{routeContext:n,match:i,children:r}=e,a=t.useContext(X);return a&&a.static&&a.staticContext&&(i.route.errorElement||i.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=i.route.id),t.createElement(te.Provider,{value:n},r)}var he=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(he||{}),pe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(pe||{});function fe(e){let n=function(e){let n=t.useContext(te);return n||w(!1),n}(),i=n.matches[n.matches.length-1];return i.route.id||w(!1),i.route.id}function ge(e){w(!1)}function me(n){let{basename:i="/",children:r=null,location:a,navigationType:o=e.Pop,navigator:s,static:l=!1}=n;ie()&&w(!1);let u=i.replace(/^\/*/,"/"),c=t.useMemo((()=>({basename:u,navigator:s,static:l})),[u,s,l]);"string"==typeof a&&(a=T(a));let{pathname:d="/",search:h="",hash:p="",state:f=null,key:g="default"}=a,m=t.useMemo((()=>{let e=W(d,u);return null==e?null:{location:{pathname:e,search:h,hash:p,state:f,key:g},navigationType:o}}),[u,d,h,p,f,g,o]);return null==m?null:t.createElement(Z.Provider,{value:c},t.createElement(ee.Provider,{children:r,value:m}))}function be(e){let{children:t,location:n}=e;return se(ve(t),n)}function ve(e,n){void 0===n&&(n=[]);let i=[];return t.Children.forEach(e,((e,r)=>{if(!t.isValidElement(e))return;let a=[...n,r];if(e.type===t.Fragment)return void i.push.apply(i,ve(e.props.children,a));e.type!==ge&&w(!1),e.props.index&&e.props.children&&w(!1);let o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=ve(e.props.children,a)),i.push(o)})),i}n.startTransition,new Promise((()=>{})),t.Component;var ye=r(130),_e={};function we(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)e[i]=n[i]}return e}_e.styleTagTransform=m(),_e.setAttributes=h(),_e.insert=c().bind(null,"head"),_e.domAPI=l(),_e.insertStyleElement=f(),o()(ye.Z,_e),ye.Z&&ye.Z.locals&&ye.Z.locals;var Ae=function e(t,n){function i(e,i,r){if("undefined"!=typeof document){"number"==typeof(r=we({},n,r)).expires&&(r.expires=new Date(Date.now()+864e5*r.expires)),r.expires&&(r.expires=r.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var a="";for(var o in r)r[o]&&(a+="; "+o,!0!==r[o]&&(a+="="+r[o].split(";")[0]));return document.cookie=e+"="+t.write(i,e)+a}}return Object.create({set:i,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],i={},r=0;r<n.length;r++){var a=n[r].split("="),o=a.slice(1).join("=");try{var s=decodeURIComponent(a[0]);if(i[s]=t.read(o,s),e===s)break}catch(e){}}return e?i[e]:i}},remove:function(e,t){i(e,"",we({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,we({},this.attributes,t))},withConverter:function(t){return e(we({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"}),xe=r(893);function Ce(){var e=document.getElementById("userMenu");e.classList.contains("close")?e.classList.remove("close"):e.classList.add("close")}var ke=function(e){var t=e.learner;return oe(),(0,xe.jsxs)("div",{id:"header",children:[(0,xe.jsxs)("div",{className:"left-side",children:[(0,xe.jsx)("a",{href:"/",children:(0,xe.jsx)("img",{src:"/public/assets/imgs/logo.png",alt:"logo",className:"logo"})}),(0,xe.jsx)("form",{action:"",children:(0,xe.jsx)("input",{type:"text",className:"search-course",name:"headerSearch",placeholder:"Searching"})}),(0,xe.jsx)("div",{className:"course-opption",children:(0,xe.jsx)("a",{href:"/",children:"Courses"})}),(0,xe.jsx)("div",{className:"quesAndAns",children:(0,xe.jsx)("a",{href:"#",children:"Expert Q&A"})})]}),(0,xe.jsxs)("div",{className:"right-side",children:[(0,xe.jsxs)("a",{href:"paysite.html",className:"cart",children:[(0,xe.jsx)("i",{className:"fa-solid fa-cart-shopping"}),(0,xe.jsx)("div",{className:"quantity",children:"3"})]}),(0,xe.jsxs)("a",{href:"",className:"notification",children:[(0,xe.jsx)("i",{className:"fa-sharp fa-solid fa-bell"}),(0,xe.jsx)("div",{className:"quantity",children:"3"})]}),(0,xe.jsxs)("div",{onClick:Ce,id:"user",className:"user",children:[(0,xe.jsxs)("a",{href:"#",children:[(0,xe.jsx)("img",{src:t?"/public/media/user/"+t.id+"/"+t.picture:"https://icons.veryicon.com/png/o/miscellaneous/youyinzhibo/guest.png",alt:"avatar"}),(0,xe.jsx)("span",{className:"userInfor",children:t?t.username:"Guest"})]}),(0,xe.jsxs)("div",{id:"userMenu",className:"userMenu close",children:[(0,xe.jsxs)("a",{href:"profile.html",children:[(0,xe.jsx)("i",{className:"fa-solid fa-user"}),(0,xe.jsx)("span",{children:"Profile"})]}),(0,xe.jsxs)("a",{href:"#",children:[(0,xe.jsx)("i",{className:"fa-solid fa-gear"}),(0,xe.jsx)("span",{children:"Setting"})]}),(0,xe.jsxs)("a",{href:"#",children:[(0,xe.jsx)("i",{className:"fa-solid fa-right-from-bracket"}),(0,xe.jsx)("span",{children:"Logout"})]})]})]})]})]})};function Te(e,t){return function(){return e.apply(t,arguments)}}const{toString:Se}=Object.prototype,{getPrototypeOf:Ee}=Object,De=(Pe=Object.create(null),e=>{const t=Se.call(e);return Pe[t]||(Pe[t]=t.slice(8,-1).toLowerCase())});var Pe;const Ie=e=>(e=e.toLowerCase(),t=>De(t)===e),Ne=e=>t=>typeof t===e,{isArray:Oe}=Array,Me=Ne("undefined"),Be=Ie("ArrayBuffer"),ze=Ne("string"),je=Ne("function"),Le=Ne("number"),Re=e=>null!==e&&"object"==typeof e,He=e=>{if("object"!==De(e))return!1;const t=Ee(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Fe=Ie("Date"),We=Ie("File"),Ue=Ie("Blob"),qe=Ie("FileList"),Ye=Ie("URLSearchParams");function $e(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let i,r;if("object"!=typeof e&&(e=[e]),Oe(e))for(i=0,r=e.length;i<r;i++)t.call(null,e[i],i,e);else{const r=n?Object.getOwnPropertyNames(e):Object.keys(e),a=r.length;let o;for(i=0;i<a;i++)o=r[i],t.call(null,e[o],o,e)}}function Ve(e,t){t=t.toLowerCase();const n=Object.keys(e);let i,r=n.length;for(;r-- >0;)if(i=n[r],t===i.toLowerCase())return i;return null}const Ke="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Ge=e=>!Me(e)&&e!==Ke,Qe=(Xe="undefined"!=typeof Uint8Array&&Ee(Uint8Array),e=>Xe&&e instanceof Xe);var Xe;const Je=Ie("HTMLFormElement"),Ze=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),et=Ie("RegExp"),tt=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),i={};$e(n,((n,r)=>{let a;!1!==(a=t(n,r,e))&&(i[r]=a||n)})),Object.defineProperties(e,i)},nt="abcdefghijklmnopqrstuvwxyz",it="0123456789",rt={DIGIT:it,ALPHA:nt,ALPHA_DIGIT:nt+nt.toUpperCase()+it},at=Ie("AsyncFunction");var ot={isArray:Oe,isArrayBuffer:Be,isBuffer:function(e){return null!==e&&!Me(e)&&null!==e.constructor&&!Me(e.constructor)&&je(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||je(e.append)&&("formdata"===(t=De(e))||"object"===t&&je(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Be(e.buffer),t},isString:ze,isNumber:Le,isBoolean:e=>!0===e||!1===e,isObject:Re,isPlainObject:He,isUndefined:Me,isDate:Fe,isFile:We,isBlob:Ue,isRegExp:et,isFunction:je,isStream:e=>Re(e)&&je(e.pipe),isURLSearchParams:Ye,isTypedArray:Qe,isFileList:qe,forEach:$e,merge:function e(){const{caseless:t}=Ge(this)&&this||{},n={},i=(i,r)=>{const a=t&&Ve(n,r)||r;He(n[a])&&He(i)?n[a]=e(n[a],i):He(i)?n[a]=e({},i):Oe(i)?n[a]=i.slice():n[a]=i};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&$e(arguments[e],i);return n},extend:(e,t,n,{allOwnKeys:i}={})=>($e(t,((t,i)=>{n&&je(t)?e[i]=Te(t,n):e[i]=t}),{allOwnKeys:i}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,i)=>{let r,a,o;const s={};if(t=t||{},null==e)return t;do{for(r=Object.getOwnPropertyNames(e),a=r.length;a-- >0;)o=r[a],i&&!i(o,e,t)||s[o]||(t[o]=e[o],s[o]=!0);e=!1!==n&&Ee(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:De,kindOfTest:Ie,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const i=e.indexOf(t,n);return-1!==i&&i===n},toArray:e=>{if(!e)return null;if(Oe(e))return e;let t=e.length;if(!Le(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let i;for(;(i=n.next())&&!i.done;){const n=i.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const i=[];for(;null!==(n=e.exec(t));)i.push(n);return i},isHTMLForm:Je,hasOwnProperty:Ze,hasOwnProp:Ze,reduceDescriptors:tt,freezeMethods:e=>{tt(e,((t,n)=>{if(je(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const i=e[n];je(i)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},i=e=>{e.forEach((e=>{n[e]=!0}))};return Oe(e)?i(e):i(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:Ve,global:Ke,isContextDefined:Ge,ALPHABET:rt,generateString:(e=16,t=rt.ALPHA_DIGIT)=>{let n="";const{length:i}=t;for(;e--;)n+=t[Math.random()*i|0];return n},isSpecCompliantForm:function(e){return!!(e&&je(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,i)=>{if(Re(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[i]=e;const r=Oe(e)?[]:{};return $e(e,((e,t)=>{const a=n(e,i+1);!Me(a)&&(r[t]=a)})),t[i]=void 0,r}}return e};return n(e,0)},isAsyncFn:at,isThenable:e=>e&&(Re(e)||je(e))&&je(e.then)&&je(e.catch)};function st(e,t,n,i,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),i&&(this.request=i),r&&(this.response=r)}ot.inherits(st,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:ot.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const lt=st.prototype,ut={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{ut[e]={value:e}})),Object.defineProperties(st,ut),Object.defineProperty(lt,"isAxiosError",{value:!0}),st.from=(e,t,n,i,r,a)=>{const o=Object.create(lt);return ot.toFlatObject(e,o,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),st.call(o,e.message,t,n,i,r),o.cause=e,o.name=e.name,a&&Object.assign(o,a),o};var ct=st;function dt(e){return ot.isPlainObject(e)||ot.isArray(e)}function ht(e){return ot.endsWith(e,"[]")?e.slice(0,-2):e}function pt(e,t,n){return e?e.concat(t).map((function(e,t){return e=ht(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const ft=ot.toFlatObject(ot,{},null,(function(e){return/^is[A-Z]/.test(e)}));var gt=function(e,t,n){if(!ot.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const i=(n=ot.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!ot.isUndefined(t[e])}))).metaTokens,r=n.visitor||u,a=n.dots,o=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&ot.isSpecCompliantForm(t);if(!ot.isFunction(r))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(ot.isDate(e))return e.toISOString();if(!s&&ot.isBlob(e))throw new ct("Blob is not supported. Use a Buffer instead.");return ot.isArrayBuffer(e)||ot.isTypedArray(e)?s&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,r){let s=e;if(e&&!r&&"object"==typeof e)if(ot.endsWith(n,"{}"))n=i?n:n.slice(0,-2),e=JSON.stringify(e);else if(ot.isArray(e)&&function(e){return ot.isArray(e)&&!e.some(dt)}(e)||(ot.isFileList(e)||ot.endsWith(n,"[]"))&&(s=ot.toArray(e)))return n=ht(n),s.forEach((function(e,i){!ot.isUndefined(e)&&null!==e&&t.append(!0===o?pt([n],i,a):null===o?n:n+"[]",l(e))})),!1;return!!dt(e)||(t.append(pt(r,n,a),l(e)),!1)}const c=[],d=Object.assign(ft,{defaultVisitor:u,convertValue:l,isVisitable:dt});if(!ot.isObject(e))throw new TypeError("data must be an object");return function e(n,i){if(!ot.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+i.join("."));c.push(n),ot.forEach(n,(function(n,a){!0===(!(ot.isUndefined(n)||null===n)&&r.call(t,n,ot.isString(a)?a.trim():a,i,d))&&e(n,i?i.concat(a):[a])})),c.pop()}}(e),t};function mt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function bt(e,t){this._pairs=[],e&&gt(e,this,t)}const vt=bt.prototype;vt.append=function(e,t){this._pairs.push([e,t])},vt.toString=function(e){const t=e?function(t){return e.call(this,t,mt)}:mt;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var yt=bt;function _t(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function wt(e,t,n){if(!t)return e;const i=n&&n.encode||_t,r=n&&n.serialize;let a;if(a=r?r(t,n):ot.isURLSearchParams(t)?t.toString():new yt(t,n).toString(i),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}var At=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){ot.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},xt={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Ct={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:yt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},kt=function(e){function t(e,n,i,r){let a=e[r++];const o=Number.isFinite(+a),s=r>=e.length;return a=!a&&ot.isArray(i)?i.length:a,s?(ot.hasOwnProp(i,a)?i[a]=[i[a],n]:i[a]=n,!o):(i[a]&&ot.isObject(i[a])||(i[a]=[]),t(e,n,i[a],r)&&ot.isArray(i[a])&&(i[a]=function(e){const t={},n=Object.keys(e);let i;const r=n.length;let a;for(i=0;i<r;i++)a=n[i],t[a]=e[a];return t}(i[a])),!o)}if(ot.isFormData(e)&&ot.isFunction(e.entries)){const n={};return ot.forEachEntry(e,((e,i)=>{t(function(e){return ot.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),i,n,0)})),n}return null};const Tt={transitional:xt,adapter:Ct.isNode?"http":"xhr",transformRequest:[function(e,t){const n=t.getContentType()||"",i=n.indexOf("application/json")>-1,r=ot.isObject(e);if(r&&ot.isHTMLForm(e)&&(e=new FormData(e)),ot.isFormData(e))return i&&i?JSON.stringify(kt(e)):e;if(ot.isArrayBuffer(e)||ot.isBuffer(e)||ot.isStream(e)||ot.isFile(e)||ot.isBlob(e))return e;if(ot.isArrayBufferView(e))return e.buffer;if(ot.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(r){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return gt(e,new Ct.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,i){return Ct.isNode&&ot.isBuffer(e)?(this.append(t,e.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=ot.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return gt(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return r||i?(t.setContentType("application/json",!1),function(e,t,n){if(ot.isString(e))try{return(0,JSON.parse)(e),ot.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Tt.transitional,n=t&&t.forcedJSONParsing,i="json"===this.responseType;if(e&&ot.isString(e)&&(n&&!this.responseType||i)){const n=!(t&&t.silentJSONParsing)&&i;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw ct.from(e,ct.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ct.classes.FormData,Blob:Ct.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};ot.forEach(["delete","get","head","post","put","patch"],(e=>{Tt.headers[e]={}}));var St=Tt;const Et=ot.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Dt=Symbol("internals");function Pt(e){return e&&String(e).trim().toLowerCase()}function It(e){return!1===e||null==e?e:ot.isArray(e)?e.map(It):String(e)}function Nt(e,t,n,i,r){return ot.isFunction(i)?i.call(this,t,n):(r&&(t=n),ot.isString(t)?ot.isString(i)?-1!==t.indexOf(i):ot.isRegExp(i)?i.test(t):void 0:void 0)}class Ot{constructor(e){e&&this.set(e)}set(e,t,n){const i=this;function r(e,t,n){const r=Pt(t);if(!r)throw new Error("header name must be a non-empty string");const a=ot.findKey(i,r);(!a||void 0===i[a]||!0===n||void 0===n&&!1!==i[a])&&(i[a||t]=It(e))}const a=(e,t)=>ot.forEach(e,((e,n)=>r(e,n,t)));return ot.isPlainObject(e)||e instanceof this.constructor?a(e,t):ot.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,i,r;return e&&e.split("\n").forEach((function(e){r=e.indexOf(":"),n=e.substring(0,r).trim().toLowerCase(),i=e.substring(r+1).trim(),!n||t[n]&&Et[n]||("set-cookie"===n?t[n]?t[n].push(i):t[n]=[i]:t[n]=t[n]?t[n]+", "+i:i)})),t})(e),t):null!=e&&r(t,e,n),this}get(e,t){if(e=Pt(e)){const n=ot.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=n.exec(e);)t[i[1]]=i[2];return t}(e);if(ot.isFunction(t))return t.call(this,e,n);if(ot.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Pt(e)){const n=ot.findKey(this,e);return!(!n||void 0===this[n]||t&&!Nt(0,this[n],n,t))}return!1}delete(e,t){const n=this;let i=!1;function r(e){if(e=Pt(e)){const r=ot.findKey(n,e);!r||t&&!Nt(0,n[r],r,t)||(delete n[r],i=!0)}}return ot.isArray(e)?e.forEach(r):r(e),i}clear(e){const t=Object.keys(this);let n=t.length,i=!1;for(;n--;){const r=t[n];e&&!Nt(0,this[r],r,e,!0)||(delete this[r],i=!0)}return i}normalize(e){const t=this,n={};return ot.forEach(this,((i,r)=>{const a=ot.findKey(n,r);if(a)return t[a]=It(i),void delete t[r];const o=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(r):String(r).trim();o!==r&&delete t[r],t[o]=It(i),n[o]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return ot.forEach(this,((n,i)=>{null!=n&&!1!==n&&(t[i]=e&&ot.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Dt]=this[Dt]={accessors:{}}).accessors,n=this.prototype;function i(e){const i=Pt(e);t[i]||(function(e,t){const n=ot.toCamelCase(" "+t);["get","set","has"].forEach((i=>{Object.defineProperty(e,i+n,{value:function(e,n,r){return this[i].call(this,t,e,n,r)},configurable:!0})}))}(n,e),t[i]=!0)}return ot.isArray(e)?e.forEach(i):i(e),this}}Ot.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),ot.reduceDescriptors(Ot.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),ot.freezeMethods(Ot);var Mt=Ot;function Bt(e,t){const n=this||St,i=t||n,r=Mt.from(i.headers);let a=i.data;return ot.forEach(e,(function(e){a=e.call(n,a,r.normalize(),t?t.status:void 0)})),r.normalize(),a}function zt(e){return!(!e||!e.__CANCEL__)}function jt(e,t,n){ct.call(this,null==e?"canceled":e,ct.ERR_CANCELED,t,n),this.name="CanceledError"}ot.inherits(jt,ct,{__CANCEL__:!0});var Lt=jt,Rt=Ct.isStandardBrowserEnv?{write:function(e,t,n,i,r,a){const o=[];o.push(e+"="+encodeURIComponent(t)),ot.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),ot.isString(i)&&o.push("path="+i),ot.isString(r)&&o.push("domain="+r),!0===a&&o.push("secure"),document.cookie=o.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function Ht(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Ft=Ct.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function i(n){let i=n;return e&&(t.setAttribute("href",i),i=t.href),t.setAttribute("href",i),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=i(window.location.href),function(e){const t=ot.isString(e)?i(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Wt(e,t){let n=0;const i=function(e,t){e=e||10;const n=new Array(e),i=new Array(e);let r,a=0,o=0;return t=void 0!==t?t:1e3,function(s){const l=Date.now(),u=i[o];r||(r=l),n[a]=s,i[a]=l;let c=o,d=0;for(;c!==a;)d+=n[c++],c%=e;if(a=(a+1)%e,a===o&&(o=(o+1)%e),l-r<t)return;const h=u&&l-u;return h?Math.round(1e3*d/h):void 0}}(50,250);return r=>{const a=r.loaded,o=r.lengthComputable?r.total:void 0,s=a-n,l=i(s);n=a;const u={loaded:a,total:o,progress:o?a/o:void 0,bytes:s,rate:l||void 0,estimated:l&&o&&a<=o?(o-a)/l:void 0,event:r};u[t?"download":"upload"]=!0,e(u)}}const Ut={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let i=e.data;const r=Mt.from(e.headers).normalize(),a=e.responseType;let o;function s(){e.cancelToken&&e.cancelToken.unsubscribe(o),e.signal&&e.signal.removeEventListener("abort",o)}ot.isFormData(i)&&(Ct.isStandardBrowserEnv||Ct.isStandardBrowserWebWorkerEnv?r.setContentType(!1):r.setContentType("multipart/form-data;",!1));let l=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";r.set("Authorization","Basic "+btoa(t+":"+n))}const u=Ht(e.baseURL,e.url);function c(){if(!l)return;const i=Mt.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(e,t,n){const i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(new ct("Request failed with status code "+n.status,[ct.ERR_BAD_REQUEST,ct.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),s()}),(function(e){n(e),s()}),{data:a&&"text"!==a&&"json"!==a?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:i,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),wt(u,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,"onloadend"in l?l.onloadend=c:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(c)},l.onabort=function(){l&&(n(new ct("Request aborted",ct.ECONNABORTED,e,l)),l=null)},l.onerror=function(){n(new ct("Network Error",ct.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const i=e.transitional||xt;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new ct(t,i.clarifyTimeoutError?ct.ETIMEDOUT:ct.ECONNABORTED,e,l)),l=null},Ct.isStandardBrowserEnv){const t=(e.withCredentials||Ft(u))&&e.xsrfCookieName&&Rt.read(e.xsrfCookieName);t&&r.set(e.xsrfHeaderName,t)}void 0===i&&r.setContentType(null),"setRequestHeader"in l&&ot.forEach(r.toJSON(),(function(e,t){l.setRequestHeader(t,e)})),ot.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),a&&"json"!==a&&(l.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",Wt(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",Wt(e.onUploadProgress)),(e.cancelToken||e.signal)&&(o=t=>{l&&(n(!t||t.type?new Lt(null,e,l):t),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(o),e.signal&&(e.signal.aborted?o():e.signal.addEventListener("abort",o)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(u);d&&-1===Ct.protocols.indexOf(d)?n(new ct("Unsupported protocol "+d+":",ct.ERR_BAD_REQUEST,e)):l.send(i||null)}))}};ot.forEach(Ut,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));var qt=e=>{e=ot.isArray(e)?e:[e];const{length:t}=e;let n,i;for(let r=0;r<t&&(n=e[r],!(i=ot.isString(n)?Ut[n.toLowerCase()]:n));r++);if(!i){if(!1===i)throw new ct(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(ot.hasOwnProp(Ut,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!ot.isFunction(i))throw new TypeError("adapter is not a function");return i};function Yt(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Lt(null,e)}function $t(e){return Yt(e),e.headers=Mt.from(e.headers),e.data=Bt.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),qt(e.adapter||St.adapter)(e).then((function(t){return Yt(e),t.data=Bt.call(e,e.transformResponse,t),t.headers=Mt.from(t.headers),t}),(function(t){return zt(t)||(Yt(e),t&&t.response&&(t.response.data=Bt.call(e,e.transformResponse,t.response),t.response.headers=Mt.from(t.response.headers))),Promise.reject(t)}))}const Vt=e=>e instanceof Mt?e.toJSON():e;function Kt(e,t){t=t||{};const n={};function i(e,t,n){return ot.isPlainObject(e)&&ot.isPlainObject(t)?ot.merge.call({caseless:n},e,t):ot.isPlainObject(t)?ot.merge({},t):ot.isArray(t)?t.slice():t}function r(e,t,n){return ot.isUndefined(t)?ot.isUndefined(e)?void 0:i(void 0,e,n):i(e,t,n)}function a(e,t){if(!ot.isUndefined(t))return i(void 0,t)}function o(e,t){return ot.isUndefined(t)?ot.isUndefined(e)?void 0:i(void 0,e):i(void 0,t)}function s(n,r,a){return a in t?i(n,r):a in e?i(void 0,n):void 0}const l={url:a,method:a,data:a,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:s,headers:(e,t)=>r(Vt(e),Vt(t),!0)};return ot.forEach(Object.keys(Object.assign({},e,t)),(function(i){const a=l[i]||r,o=a(e[i],t[i],i);ot.isUndefined(o)&&a!==s||(n[i]=o)})),n}const Gt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Gt[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Qt={};Gt.transitional=function(e,t,n){function i(e,t){return"[Axios v1.5.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,r,a)=>{if(!1===e)throw new ct(i(r," has been removed"+(t?" in "+t:"")),ct.ERR_DEPRECATED);return t&&!Qt[r]&&(Qt[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}};var Xt={assertOptions:function(e,t,n){if("object"!=typeof e)throw new ct("options must be an object",ct.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let r=i.length;for(;r-- >0;){const a=i[r],o=t[a];if(o){const t=e[a],n=void 0===t||o(t,a,e);if(!0!==n)throw new ct("option "+a+" must be "+n,ct.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new ct("Unknown option "+a,ct.ERR_BAD_OPTION)}},validators:Gt};const Jt=Xt.validators;class Zt{constructor(e){this.defaults=e,this.interceptors={request:new At,response:new At}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Kt(this.defaults,t);const{transitional:n,paramsSerializer:i,headers:r}=t;void 0!==n&&Xt.assertOptions(n,{silentJSONParsing:Jt.transitional(Jt.boolean),forcedJSONParsing:Jt.transitional(Jt.boolean),clarifyTimeoutError:Jt.transitional(Jt.boolean)},!1),null!=i&&(ot.isFunction(i)?t.paramsSerializer={serialize:i}:Xt.assertOptions(i,{encode:Jt.function,serialize:Jt.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=r&&ot.merge(r.common,r[t.method]);r&&ot.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete r[e]})),t.headers=Mt.concat(a,r);const o=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,o.unshift(e.fulfilled,e.rejected))}));const l=[];let u;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let c,d=0;if(!s){const e=[$t.bind(this),void 0];for(e.unshift.apply(e,o),e.push.apply(e,l),c=e.length,u=Promise.resolve(t);d<c;)u=u.then(e[d++],e[d++]);return u}c=o.length;let h=t;for(d=0;d<c;){const e=o[d++],t=o[d++];try{h=e(h)}catch(e){t.call(this,e);break}}try{u=$t.call(this,h)}catch(e){return Promise.reject(e)}for(d=0,c=l.length;d<c;)u=u.then(l[d++],l[d++]);return u}getUri(e){return wt(Ht((e=Kt(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}ot.forEach(["delete","get","head","options"],(function(e){Zt.prototype[e]=function(t,n){return this.request(Kt(n||{},{method:e,url:t,data:(n||{}).data}))}})),ot.forEach(["post","put","patch"],(function(e){function t(t){return function(n,i,r){return this.request(Kt(r||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:i}))}}Zt.prototype[e]=t(),Zt.prototype[e+"Form"]=t(!0)}));var en=Zt;class tn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const i=new Promise((e=>{n.subscribe(e),t=e})).then(e);return i.cancel=function(){n.unsubscribe(t)},i},e((function(e,i,r){n.reason||(n.reason=new Lt(e,i,r),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new tn((function(t){e=t})),cancel:e}}}var nn=tn;const rn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(rn).forEach((([e,t])=>{rn[t]=e}));var an=rn;const on=function e(t){const n=new en(t),i=Te(en.prototype.request,n);return ot.extend(i,en.prototype,n,{allOwnKeys:!0}),ot.extend(i,n,null,{allOwnKeys:!0}),i.create=function(n){return e(Kt(t,n))},i}(St);on.Axios=en,on.CanceledError=Lt,on.CancelToken=nn,on.isCancel=zt,on.VERSION="1.5.0",on.toFormData=gt,on.AxiosError=ct,on.Cancel=on.CanceledError,on.all=function(e){return Promise.all(e)},on.spread=function(e){return function(t){return e.apply(null,t)}},on.isAxiosError=function(e){return ot.isObject(e)&&!0===e.isAxiosError},on.mergeConfig=Kt,on.AxiosHeaders=Mt,on.formToJSON=e=>kt(ot.isHTMLForm(e)?new FormData(e):e),on.getAdapter=qt,on.HttpStatusCode=an,on.default=on;var sn=on;function ln(e){var t=e.title,n=void 0===t?"":t,i=e.message,r=void 0===i?"":i,a=e.type,o=void 0===a?"success":a,s=e.duration,l=void 0===s?3e3:s,u=document.getElementById("toast");if(u){var c=document.createElement("div");c.onclick=function(e){e.target.closest(".toastClose")&&u.removeChild(c)},c.style.animation="slideInLeft ease .5s , fadeOut linear 1s ".concat(l/1e3,"s forwards");var d={success:"fa-solid fa-circle-check",error:"fa-solid fa-circle-exclamation",warning:"fa-solid fa-triangle-exclamation"}[o];c.classList.add("toastMessage","".concat(o)),c.innerHTML='\n        <div class="toastIcon">\n        <i class="'.concat(d,'"></i>\n        </div>\n         <div class="toastBody">\n        <h3>').concat(n,"</h3>\n        <p>").concat(r,'</p>\n         </div>\n         <div onclick="closeMessage()" class="toastClose">\n        <i class="fa-solid fa-xmark"></i>\n         </div>\n        '),u.appendChild(c),setTimeout((function(){u.removeChild(c)}),l)}}var un=function(e){ln({title:"Success",message:e,type:"success",duration:3e3})},cn=function(e){ln({title:"Error",message:e,type:"error",duration:3e3})},dn=function(e){ln({title:"Warning",message:e,type:"warning",duration:3e3})};function hn(e){return hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hn(e)}function pn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function fn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pn(Object(n),!0).forEach((function(t){var i,r,a;i=e,r=t,a=n[t],(r=function(e){var t=function(e,t){if("object"!==hn(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==hn(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===hn(t)?t:String(t)}(r))in i?Object.defineProperty(i,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):i[r]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function gn(e){return e.then((function(e){return 200===e.status?(e.data.success||console.log("Server: "+e.data.message),e.data):(cn("There are some error when get data from server!"),{success:!1})})).catch((function(e){return e.response?e.response.data?(e.response.data.message?console.log("Server: "+e.response.data.message):cn("There are some error when get data from server!"),e.response.data):(cn("There are some error when connect to server!"),{success:!1}):(cn("Some unknown error, please contact IT support"),{success:!1})}))}var mn=function(e,t,n){return gn(sn.post("http://localhost:8080/api/"+e,t,fn(fn({},n),{},{headers:{},withCredentials:!0})))};function bn(e){return bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bn(e)}function vn(){vn=function(){return t};var e,t={},n=Object.prototype,i=n.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,i){var a=t&&t.prototype instanceof b?t:b,o=Object.create(a.prototype),s=new P(i||[]);return r(o,"_invoke",{value:T(e,n,s)}),o}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var h="suspendedStart",p="suspendedYield",f="executing",g="completed",m={};function b(){}function v(){}function y(){}var _={};u(_,o,(function(){return this}));var w=Object.getPrototypeOf,A=w&&w(w(I([])));A&&A!==n&&i.call(A,o)&&(_=A);var x=y.prototype=b.prototype=Object.create(_);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(r,a,o,s){var l=d(e[r],e,a);if("throw"!==l.type){var u=l.arg,c=u.value;return c&&"object"==bn(c)&&i.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,o,s)}),(function(e){n("throw",e,o,s)})):t.resolve(c).then((function(e){u.value=e,o(u)}),(function(e){return n("throw",e,o,s)}))}s(l.arg)}var a;r(this,"_invoke",{value:function(e,i){function r(){return new t((function(t,r){n(e,i,t,r)}))}return a=a?a.then(r,r):r()}})}function T(t,n,i){var r=h;return function(a,o){if(r===f)throw new Error("Generator is already running");if(r===g){if("throw"===a)throw o;return{value:e,done:!0}}for(i.method=a,i.arg=o;;){var s=i.delegate;if(s){var l=S(s,i);if(l){if(l===m)continue;return l}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(r===h)throw r=g,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);r=f;var u=d(t,n,i);if("normal"===u.type){if(r=i.done?g:p,u.arg===m)continue;return{value:u.arg,done:i.done}}"throw"===u.type&&(r=g,i.method="throw",i.arg=u.arg)}}}function S(t,n){var i=n.method,r=t.iterator[i];if(r===e)return n.delegate=null,"throw"===i&&t.iterator.return&&(n.method="return",n.arg=e,S(t,n),"throw"===n.method)||"return"!==i&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+i+"' method")),m;var a=d(r,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var o=a.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function D(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function I(t){if(t||""===t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,a=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(bn(t)+" is not iterable")}return v.prototype=y,r(x,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:v,configurable:!0}),v.displayName=u(y,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},C(k.prototype),u(k.prototype,s,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,i,r,a){void 0===a&&(a=Promise);var o=new k(c(e,n,i,r),a);return t.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},C(x),u(x,l,"Generator"),u(x,o,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var i in t)n.push(i);return n.reverse(),function e(){for(;n.length;){var i=n.pop();if(i in t)return e.value=i,e.done=!1,e}return e.done=!0,e}},t.values=I,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(D),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(i,r){return s.type="throw",s.arg=t,n.next=i,r&&(n.method="next",n.arg=e),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var l=i.call(o,"catchLoc"),u=i.call(o,"finallyLoc");if(l&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),D(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var i=n.completion;if("throw"===i.type){var r=i.arg;D(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,i){return this.delegate={iterator:I(t),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=e),m}},t}function yn(e,t,n,i,r,a,o){try{var s=e[a](o),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(i,r)}function _n(e){return function(){var t=this,n=arguments;return new Promise((function(i,r){var a=e.apply(t,n);function o(e){yn(a,i,r,o,s,"next",e)}function s(e){yn(a,i,r,o,s,"throw",e)}o(void 0)}))}}function wn(){return(wn=_n(vn().mark((function e(){return vn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,Ae.get("learnerJwtToken")){e.next=4;break}return e.abrupt("return",!1);case 4:return e.next=6,mn("auth/learner");case 6:return e.abrupt("return",e.sent);case 9:return e.prev=9,e.t0=e.catch(0),e.abrupt("return",!1);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function An(){return(An=_n(vn().mark((function e(){return vn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,Ae.get("instructorJwtToken")){e.next=4;break}return e.abrupt("return",!1);case 4:return e.next=6,mn("auth/instructor");case 6:return e.abrupt("return",e.sent);case 9:return e.prev=9,e.t0=e.catch(0),e.abrupt("return",!1);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}var xn={learnerLoggedIn:function(){return wn.apply(this,arguments)},instructorLoggedIn:function(){return An.apply(this,arguments)}},Cn=xn,kn=function(){return(0,xe.jsxs)("div",{id:"footer",children:[(0,xe.jsxs)("div",{className:"contact row",children:[(0,xe.jsxs)("div",{className:"introduction col-md-6",children:[(0,xe.jsxs)("div",{className:"logo-name",children:[(0,xe.jsx)("img",{src:"./assets/imgs/logo.png",alt:""}),(0,xe.jsx)("h2",{children:"Yojihan"})]}),(0,xe.jsx)("p",{children:"Instructors from around the world teach millions of students on Udemy. We provide the tools and skills to teach what you love."}),(0,xe.jsxs)("div",{className:"social-media",children:[(0,xe.jsx)("i",{className:"fa-brands fa-instagram"}),(0,xe.jsx)("i",{className:"fa-brands fa-facebook"}),(0,xe.jsx)("i",{className:"fa-brands fa-github"}),(0,xe.jsx)("i",{className:"fa-brands fa-twitter"})]})]}),(0,xe.jsxs)("div",{className:"head help col-md-2",children:["HELP",(0,xe.jsx)("p",{children:"Help"}),(0,xe.jsx)("p",{children:"Discuss"}),(0,xe.jsx)("p",{children:"Contact us"})]}),(0,xe.jsxs)("div",{className:"head pay col-md-2",children:["PAYMENT METHODS",(0,xe.jsx)("p",{children:"Paypal"}),(0,xe.jsx)("p",{children:"Visa"})]}),(0,xe.jsxs)("div",{className:"head info col-md-2",children:["INFORMATION",(0,xe.jsx)("p",{children:"About us"})]})]}),(0,xe.jsx)("div",{className:"copyright",children:(0,xe.jsx)("p",{children:"Powered by GR2 © 2023. All Rights Reserved. rev 25/05/2023 02:25:34 PM"})})]})},Tn=r(755),Sn=r.n(Tn);function En(e){return En="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},En(e)}function Dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function Pn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dn(Object(n),!0).forEach((function(t){var i,r,a;i=e,r=t,a=n[t],(r=function(e){var t=function(e,t){if("object"!==En(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==En(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===En(t)?t:String(t)}(r))in i?Object.defineProperty(i,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):i[r]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function In(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,a,o,s=[],l=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(i=a.call(n)).done)&&(s.push(i.value),s.length!==t);l=!0);}catch(e){u=!0,r=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw r}}return s}}(e,t)||Nn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nn(e,t){if(e){if("string"==typeof e)return On(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?On(e,t):void 0}}function On(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Mn(e){var n=e.course,i=e.afterEditCourse,r=In((0,t.useState)(null),2),a=r[0],o=r[1];return(0,t.useEffect)((function(){n&&mn("course/getByCourseID",{courseID:n.id}).then((function(e){e&&o(e)}))}),[n]),a&&(0,xe.jsx)("div",{className:"rightPane p-4 bg-white",style:{height:"max-content"},children:(0,xe.jsx)("div",{className:"addMooc",id:"addMooc",children:(0,xe.jsxs)("div",{children:[(0,xe.jsx)("h1",{className:"text-center",children:"Edit course"}),(0,xe.jsx)("div",{className:"mt-4",children:(0,xe.jsxs)("form",{className:"row g-3",children:[(0,xe.jsxs)("div",{className:"col-12",children:[(0,xe.jsx)("label",{htmlFor:"CourseName",className:"form-label",children:"Course Name"}),(0,xe.jsx)("input",{type:"text",className:"form-control",id:"CourseName",value:a.name,onChange:function(e){o(Pn(Pn({},a),{},{name:e.target.value}))},placeholder:"Ex: Java Introduction",required:!0})]}),(0,xe.jsxs)("div",{className:"col-12",children:[(0,xe.jsx)("label",{htmlFor:"CourseDescription",className:"form-label",children:"Course Description"}),(0,xe.jsx)("input",{type:"text",className:"form-control",id:"CourseDescription",value:a.description,onChange:function(e){o(Pn(Pn({},a),{},{description:e.target.value}))},placeholder:"Ex: This course help for newbie practice with Java code",required:!0})]}),(0,xe.jsxs)("div",{className:"col-6",children:[(0,xe.jsx)("label",{htmlFor:"CoursePrice",className:"form-label",children:"Course Price"}),(0,xe.jsx)("input",{type:"number",className:"form-control",id:"CoursePrice",value:a.price,onChange:function(e){o(Pn(Pn({},a),{},{price:e.target.value}))},required:!0})]}),(0,xe.jsx)("div",{className:"col-12",children:(0,xe.jsx)("div",{className:"btn btn-primary",onClick:function(){mn("course/update",Pn({},a)).then((function(e){e?(un("Save Successful!"),i()):dn("Save Course failed")}))},children:"Save"})})]})})]})})})}function Bn(e){var n=e.chapter,i=e.afterEditChapter,r=In((0,t.useState)(null),2),a=r[0],o=r[1];return(0,t.useEffect)((function(){n&&mn("chapter/getByChapterID",{chapterID:n.id}).then((function(e){e&&o(e)}))}),[n]),a&&(0,xe.jsx)("div",{className:"rightPane p-4 bg-white",style:{height:"max-content"},children:(0,xe.jsx)("div",{className:"addMooc",id:"addMooc",children:(0,xe.jsxs)("div",{children:[(0,xe.jsx)("h1",{className:"text-center",children:"Edit chapter"}),(0,xe.jsx)("div",{className:"mt-4",children:(0,xe.jsxs)("form",{className:"row g-3",children:[(0,xe.jsxs)("div",{className:"col-12",children:[(0,xe.jsx)("label",{htmlFor:"CourseName",className:"form-label",children:"Chapter Name"}),(0,xe.jsx)("input",{type:"text",className:"form-control",id:"CourseName",value:a&&a.name,onChange:function(e){o(Pn(Pn({},a),{},{name:e.target.value}))},placeholder:"Ex: If condition",required:!0})]}),(0,xe.jsxs)("div",{className:"col-12",children:[(0,xe.jsx)("label",{htmlFor:"CourseDescription",className:"form-label",children:"Chapter Description"}),(0,xe.jsx)("input",{type:"text",className:"form-control",id:"CourseDescription",value:a.description,onChange:function(e){o(Pn(Pn({},a),{},{description:e.target.value}))},placeholder:"Ex: This chapter help for newbie practice with Java code",required:!0})]}),(0,xe.jsxs)("div",{className:"col-12",children:[(0,xe.jsx)("div",{className:"btn btn-primary",onClick:function(){mn("chapter/update",Pn({},a)).then((function(e){e?(un("Save Successful!"),i()):dn("Save Chapter failed")}))},children:"Save"}),(0,xe.jsx)("div",{className:"btn btn-danger ms-2",onClick:function(){mn("chapter/delete",{chapterID:n.id}).then((function(e){e?i():dn("Delete Chapter failed")}))},children:"Delete"})]})]})})]})})})}r(704);var zn=function(){var e=function(){let{matches:e}=t.useContext(te),n=e[e.length-1];return n?n.params:{}}().courseID,n=In((0,t.useState)(null),2),i=n[0],r=n[1],a=In((0,t.useState)(null),2),o=a[0],s=a[1],l=In((0,t.useState)([]),2),u=l[0],c=l[1],d=In((0,t.useState)(0),2),h=d[0],p=d[1],f=In((0,t.useState)(null),2),g=f[0],m=f[1];function b(e){mn("course/getByCourseID",{courseID:e}).then((function(e){e||window.location.replace("/"),s(e)}))}function v(e,t){mn("chapter/getByCourseID",{courseID:e}).then((function(e){if(e){if(e.sort((function(e,t){return e.index-t.index})),c(e),t){var n=g?g.index:0;e.length>=n?m(e[n-1]):e.length&&m(e[e.length-1])}}else 2==h&&p(0)}))}function y(t,n){var i,r=[],a=1,o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Nn(e))){n&&(e=n);var i=0,r=function(){};return{s:r,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}(Sn()(".chapterTitles").sortable("serialize",{key:"chapter"}).split("&"));try{for(o.s();!(i=o.n()).done;){var s=i.value.split("=")[1];r.push({id:u[s].id,index:a++})}}catch(e){o.e(e)}finally{o.f()}for(var l=[],c=0;c<u.length;c++)r[c].id===u[c].id&&r[c].index===u[c].index||l.push(r[c]);for(var d={size:l.length,courseID:e},h=0;h<l.length;h++)d["id_"+h]=l[h].id,d["index_"+h]=l[h].index;0!==l.length&&mn("chapter/reIndexs",d).then((function(t){t?(v(e),Sn()(".chapterTitles").sortable("cancel")):dn("Reindex chapters failed")}))}return oe(),(0,t.useEffect)((function(){var t=Cn.instructorLoggedIn();t.then((function(e){e||window.location.replace("/"),r(t)})),b(e),v(e,!1)}),[]),(0,t.useEffect)((function(){Sn()(".chapterTitles").sortable({placeholder:"drag-location",handle:".mooc-handle",start:function(e,t){t.placeholder.height(t.helper.outerHeight())},stop:y})}),[u]),(0,xe.jsxs)("div",{className:"CourseEdit",children:[(0,xe.jsx)(ke,{learner:i}),(0,xe.jsxs)("div",{id:"body-editCourse",children:[(0,xe.jsxs)("div",{className:"leftPane",children:[(0,xe.jsxs)("h3",{children:[o&&o.name," ",(0,xe.jsx)("i",{className:"text-info fa-solid fa-pen-to-square",onClick:function(){p(1)},style:{cursor:"pointer"}})]}),(0,xe.jsx)("div",{className:"accordion chapterTitles",id:"accordionExample",children:u.map((function(e,t){return(0,xe.jsx)("div",{id:"chapter_"+t,className:"accordion-item",style:{cursor:"all-scroll"},onClick:function(){return function(e){m(e),p(2)}(e)},children:(0,xe.jsxs)("h4",{className:"accordion-header",children:[(0,xe.jsx)("div",{className:"mooc-handle",children:(0,xe.jsx)("i",{className:"fas fa-ellipsis-v"})}),(0,xe.jsxs)("button",{className:"accordion-button collapsed"+(2==h&&g&&e.id==g.id?" chosing":""),type:"button","data-bs-toggle":"collapse","data-bs-target":"#collapse_1","aria-expanded":"false","aria-controls":"collapseOne",children:[(0,xe.jsxs)("strong",{children:["#",t+1]}),(0,xe.jsx)("span",{className:"ms-1",children:e.name})]})]})},e.id)}))}),(0,xe.jsx)("div",{className:"accordion-btn",children:(0,xe.jsx)("button",{onClick:function(){mn("chapter/create",{courseID:e}).then((function(t){t?(v(e,!1),m(t),p(2)):dn("Add new chapter failed")}))},className:"btn btn-primary w-100 p-2",children:"Add new chapter"})})]}),1==h&&o&&(0,xe.jsx)(Mn,{course:o,afterEditCourse:function(){b(e)}}),2==h&&o&&(0,xe.jsx)(Bn,{chapter:g,afterEditChapter:function(){v(e,!0)}})]}),(0,xe.jsx)(kn,{})]})};function jn(){return(0,xe.jsx)("div",{className:"App",children:(0,xe.jsx)(be,{children:(0,xe.jsx)(ge,{path:"course/edit/:courseID",element:(0,xe.jsx)(zn,{})})})})}var Ln=r(516),Rn={};Rn.styleTagTransform=m(),Rn.setAttributes=h(),Rn.insert=c().bind(null,"head"),Rn.domAPI=l(),Rn.insertStyleElement=f(),o()(Ln.Z,Rn),Ln.Z&&Ln.Z.locals&&Ln.Z.locals,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Hn=n.startTransition;function Fn(n){let{basename:i,children:r,future:a,window:o}=n,s=t.useRef();null==s.current&&(s.current=function(t){return void 0===t&&(t={}),function(t,n,i,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,s=a.history,l=e.Pop,u=null,c=d();function d(){return(s.state||{idx:null}).idx}function h(){l=e.Pop;let t=d(),n=null==t?null:t-c;c=t,u&&u({action:l,location:f.location,delta:n})}function p(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:k(e);return w(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,s.replaceState(y({},s.state,{idx:c}),""));let f={get action(){return l},get location(){return t(a,s)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener(_,h),u=e,()=>{a.removeEventListener(_,h),u=null}},createHref(e){return n(a,e)},createURL:p,encodeLocation(e){let t=p(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){l=e.Push;let r=C(f.location,t,n);i&&i(r,t),c=d()+1;let h=x(r,c),p=f.createHref(r);try{s.pushState(h,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(p)}o&&u&&u({action:l,location:f.location,delta:1})},replace:function(t,n){l=e.Replace;let r=C(f.location,t,n);i&&i(r,t),c=d();let a=x(r,c),h=f.createHref(r);s.replaceState(a,"",h),o&&u&&u({action:l,location:f.location,delta:0})},go(e){return s.go(e)}};return f}((function(e,t){let{pathname:n,search:i,hash:r}=e.location;return C("",{pathname:n,search:i,hash:r},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:k(t)}),null,t)}({window:o,v5Compat:!0}));let l=s.current,[u,c]=t.useState({action:l.action,location:l.location}),{v7_startTransition:d}=a||{},h=t.useCallback((e=>{d&&Hn?Hn((()=>c(e))):c(e)}),[c,d]);return t.useLayoutEffect((()=>l.listen(h)),[l,h]),t.createElement(me,{basename:i,children:r,location:u.location,navigationType:u.action,navigator:l})}var Wn,Un;"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"}(Wn||(Wn={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Un||(Un={})),i.createRoot(document.getElementById("root")).render((0,xe.jsx)(t.StrictMode,{children:(0,xe.jsx)(Fn,{children:(0,xe.jsx)(be,{children:(0,xe.jsx)(ge,{path:"*",element:(0,xe.jsx)(jn,{})})})})}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,